
CryptoTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003618  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  08003724  08003724  00013724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c80  08003c80  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08003c80  08003c80  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c80  08003c80  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c80  08003c80  00013c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c84  08003c84  00013c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08003c88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  2000002c  08003cb4  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08003cb4  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a9d8  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000191a  00000000  00000000  0002aa2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c8  00000000  00000000  0002c348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001805a  00000000  00000000  0002cd10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000db4b  00000000  00000000  00044d6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00089b46  00000000  00000000  000528b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      000000d5  00000000  00000000  000dc3fb  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000008f8  00000000  00000000  000dc4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002804  00000000  00000000  000dcdc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000002c 	.word	0x2000002c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800370c 	.word	0x0800370c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000030 	.word	0x20000030
 8000148:	0800370c 	.word	0x0800370c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
	int32_t status = AES_SUCCESS;
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000156:	f000 fb67 	bl	8000828 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800015a:	f000 f87b 	bl	8000254 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015e:	f000 f923 	bl	80003a8 <MX_GPIO_Init>
  MX_CRC_Init();
 8000162:	f000 f8bd 	bl	80002e0 <MX_CRC_Init>
  MX_TIM1_Init();
 8000166:	f000 f8cf 	bl	8000308 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  /* Encrypt DATA with AES in CCM mode and generate authentication TAG */
  /* Шифруем блок */

  status = STM32_AES_CCM_Encrypt( (uint8_t *) HeaderMessage, HeaderLength , (uint8_t *) Plaintext,
 800016a:	4b2c      	ldr	r3, [pc, #176]	; (800021c <main+0xd0>)
 800016c:	6819      	ldr	r1, [r3, #0]
 800016e:	4b2c      	ldr	r3, [pc, #176]	; (8000220 <main+0xd4>)
 8000170:	681b      	ldr	r3, [r3, #0]
 8000172:	4a2c      	ldr	r2, [pc, #176]	; (8000224 <main+0xd8>)
 8000174:	9205      	str	r2, [sp, #20]
 8000176:	4a2c      	ldr	r2, [pc, #176]	; (8000228 <main+0xdc>)
 8000178:	9204      	str	r2, [sp, #16]
 800017a:	4a2c      	ldr	r2, [pc, #176]	; (800022c <main+0xe0>)
 800017c:	9203      	str	r2, [sp, #12]
 800017e:	2207      	movs	r2, #7
 8000180:	9202      	str	r2, [sp, #8]
 8000182:	4a2b      	ldr	r2, [pc, #172]	; (8000230 <main+0xe4>)
 8000184:	9201      	str	r2, [sp, #4]
 8000186:	4a2b      	ldr	r2, [pc, #172]	; (8000234 <main+0xe8>)
 8000188:	9200      	str	r2, [sp, #0]
 800018a:	4a2b      	ldr	r2, [pc, #172]	; (8000238 <main+0xec>)
 800018c:	482b      	ldr	r0, [pc, #172]	; (800023c <main+0xf0>)
 800018e:	f000 f957 	bl	8000440 <STM32_AES_CCM_Encrypt>
 8000192:	6078      	str	r0, [r7, #4]
                                  InputLength, Key, IV, sizeof(IV), encrypt_OutputMessage,
                                  &encrypt_OutputMessageLength, &AuthenticationTAGLength);
  if (status == AES_SUCCESS)
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	2b00      	cmp	r3, #0
 8000198:	d10a      	bne.n	80001b0 <main+0x64>
  {

    if (Buffercmp(Expected_Ciphertext, encrypt_OutputMessage, CIPHER_TEXT_LENGTH) == PASSED)
 800019a:	2208      	movs	r2, #8
 800019c:	4923      	ldr	r1, [pc, #140]	; (800022c <main+0xe0>)
 800019e:	4828      	ldr	r0, [pc, #160]	; (8000240 <main+0xf4>)
 80001a0:	f000 fa47 	bl	8000632 <Buffercmp>
 80001a4:	4603      	mov	r3, r0
 80001a6:	2b01      	cmp	r3, #1
 80001a8:	d004      	beq.n	80001b4 <main+0x68>

    }
    else
    {

      Error_Handler();
 80001aa:	f000 fa63 	bl	8000674 <Error_Handler>
 80001ae:	e001      	b.n	80001b4 <main+0x68>

    /* In case of encryption/decryption not success possible values of status:
    * AES_ERR_BAD_OPERATION, AES_ERR_BAD_CONTEXT, AES_ERR_BAD_PARAMETER
    */

    Error_Handler();
 80001b0:	f000 fa60 	bl	8000674 <Error_Handler>

  /* Будим ядро */


  /* Запускаем отсчте таймера */
  time_Decrypt = 0; // переменная для хранения времени декодирования
 80001b4:	4b23      	ldr	r3, [pc, #140]	; (8000244 <main+0xf8>)
 80001b6:	2200      	movs	r2, #0
 80001b8:	601a      	str	r2, [r3, #0]

  /* Расшифровываем блок */
  /* Decrypt DATA with AES in CCM mode and check the authentication TAG */
  status = STM32_AES_CCM_Decrypt( (uint8_t *) HeaderMessage, sizeof(HeaderMessage), (uint8_t *) encrypt_OutputMessage,
 80001ba:	4b1b      	ldr	r3, [pc, #108]	; (8000228 <main+0xdc>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	461a      	mov	r2, r3
 80001c0:	4b18      	ldr	r3, [pc, #96]	; (8000224 <main+0xd8>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	9305      	str	r3, [sp, #20]
 80001c6:	4b20      	ldr	r3, [pc, #128]	; (8000248 <main+0xfc>)
 80001c8:	9304      	str	r3, [sp, #16]
 80001ca:	4b20      	ldr	r3, [pc, #128]	; (800024c <main+0x100>)
 80001cc:	9303      	str	r3, [sp, #12]
 80001ce:	2307      	movs	r3, #7
 80001d0:	9302      	str	r3, [sp, #8]
 80001d2:	4b17      	ldr	r3, [pc, #92]	; (8000230 <main+0xe4>)
 80001d4:	9301      	str	r3, [sp, #4]
 80001d6:	4b17      	ldr	r3, [pc, #92]	; (8000234 <main+0xe8>)
 80001d8:	9300      	str	r3, [sp, #0]
 80001da:	4613      	mov	r3, r2
 80001dc:	4a13      	ldr	r2, [pc, #76]	; (800022c <main+0xe0>)
 80001de:	2108      	movs	r1, #8
 80001e0:	4816      	ldr	r0, [pc, #88]	; (800023c <main+0xf0>)
 80001e2:	f000 f9a6 	bl	8000532 <STM32_AES_CCM_Decrypt>
 80001e6:	6078      	str	r0, [r7, #4]
                                  encrypt_OutputMessageLength, Key, IV, sizeof(IV), decrypt_OutputMessage,
                                  &decrypt_OutputMessageLength, AuthenticationTAGLength);
  if (status == AUTHENTICATION_SUCCESSFUL)
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80001ee:	4293      	cmp	r3, r2
 80001f0:	d10a      	bne.n	8000208 <main+0xbc>
  {

    if (Buffercmp(Plaintext, decrypt_OutputMessage, PLAINTEXT_LENGTH) == PASSED)
 80001f2:	2204      	movs	r2, #4
 80001f4:	4915      	ldr	r1, [pc, #84]	; (800024c <main+0x100>)
 80001f6:	4810      	ldr	r0, [pc, #64]	; (8000238 <main+0xec>)
 80001f8:	f000 fa1b 	bl	8000632 <Buffercmp>
 80001fc:	4603      	mov	r3, r0
 80001fe:	2b01      	cmp	r3, #1
 8000200:	d004      	beq.n	800020c <main+0xc0>

    }
    else
    {

      Error_Handler();
 8000202:	f000 fa37 	bl	8000674 <Error_Handler>
 8000206:	e001      	b.n	800020c <main+0xc0>
      *  of status:
      * AES_ERR_BAD_OPERATION, AES_ERR_BAD_CONTEXT, AES_ERR_BAD_PARAMETER,
      * AUTHENTICATION_FAILED
      */

    Error_Handler();
 8000208:	f000 fa34 	bl	8000674 <Error_Handler>

  /* Отправляем расшифрованный блок и потраченное на расшифровку время */


  /* Turn on the green led in an infinite loop in case of AES CCM operations are succssfuls*/
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800020c:	2200      	movs	r2, #0
 800020e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000212:	480f      	ldr	r0, [pc, #60]	; (8000250 <main+0x104>)
 8000214:	f000 fe18 	bl	8000e48 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000218:	e7fe      	b.n	8000218 <main+0xcc>
 800021a:	bf00      	nop
 800021c:	20000000 	.word	0x20000000
 8000220:	20000004 	.word	0x20000004
 8000224:	20000054 	.word	0x20000054
 8000228:	2000004c 	.word	0x2000004c
 800022c:	20000058 	.word	0x20000058
 8000230:	20000018 	.word	0x20000018
 8000234:	20000008 	.word	0x20000008
 8000238:	0800373c 	.word	0x0800373c
 800023c:	08003734 	.word	0x08003734
 8000240:	08003740 	.word	0x08003740
 8000244:	20000048 	.word	0x20000048
 8000248:	20000050 	.word	0x20000050
 800024c:	20000128 	.word	0x20000128
 8000250:	40011000 	.word	0x40011000

08000254 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b090      	sub	sp, #64	; 0x40
 8000258:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025a:	f107 0318 	add.w	r3, r7, #24
 800025e:	2228      	movs	r2, #40	; 0x28
 8000260:	2100      	movs	r1, #0
 8000262:	4618      	mov	r0, r3
 8000264:	f003 fa4a 	bl	80036fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000268:	1d3b      	adds	r3, r7, #4
 800026a:	2200      	movs	r2, #0
 800026c:	601a      	str	r2, [r3, #0]
 800026e:	605a      	str	r2, [r3, #4]
 8000270:	609a      	str	r2, [r3, #8]
 8000272:	60da      	str	r2, [r3, #12]
 8000274:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000276:	2301      	movs	r3, #1
 8000278:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800027a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800027e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000280:	2300      	movs	r3, #0
 8000282:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000284:	2301      	movs	r3, #1
 8000286:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000288:	2302      	movs	r3, #2
 800028a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800028c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000290:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000292:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000296:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000298:	f107 0318 	add.w	r3, r7, #24
 800029c:	4618      	mov	r0, r3
 800029e:	f000 fdeb 	bl	8000e78 <HAL_RCC_OscConfig>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002a8:	f000 f9e4 	bl	8000674 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ac:	230f      	movs	r3, #15
 80002ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b0:	2302      	movs	r3, #2
 80002b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b4:	2300      	movs	r3, #0
 80002b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002be:	2300      	movs	r3, #0
 80002c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	2102      	movs	r1, #2
 80002c6:	4618      	mov	r0, r3
 80002c8:	f001 f856 	bl	8001378 <HAL_RCC_ClockConfig>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002d2:	f000 f9cf 	bl	8000674 <Error_Handler>
  }
}
 80002d6:	bf00      	nop
 80002d8:	3740      	adds	r7, #64	; 0x40
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
	...

080002e0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80002e4:	4b06      	ldr	r3, [pc, #24]	; (8000300 <MX_CRC_Init+0x20>)
 80002e6:	4a07      	ldr	r2, [pc, #28]	; (8000304 <MX_CRC_Init+0x24>)
 80002e8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80002ea:	4805      	ldr	r0, [pc, #20]	; (8000300 <MX_CRC_Init+0x20>)
 80002ec:	f000 fc0b 	bl	8000b06 <HAL_CRC_Init>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80002f6:	f000 f9bd 	bl	8000674 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80002fa:	bf00      	nop
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	20000098 	.word	0x20000098
 8000304:	40023000 	.word	0x40023000

08000308 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b086      	sub	sp, #24
 800030c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800030e:	f107 0308 	add.w	r3, r7, #8
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	605a      	str	r2, [r3, #4]
 8000318:	609a      	str	r2, [r3, #8]
 800031a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800031c:	463b      	mov	r3, r7
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
 8000322:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000324:	4b1e      	ldr	r3, [pc, #120]	; (80003a0 <MX_TIM1_Init+0x98>)
 8000326:	4a1f      	ldr	r2, [pc, #124]	; (80003a4 <MX_TIM1_Init+0x9c>)
 8000328:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800032a:	4b1d      	ldr	r3, [pc, #116]	; (80003a0 <MX_TIM1_Init+0x98>)
 800032c:	2200      	movs	r2, #0
 800032e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000330:	4b1b      	ldr	r3, [pc, #108]	; (80003a0 <MX_TIM1_Init+0x98>)
 8000332:	2200      	movs	r2, #0
 8000334:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000336:	4b1a      	ldr	r3, [pc, #104]	; (80003a0 <MX_TIM1_Init+0x98>)
 8000338:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800033c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800033e:	4b18      	ldr	r3, [pc, #96]	; (80003a0 <MX_TIM1_Init+0x98>)
 8000340:	2200      	movs	r2, #0
 8000342:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000344:	4b16      	ldr	r3, [pc, #88]	; (80003a0 <MX_TIM1_Init+0x98>)
 8000346:	2200      	movs	r2, #0
 8000348:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800034a:	4b15      	ldr	r3, [pc, #84]	; (80003a0 <MX_TIM1_Init+0x98>)
 800034c:	2200      	movs	r2, #0
 800034e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000350:	4813      	ldr	r0, [pc, #76]	; (80003a0 <MX_TIM1_Init+0x98>)
 8000352:	f001 f979 	bl	8001648 <HAL_TIM_Base_Init>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800035c:	f000 f98a 	bl	8000674 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000364:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000366:	f107 0308 	add.w	r3, r7, #8
 800036a:	4619      	mov	r1, r3
 800036c:	480c      	ldr	r0, [pc, #48]	; (80003a0 <MX_TIM1_Init+0x98>)
 800036e:	f001 fac2 	bl	80018f6 <HAL_TIM_ConfigClockSource>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000378:	f000 f97c 	bl	8000674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800037c:	2300      	movs	r3, #0
 800037e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000380:	2300      	movs	r3, #0
 8000382:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000384:	463b      	mov	r3, r7
 8000386:	4619      	mov	r1, r3
 8000388:	4805      	ldr	r0, [pc, #20]	; (80003a0 <MX_TIM1_Init+0x98>)
 800038a:	f001 fc9d 	bl	8001cc8 <HAL_TIMEx_MasterConfigSynchronization>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000394:	f000 f96e 	bl	8000674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000398:	bf00      	nop
 800039a:	3718      	adds	r7, #24
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	200000e0 	.word	0x200000e0
 80003a4:	40012c00 	.word	0x40012c00

080003a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b088      	sub	sp, #32
 80003ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ae:	f107 0310 	add.w	r3, r7, #16
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	605a      	str	r2, [r3, #4]
 80003b8:	609a      	str	r2, [r3, #8]
 80003ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003bc:	4b1e      	ldr	r3, [pc, #120]	; (8000438 <MX_GPIO_Init+0x90>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	4a1d      	ldr	r2, [pc, #116]	; (8000438 <MX_GPIO_Init+0x90>)
 80003c2:	f043 0310 	orr.w	r3, r3, #16
 80003c6:	6193      	str	r3, [r2, #24]
 80003c8:	4b1b      	ldr	r3, [pc, #108]	; (8000438 <MX_GPIO_Init+0x90>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	f003 0310 	and.w	r3, r3, #16
 80003d0:	60fb      	str	r3, [r7, #12]
 80003d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003d4:	4b18      	ldr	r3, [pc, #96]	; (8000438 <MX_GPIO_Init+0x90>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	4a17      	ldr	r2, [pc, #92]	; (8000438 <MX_GPIO_Init+0x90>)
 80003da:	f043 0320 	orr.w	r3, r3, #32
 80003de:	6193      	str	r3, [r2, #24]
 80003e0:	4b15      	ldr	r3, [pc, #84]	; (8000438 <MX_GPIO_Init+0x90>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	f003 0320 	and.w	r3, r3, #32
 80003e8:	60bb      	str	r3, [r7, #8]
 80003ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ec:	4b12      	ldr	r3, [pc, #72]	; (8000438 <MX_GPIO_Init+0x90>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	4a11      	ldr	r2, [pc, #68]	; (8000438 <MX_GPIO_Init+0x90>)
 80003f2:	f043 0304 	orr.w	r3, r3, #4
 80003f6:	6193      	str	r3, [r2, #24]
 80003f8:	4b0f      	ldr	r3, [pc, #60]	; (8000438 <MX_GPIO_Init+0x90>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	f003 0304 	and.w	r3, r3, #4
 8000400:	607b      	str	r3, [r7, #4]
 8000402:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000404:	2200      	movs	r2, #0
 8000406:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800040a:	480c      	ldr	r0, [pc, #48]	; (800043c <MX_GPIO_Init+0x94>)
 800040c:	f000 fd1c 	bl	8000e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000410:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000414:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000416:	2301      	movs	r3, #1
 8000418:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041a:	2300      	movs	r3, #0
 800041c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800041e:	2302      	movs	r3, #2
 8000420:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000422:	f107 0310 	add.w	r3, r7, #16
 8000426:	4619      	mov	r1, r3
 8000428:	4804      	ldr	r0, [pc, #16]	; (800043c <MX_GPIO_Init+0x94>)
 800042a:	f000 fb89 	bl	8000b40 <HAL_GPIO_Init>

}
 800042e:	bf00      	nop
 8000430:	3720      	adds	r7, #32
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	40021000 	.word	0x40021000
 800043c:	40011000 	.word	0x40011000

08000440 <STM32_AES_CCM_Encrypt>:
                              uint32_t  IvLength,
                              uint8_t  *OutputMessage,
                              int32_t *OutputMessageLength,
                              int32_t *AuthenticationTAGLength
                             )
{
 8000440:	b590      	push	{r4, r7, lr}
 8000442:	b0db      	sub	sp, #364	; 0x16c
 8000444:	af02      	add	r7, sp, #8
 8000446:	f107 040c 	add.w	r4, r7, #12
 800044a:	6020      	str	r0, [r4, #0]
 800044c:	f107 0008 	add.w	r0, r7, #8
 8000450:	6001      	str	r1, [r0, #0]
 8000452:	1d39      	adds	r1, r7, #4
 8000454:	600a      	str	r2, [r1, #0]
 8000456:	463a      	mov	r2, r7
 8000458:	6013      	str	r3, [r2, #0]
  AESCCMctx_stt AESctx;

  uint32_t error_status = AES_SUCCESS;
 800045a:	2300      	movs	r3, #0
 800045c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

  /* Set flag field to default value */
  AESctx.mFlags = E_SK_DEFAULT;
 8000460:	f107 0310 	add.w	r3, r7, #16
 8000464:	2200      	movs	r2, #0
 8000466:	711a      	strb	r2, [r3, #4]

  /* Set key size to 16 (corresponding to AES-128) */
  AESctx.mKeySize = 16;
 8000468:	f107 0310 	add.w	r3, r7, #16
 800046c:	2210      	movs	r2, #16
 800046e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set nonce size field to IvLength, note that valid values are 7,8,9,10,11,12,13*/
  AESctx.mNonceSize = IvLength;
 8000470:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000474:	f107 0310 	add.w	r3, r7, #16
 8000478:	611a      	str	r2, [r3, #16]

  /* Size of returned authentication TAG */
  AESctx.mTagSize = 4;
 800047a:	f107 0310 	add.w	r3, r7, #16
 800047e:	2204      	movs	r2, #4
 8000480:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the size of the header */
  AESctx.mAssDataSize = HeaderMessageLength;
 8000482:	f107 0308 	add.w	r3, r7, #8
 8000486:	681a      	ldr	r2, [r3, #0]
 8000488:	f107 0310 	add.w	r3, r7, #16
 800048c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of thepayload */
  AESctx.mPayloadSize = PlaintextLength;
 800048e:	463b      	mov	r3, r7
 8000490:	681a      	ldr	r2, [r3, #0]
 8000492:	f107 0310 	add.w	r3, r7, #16
 8000496:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the operation, by passing the key and IV */
  error_status = AES_CCM_Encrypt_Init(&AESctx, AES128_Key, InitializationVector );
 8000498:	f107 0310 	add.w	r3, r7, #16
 800049c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80004a0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80004a4:	4618      	mov	r0, r3
 80004a6:	f001 ff09 	bl	80022bc <AES_CCM_Encrypt_Init>
 80004aa:	4603      	mov	r3, r0
 80004ac:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

  /* check for initialization errors */
  if (error_status == AES_SUCCESS)
 80004b0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d135      	bne.n	8000524 <STM32_AES_CCM_Encrypt+0xe4>
  {
    /* Process Header */
    error_status = AES_CCM_Header_Append(&AESctx,
 80004b8:	f107 0308 	add.w	r3, r7, #8
 80004bc:	681a      	ldr	r2, [r3, #0]
 80004be:	f107 030c 	add.w	r3, r7, #12
 80004c2:	f107 0010 	add.w	r0, r7, #16
 80004c6:	6819      	ldr	r1, [r3, #0]
 80004c8:	f001 ffe6 	bl	8002498 <AES_CCM_Header_Append>
 80004cc:	4603      	mov	r3, r0
 80004ce:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
                                         HeaderMessage,
                                         HeaderMessageLength);
    if (error_status == AES_SUCCESS)
 80004d2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d124      	bne.n	8000524 <STM32_AES_CCM_Encrypt+0xe4>
    {
      /* Encrypt Data */
      error_status = AES_CCM_Encrypt_Append(&AESctx,
 80004da:	463b      	mov	r3, r7
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	1d39      	adds	r1, r7, #4
 80004e0:	f107 0010 	add.w	r0, r7, #16
 80004e4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80004e8:	9300      	str	r3, [sp, #0]
 80004ea:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80004ee:	6809      	ldr	r1, [r1, #0]
 80004f0:	f002 f952 	bl	8002798 <AES_CCM_Encrypt_Append>
 80004f4:	4603      	mov	r3, r0
 80004f6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
                                            Plaintext,
                                            PlaintextLength,
                                            OutputMessage,
                                            OutputMessageLength);

      if (error_status == AES_SUCCESS)
 80004fa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d110      	bne.n	8000524 <STM32_AES_CCM_Encrypt+0xe4>
      {
        /* Do the Finalization, write the TAG at the end of the encrypted message */
        error_status = AES_CCM_Encrypt_Finish(&AESctx, OutputMessage + *OutputMessageLength, AuthenticationTAGLength);
 8000502:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	461a      	mov	r2, r3
 800050a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800050e:	1899      	adds	r1, r3, r2
 8000510:	f107 0310 	add.w	r3, r7, #16
 8000514:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8000518:	4618      	mov	r0, r3
 800051a:	f002 fcd1 	bl	8002ec0 <AES_CCM_Encrypt_Finish>
 800051e:	4603      	mov	r3, r0
 8000520:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
      }
    }
  }

  return error_status;
 8000524:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
}
 8000528:	4618      	mov	r0, r3
 800052a:	f507 77b2 	add.w	r7, r7, #356	; 0x164
 800052e:	46bd      	mov	sp, r7
 8000530:	bd90      	pop	{r4, r7, pc}

08000532 <STM32_AES_CCM_Decrypt>:
                              uint32_t  IvLength,
                              uint8_t  *OutputMessage,
                              int32_t *OutputMessageLength,
                              int32_t  AuthenticationTAGLength
                             )
{
 8000532:	b590      	push	{r4, r7, lr}
 8000534:	b0db      	sub	sp, #364	; 0x16c
 8000536:	af02      	add	r7, sp, #8
 8000538:	f107 040c 	add.w	r4, r7, #12
 800053c:	6020      	str	r0, [r4, #0]
 800053e:	f107 0008 	add.w	r0, r7, #8
 8000542:	6001      	str	r1, [r0, #0]
 8000544:	1d39      	adds	r1, r7, #4
 8000546:	600a      	str	r2, [r1, #0]
 8000548:	463a      	mov	r2, r7
 800054a:	6013      	str	r3, [r2, #0]
  AESCCMctx_stt AESctx;

  uint32_t error_status = AES_SUCCESS;
 800054c:	2300      	movs	r3, #0
 800054e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

  /* Set flag field to default value */
  AESctx.mFlags = E_SK_DEFAULT;
 8000552:	f107 0310 	add.w	r3, r7, #16
 8000556:	2200      	movs	r2, #0
 8000558:	711a      	strb	r2, [r3, #4]

  /* Set key size to 16 (corresponding to AES-128) */
  AESctx.mKeySize = 16;
 800055a:	f107 0310 	add.w	r3, r7, #16
 800055e:	2210      	movs	r2, #16
 8000560:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set nonce size field to IvLength, note that valid values are 7,8,9,10,11,12,13*/
  AESctx.mNonceSize = IvLength;
 8000562:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000566:	f107 0310 	add.w	r3, r7, #16
 800056a:	611a      	str	r2, [r3, #16]

  /* Size of returned authentication TAG */
  AESctx.mTagSize = 4;
 800056c:	f107 0310 	add.w	r3, r7, #16
 8000570:	2204      	movs	r2, #4
 8000572:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the size of the header */
  AESctx.mAssDataSize = HeaderMessageLength;
 8000574:	f107 0308 	add.w	r3, r7, #8
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	f107 0310 	add.w	r3, r7, #16
 800057e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of thepayload */
  AESctx.mPayloadSize = PlaintextLength;
 8000580:	463b      	mov	r3, r7
 8000582:	681a      	ldr	r2, [r3, #0]
 8000584:	f107 0310 	add.w	r3, r7, #16
 8000588:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the pointer to the TAG to be checked */
  AESctx.pmTag = Plaintext + PlaintextLength;
 800058a:	1d3a      	adds	r2, r7, #4
 800058c:	463b      	mov	r3, r7
 800058e:	6812      	ldr	r2, [r2, #0]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	441a      	add	r2, r3
 8000594:	f107 0310 	add.w	r3, r7, #16
 8000598:	639a      	str	r2, [r3, #56]	; 0x38

  /* Size of returned authentication TAG */
  AESctx.mTagSize = AuthenticationTAGLength;
 800059a:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 800059e:	f107 0310 	add.w	r3, r7, #16
 80005a2:	63da      	str	r2, [r3, #60]	; 0x3c


  /* Initialize the operation, by passing the key and IV */
  error_status = AES_CCM_Decrypt_Init(&AESctx, AES128_Key, InitializationVector );
 80005a4:	f107 0310 	add.w	r3, r7, #16
 80005a8:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80005ac:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80005b0:	4618      	mov	r0, r3
 80005b2:	f002 fce3 	bl	8002f7c <AES_CCM_Decrypt_Init>
 80005b6:	4603      	mov	r3, r0
 80005b8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

  /* check for initialization errors */
  if (error_status == AES_SUCCESS)
 80005bc:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d12f      	bne.n	8000624 <STM32_AES_CCM_Decrypt+0xf2>
  {
    /* Process Header */
    error_status = AES_CCM_Header_Append(&AESctx,
 80005c4:	f107 0308 	add.w	r3, r7, #8
 80005c8:	681a      	ldr	r2, [r3, #0]
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	f107 0010 	add.w	r0, r7, #16
 80005d2:	6819      	ldr	r1, [r3, #0]
 80005d4:	f001 ff60 	bl	8002498 <AES_CCM_Header_Append>
 80005d8:	4603      	mov	r3, r0
 80005da:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
                                         HeaderMessage,
                                         HeaderMessageLength);
    if (error_status == AES_SUCCESS)
 80005de:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d11e      	bne.n	8000624 <STM32_AES_CCM_Decrypt+0xf2>
    {
      /* Decrypt Data */
      error_status = AES_CCM_Decrypt_Append(&AESctx,
 80005e6:	463b      	mov	r3, r7
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	1d39      	adds	r1, r7, #4
 80005ec:	f107 0010 	add.w	r0, r7, #16
 80005f0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80005fa:	6809      	ldr	r1, [r1, #0]
 80005fc:	f002 fdac 	bl	8003158 <AES_CCM_Decrypt_Append>
 8000600:	4603      	mov	r3, r0
 8000602:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
                                            Plaintext,
                                            PlaintextLength,
                                            OutputMessage,
                                            OutputMessageLength);

      if (error_status == AES_SUCCESS)
 8000606:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800060a:	2b00      	cmp	r3, #0
 800060c:	d10a      	bne.n	8000624 <STM32_AES_CCM_Decrypt+0xf2>
      {
        /* Do the Finalization, check the authentication TAG*/
        error_status = AES_CCM_Decrypt_Finish(&AESctx, NULL, &AuthenticationTAGLength);
 800060e:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 8000612:	f107 0310 	add.w	r3, r7, #16
 8000616:	2100      	movs	r1, #0
 8000618:	4618      	mov	r0, r3
 800061a:	f002 ff77 	bl	800350c <AES_CCM_Decrypt_Finish>
 800061e:	4603      	mov	r3, r0
 8000620:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
      }
    }
  }

  return error_status;
 8000624:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
}
 8000628:	4618      	mov	r0, r3
 800062a:	f507 77b2 	add.w	r7, r7, #356	; 0x164
 800062e:	46bd      	mov	sp, r7
 8000630:	bd90      	pop	{r4, r7, pc}

08000632 <Buffercmp>:
  * @retval PASSED: pBuffer identical to pBuffer1
  *         FAILED: pBuffer differs from pBuffer1
  */

TestStatus Buffercmp(const uint8_t* pBuffer, uint8_t* pBuffer1, uint16_t BufferLength)
{
 8000632:	b480      	push	{r7}
 8000634:	b085      	sub	sp, #20
 8000636:	af00      	add	r7, sp, #0
 8000638:	60f8      	str	r0, [r7, #12]
 800063a:	60b9      	str	r1, [r7, #8]
 800063c:	4613      	mov	r3, r2
 800063e:	80fb      	strh	r3, [r7, #6]
  while (BufferLength--)
 8000640:	e00d      	b.n	800065e <Buffercmp+0x2c>
  {
    if (*pBuffer != *pBuffer1)
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	781a      	ldrb	r2, [r3, #0]
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	429a      	cmp	r2, r3
 800064c:	d001      	beq.n	8000652 <Buffercmp+0x20>
    {
      return FAILED;
 800064e:	2300      	movs	r3, #0
 8000650:	e00b      	b.n	800066a <Buffercmp+0x38>
    }

    pBuffer++;
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	3301      	adds	r3, #1
 8000656:	60fb      	str	r3, [r7, #12]
    pBuffer1++;
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	3301      	adds	r3, #1
 800065c:	60bb      	str	r3, [r7, #8]
  while (BufferLength--)
 800065e:	88fb      	ldrh	r3, [r7, #6]
 8000660:	1e5a      	subs	r2, r3, #1
 8000662:	80fa      	strh	r2, [r7, #6]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d1ec      	bne.n	8000642 <Buffercmp+0x10>
  }

  return PASSED;
 8000668:	2301      	movs	r3, #1
}
 800066a:	4618      	mov	r0, r3
 800066c:	3714      	adds	r7, #20
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr

08000674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000678:	b672      	cpsid	i
}
 800067a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800067c:	e7fe      	b.n	800067c <Error_Handler+0x8>
	...

08000680 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000680:	b480      	push	{r7}
 8000682:	b085      	sub	sp, #20
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000686:	4b15      	ldr	r3, [pc, #84]	; (80006dc <HAL_MspInit+0x5c>)
 8000688:	699b      	ldr	r3, [r3, #24]
 800068a:	4a14      	ldr	r2, [pc, #80]	; (80006dc <HAL_MspInit+0x5c>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	6193      	str	r3, [r2, #24]
 8000692:	4b12      	ldr	r3, [pc, #72]	; (80006dc <HAL_MspInit+0x5c>)
 8000694:	699b      	ldr	r3, [r3, #24]
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800069e:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <HAL_MspInit+0x5c>)
 80006a0:	69db      	ldr	r3, [r3, #28]
 80006a2:	4a0e      	ldr	r2, [pc, #56]	; (80006dc <HAL_MspInit+0x5c>)
 80006a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a8:	61d3      	str	r3, [r2, #28]
 80006aa:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <HAL_MspInit+0x5c>)
 80006ac:	69db      	ldr	r3, [r3, #28]
 80006ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006b6:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <HAL_MspInit+0x60>)
 80006b8:	685b      	ldr	r3, [r3, #4]
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	4a04      	ldr	r2, [pc, #16]	; (80006e0 <HAL_MspInit+0x60>)
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d2:	bf00      	nop
 80006d4:	3714      	adds	r7, #20
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr
 80006dc:	40021000 	.word	0x40021000
 80006e0:	40010000 	.word	0x40010000

080006e4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a09      	ldr	r2, [pc, #36]	; (8000718 <HAL_CRC_MspInit+0x34>)
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d10b      	bne.n	800070e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <HAL_CRC_MspInit+0x38>)
 80006f8:	695b      	ldr	r3, [r3, #20]
 80006fa:	4a08      	ldr	r2, [pc, #32]	; (800071c <HAL_CRC_MspInit+0x38>)
 80006fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000700:	6153      	str	r3, [r2, #20]
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <HAL_CRC_MspInit+0x38>)
 8000704:	695b      	ldr	r3, [r3, #20]
 8000706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800070e:	bf00      	nop
 8000710:	3714      	adds	r7, #20
 8000712:	46bd      	mov	sp, r7
 8000714:	bc80      	pop	{r7}
 8000716:	4770      	bx	lr
 8000718:	40023000 	.word	0x40023000
 800071c:	40021000 	.word	0x40021000

08000720 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a0d      	ldr	r2, [pc, #52]	; (8000764 <HAL_TIM_Base_MspInit+0x44>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d113      	bne.n	800075a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000732:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <HAL_TIM_Base_MspInit+0x48>)
 8000734:	699b      	ldr	r3, [r3, #24]
 8000736:	4a0c      	ldr	r2, [pc, #48]	; (8000768 <HAL_TIM_Base_MspInit+0x48>)
 8000738:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800073c:	6193      	str	r3, [r2, #24]
 800073e:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <HAL_TIM_Base_MspInit+0x48>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800074a:	2200      	movs	r2, #0
 800074c:	2100      	movs	r1, #0
 800074e:	2019      	movs	r0, #25
 8000750:	f000 f9a3 	bl	8000a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000754:	2019      	movs	r0, #25
 8000756:	f000 f9bc 	bl	8000ad2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800075a:	bf00      	nop
 800075c:	3710      	adds	r7, #16
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40012c00 	.word	0x40012c00
 8000768:	40021000 	.word	0x40021000

0800076c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <NMI_Handler+0x4>

08000772 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000776:	e7fe      	b.n	8000776 <HardFault_Handler+0x4>

08000778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800077c:	e7fe      	b.n	800077c <MemManage_Handler+0x4>

0800077e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000782:	e7fe      	b.n	8000782 <BusFault_Handler+0x4>

08000784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000788:	e7fe      	b.n	8000788 <UsageFault_Handler+0x4>

0800078a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr

08000796 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	46bd      	mov	sp, r7
 800079e:	bc80      	pop	{r7}
 80007a0:	4770      	bx	lr

080007a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007a6:	bf00      	nop
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bc80      	pop	{r7}
 80007ac:	4770      	bx	lr

080007ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007b2:	f000 f87f 	bl	80008b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
	...

080007bc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80007c0:	4802      	ldr	r0, [pc, #8]	; (80007cc <TIM1_UP_IRQHandler+0x10>)
 80007c2:	f000 ff90 	bl	80016e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	200000e0 	.word	0x200000e0

080007d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr

080007dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007dc:	480c      	ldr	r0, [pc, #48]	; (8000810 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007de:	490d      	ldr	r1, [pc, #52]	; (8000814 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007e0:	4a0d      	ldr	r2, [pc, #52]	; (8000818 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007e4:	e002      	b.n	80007ec <LoopCopyDataInit>

080007e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ea:	3304      	adds	r3, #4

080007ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007f0:	d3f9      	bcc.n	80007e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007f2:	4a0a      	ldr	r2, [pc, #40]	; (800081c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007f4:	4c0a      	ldr	r4, [pc, #40]	; (8000820 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007f8:	e001      	b.n	80007fe <LoopFillZerobss>

080007fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007fc:	3204      	adds	r2, #4

080007fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000800:	d3fb      	bcc.n	80007fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000802:	f7ff ffe5 	bl	80007d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000806:	f002 ff47 	bl	8003698 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800080a:	f7ff fc9f 	bl	800014c <main>
  bx lr
 800080e:	4770      	bx	lr
  ldr r0, =_sdata
 8000810:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000814:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000818:	08003c88 	.word	0x08003c88
  ldr r2, =_sbss
 800081c:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000820:	2000016c 	.word	0x2000016c

08000824 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000824:	e7fe      	b.n	8000824 <ADC1_2_IRQHandler>
	...

08000828 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800082c:	4b08      	ldr	r3, [pc, #32]	; (8000850 <HAL_Init+0x28>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a07      	ldr	r2, [pc, #28]	; (8000850 <HAL_Init+0x28>)
 8000832:	f043 0310 	orr.w	r3, r3, #16
 8000836:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000838:	2003      	movs	r0, #3
 800083a:	f000 f923 	bl	8000a84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800083e:	200f      	movs	r0, #15
 8000840:	f000 f808 	bl	8000854 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000844:	f7ff ff1c 	bl	8000680 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000848:	2300      	movs	r3, #0
}
 800084a:	4618      	mov	r0, r3
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40022000 	.word	0x40022000

08000854 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800085c:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <HAL_InitTick+0x54>)
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	4b12      	ldr	r3, [pc, #72]	; (80008ac <HAL_InitTick+0x58>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	4619      	mov	r1, r3
 8000866:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800086a:	fbb3 f3f1 	udiv	r3, r3, r1
 800086e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000872:	4618      	mov	r0, r3
 8000874:	f000 f93b 	bl	8000aee <HAL_SYSTICK_Config>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800087e:	2301      	movs	r3, #1
 8000880:	e00e      	b.n	80008a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2b0f      	cmp	r3, #15
 8000886:	d80a      	bhi.n	800089e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000888:	2200      	movs	r2, #0
 800088a:	6879      	ldr	r1, [r7, #4]
 800088c:	f04f 30ff 	mov.w	r0, #4294967295
 8000890:	f000 f903 	bl	8000a9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000894:	4a06      	ldr	r2, [pc, #24]	; (80008b0 <HAL_InitTick+0x5c>)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800089a:	2300      	movs	r3, #0
 800089c:	e000      	b.n	80008a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800089e:	2301      	movs	r3, #1
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000020 	.word	0x20000020
 80008ac:	20000028 	.word	0x20000028
 80008b0:	20000024 	.word	0x20000024

080008b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008b8:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <HAL_IncTick+0x1c>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	461a      	mov	r2, r3
 80008be:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <HAL_IncTick+0x20>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4413      	add	r3, r2
 80008c4:	4a03      	ldr	r2, [pc, #12]	; (80008d4 <HAL_IncTick+0x20>)
 80008c6:	6013      	str	r3, [r2, #0]
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr
 80008d0:	20000028 	.word	0x20000028
 80008d4:	20000168 	.word	0x20000168

080008d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  return uwTick;
 80008dc:	4b02      	ldr	r3, [pc, #8]	; (80008e8 <HAL_GetTick+0x10>)
 80008de:	681b      	ldr	r3, [r3, #0]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr
 80008e8:	20000168 	.word	0x20000168

080008ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	f003 0307 	and.w	r3, r3, #7
 80008fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008fc:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <__NVIC_SetPriorityGrouping+0x44>)
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000902:	68ba      	ldr	r2, [r7, #8]
 8000904:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000908:	4013      	ands	r3, r2
 800090a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000914:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800091c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800091e:	4a04      	ldr	r2, [pc, #16]	; (8000930 <__NVIC_SetPriorityGrouping+0x44>)
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	60d3      	str	r3, [r2, #12]
}
 8000924:	bf00      	nop
 8000926:	3714      	adds	r7, #20
 8000928:	46bd      	mov	sp, r7
 800092a:	bc80      	pop	{r7}
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000938:	4b04      	ldr	r3, [pc, #16]	; (800094c <__NVIC_GetPriorityGrouping+0x18>)
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	0a1b      	lsrs	r3, r3, #8
 800093e:	f003 0307 	and.w	r3, r3, #7
}
 8000942:	4618      	mov	r0, r3
 8000944:	46bd      	mov	sp, r7
 8000946:	bc80      	pop	{r7}
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800095a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095e:	2b00      	cmp	r3, #0
 8000960:	db0b      	blt.n	800097a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	f003 021f 	and.w	r2, r3, #31
 8000968:	4906      	ldr	r1, [pc, #24]	; (8000984 <__NVIC_EnableIRQ+0x34>)
 800096a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096e:	095b      	lsrs	r3, r3, #5
 8000970:	2001      	movs	r0, #1
 8000972:	fa00 f202 	lsl.w	r2, r0, r2
 8000976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr
 8000984:	e000e100 	.word	0xe000e100

08000988 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	6039      	str	r1, [r7, #0]
 8000992:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000998:	2b00      	cmp	r3, #0
 800099a:	db0a      	blt.n	80009b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	b2da      	uxtb	r2, r3
 80009a0:	490c      	ldr	r1, [pc, #48]	; (80009d4 <__NVIC_SetPriority+0x4c>)
 80009a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a6:	0112      	lsls	r2, r2, #4
 80009a8:	b2d2      	uxtb	r2, r2
 80009aa:	440b      	add	r3, r1
 80009ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009b0:	e00a      	b.n	80009c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	b2da      	uxtb	r2, r3
 80009b6:	4908      	ldr	r1, [pc, #32]	; (80009d8 <__NVIC_SetPriority+0x50>)
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	f003 030f 	and.w	r3, r3, #15
 80009be:	3b04      	subs	r3, #4
 80009c0:	0112      	lsls	r2, r2, #4
 80009c2:	b2d2      	uxtb	r2, r2
 80009c4:	440b      	add	r3, r1
 80009c6:	761a      	strb	r2, [r3, #24]
}
 80009c8:	bf00      	nop
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc80      	pop	{r7}
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	e000e100 	.word	0xe000e100
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009dc:	b480      	push	{r7}
 80009de:	b089      	sub	sp, #36	; 0x24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	f003 0307 	and.w	r3, r3, #7
 80009ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009f0:	69fb      	ldr	r3, [r7, #28]
 80009f2:	f1c3 0307 	rsb	r3, r3, #7
 80009f6:	2b04      	cmp	r3, #4
 80009f8:	bf28      	it	cs
 80009fa:	2304      	movcs	r3, #4
 80009fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009fe:	69fb      	ldr	r3, [r7, #28]
 8000a00:	3304      	adds	r3, #4
 8000a02:	2b06      	cmp	r3, #6
 8000a04:	d902      	bls.n	8000a0c <NVIC_EncodePriority+0x30>
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	3b03      	subs	r3, #3
 8000a0a:	e000      	b.n	8000a0e <NVIC_EncodePriority+0x32>
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a10:	f04f 32ff 	mov.w	r2, #4294967295
 8000a14:	69bb      	ldr	r3, [r7, #24]
 8000a16:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1a:	43da      	mvns	r2, r3
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	401a      	ands	r2, r3
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a24:	f04f 31ff 	mov.w	r1, #4294967295
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a2e:	43d9      	mvns	r1, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a34:	4313      	orrs	r3, r2
         );
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3724      	adds	r7, #36	; 0x24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr

08000a40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a50:	d301      	bcc.n	8000a56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a52:	2301      	movs	r3, #1
 8000a54:	e00f      	b.n	8000a76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a56:	4a0a      	ldr	r2, [pc, #40]	; (8000a80 <SysTick_Config+0x40>)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a5e:	210f      	movs	r1, #15
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	f7ff ff90 	bl	8000988 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a68:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <SysTick_Config+0x40>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a6e:	4b04      	ldr	r3, [pc, #16]	; (8000a80 <SysTick_Config+0x40>)
 8000a70:	2207      	movs	r2, #7
 8000a72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	e000e010 	.word	0xe000e010

08000a84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f7ff ff2d 	bl	80008ec <__NVIC_SetPriorityGrouping>
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b086      	sub	sp, #24
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	60b9      	str	r1, [r7, #8]
 8000aa4:	607a      	str	r2, [r7, #4]
 8000aa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000aac:	f7ff ff42 	bl	8000934 <__NVIC_GetPriorityGrouping>
 8000ab0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	68b9      	ldr	r1, [r7, #8]
 8000ab6:	6978      	ldr	r0, [r7, #20]
 8000ab8:	f7ff ff90 	bl	80009dc <NVIC_EncodePriority>
 8000abc:	4602      	mov	r2, r0
 8000abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ac2:	4611      	mov	r1, r2
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff ff5f 	bl	8000988 <__NVIC_SetPriority>
}
 8000aca:	bf00      	nop
 8000acc:	3718      	adds	r7, #24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b082      	sub	sp, #8
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	4603      	mov	r3, r0
 8000ada:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff ff35 	bl	8000950 <__NVIC_EnableIRQ>
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b082      	sub	sp, #8
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f7ff ffa2 	bl	8000a40 <SysTick_Config>
 8000afc:	4603      	mov	r3, r0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b082      	sub	sp, #8
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d101      	bne.n	8000b18 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000b14:	2301      	movs	r3, #1
 8000b16:	e00e      	b.n	8000b36 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	795b      	ldrb	r3, [r3, #5]
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d105      	bne.n	8000b2e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2200      	movs	r2, #0
 8000b26:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f7ff fddb 	bl	80006e4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2201      	movs	r2, #1
 8000b32:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
	...

08000b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b08b      	sub	sp, #44	; 0x2c
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b52:	e169      	b.n	8000e28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b54:	2201      	movs	r2, #1
 8000b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b58:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	69fa      	ldr	r2, [r7, #28]
 8000b64:	4013      	ands	r3, r2
 8000b66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b68:	69ba      	ldr	r2, [r7, #24]
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	f040 8158 	bne.w	8000e22 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	4a9a      	ldr	r2, [pc, #616]	; (8000de0 <HAL_GPIO_Init+0x2a0>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d05e      	beq.n	8000c3a <HAL_GPIO_Init+0xfa>
 8000b7c:	4a98      	ldr	r2, [pc, #608]	; (8000de0 <HAL_GPIO_Init+0x2a0>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d875      	bhi.n	8000c6e <HAL_GPIO_Init+0x12e>
 8000b82:	4a98      	ldr	r2, [pc, #608]	; (8000de4 <HAL_GPIO_Init+0x2a4>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d058      	beq.n	8000c3a <HAL_GPIO_Init+0xfa>
 8000b88:	4a96      	ldr	r2, [pc, #600]	; (8000de4 <HAL_GPIO_Init+0x2a4>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d86f      	bhi.n	8000c6e <HAL_GPIO_Init+0x12e>
 8000b8e:	4a96      	ldr	r2, [pc, #600]	; (8000de8 <HAL_GPIO_Init+0x2a8>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d052      	beq.n	8000c3a <HAL_GPIO_Init+0xfa>
 8000b94:	4a94      	ldr	r2, [pc, #592]	; (8000de8 <HAL_GPIO_Init+0x2a8>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d869      	bhi.n	8000c6e <HAL_GPIO_Init+0x12e>
 8000b9a:	4a94      	ldr	r2, [pc, #592]	; (8000dec <HAL_GPIO_Init+0x2ac>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d04c      	beq.n	8000c3a <HAL_GPIO_Init+0xfa>
 8000ba0:	4a92      	ldr	r2, [pc, #584]	; (8000dec <HAL_GPIO_Init+0x2ac>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d863      	bhi.n	8000c6e <HAL_GPIO_Init+0x12e>
 8000ba6:	4a92      	ldr	r2, [pc, #584]	; (8000df0 <HAL_GPIO_Init+0x2b0>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d046      	beq.n	8000c3a <HAL_GPIO_Init+0xfa>
 8000bac:	4a90      	ldr	r2, [pc, #576]	; (8000df0 <HAL_GPIO_Init+0x2b0>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d85d      	bhi.n	8000c6e <HAL_GPIO_Init+0x12e>
 8000bb2:	2b12      	cmp	r3, #18
 8000bb4:	d82a      	bhi.n	8000c0c <HAL_GPIO_Init+0xcc>
 8000bb6:	2b12      	cmp	r3, #18
 8000bb8:	d859      	bhi.n	8000c6e <HAL_GPIO_Init+0x12e>
 8000bba:	a201      	add	r2, pc, #4	; (adr r2, 8000bc0 <HAL_GPIO_Init+0x80>)
 8000bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bc0:	08000c3b 	.word	0x08000c3b
 8000bc4:	08000c15 	.word	0x08000c15
 8000bc8:	08000c27 	.word	0x08000c27
 8000bcc:	08000c69 	.word	0x08000c69
 8000bd0:	08000c6f 	.word	0x08000c6f
 8000bd4:	08000c6f 	.word	0x08000c6f
 8000bd8:	08000c6f 	.word	0x08000c6f
 8000bdc:	08000c6f 	.word	0x08000c6f
 8000be0:	08000c6f 	.word	0x08000c6f
 8000be4:	08000c6f 	.word	0x08000c6f
 8000be8:	08000c6f 	.word	0x08000c6f
 8000bec:	08000c6f 	.word	0x08000c6f
 8000bf0:	08000c6f 	.word	0x08000c6f
 8000bf4:	08000c6f 	.word	0x08000c6f
 8000bf8:	08000c6f 	.word	0x08000c6f
 8000bfc:	08000c6f 	.word	0x08000c6f
 8000c00:	08000c6f 	.word	0x08000c6f
 8000c04:	08000c1d 	.word	0x08000c1d
 8000c08:	08000c31 	.word	0x08000c31
 8000c0c:	4a79      	ldr	r2, [pc, #484]	; (8000df4 <HAL_GPIO_Init+0x2b4>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d013      	beq.n	8000c3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c12:	e02c      	b.n	8000c6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	623b      	str	r3, [r7, #32]
          break;
 8000c1a:	e029      	b.n	8000c70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	3304      	adds	r3, #4
 8000c22:	623b      	str	r3, [r7, #32]
          break;
 8000c24:	e024      	b.n	8000c70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	68db      	ldr	r3, [r3, #12]
 8000c2a:	3308      	adds	r3, #8
 8000c2c:	623b      	str	r3, [r7, #32]
          break;
 8000c2e:	e01f      	b.n	8000c70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	330c      	adds	r3, #12
 8000c36:	623b      	str	r3, [r7, #32]
          break;
 8000c38:	e01a      	b.n	8000c70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d102      	bne.n	8000c48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c42:	2304      	movs	r3, #4
 8000c44:	623b      	str	r3, [r7, #32]
          break;
 8000c46:	e013      	b.n	8000c70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	689b      	ldr	r3, [r3, #8]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d105      	bne.n	8000c5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c50:	2308      	movs	r3, #8
 8000c52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	69fa      	ldr	r2, [r7, #28]
 8000c58:	611a      	str	r2, [r3, #16]
          break;
 8000c5a:	e009      	b.n	8000c70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c5c:	2308      	movs	r3, #8
 8000c5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	69fa      	ldr	r2, [r7, #28]
 8000c64:	615a      	str	r2, [r3, #20]
          break;
 8000c66:	e003      	b.n	8000c70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	623b      	str	r3, [r7, #32]
          break;
 8000c6c:	e000      	b.n	8000c70 <HAL_GPIO_Init+0x130>
          break;
 8000c6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c70:	69bb      	ldr	r3, [r7, #24]
 8000c72:	2bff      	cmp	r3, #255	; 0xff
 8000c74:	d801      	bhi.n	8000c7a <HAL_GPIO_Init+0x13a>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	e001      	b.n	8000c7e <HAL_GPIO_Init+0x13e>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	3304      	adds	r3, #4
 8000c7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	2bff      	cmp	r3, #255	; 0xff
 8000c84:	d802      	bhi.n	8000c8c <HAL_GPIO_Init+0x14c>
 8000c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	e002      	b.n	8000c92 <HAL_GPIO_Init+0x152>
 8000c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8e:	3b08      	subs	r3, #8
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	210f      	movs	r1, #15
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	6a39      	ldr	r1, [r7, #32]
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cac:	431a      	orrs	r2, r3
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	f000 80b1 	beq.w	8000e22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cc0:	4b4d      	ldr	r3, [pc, #308]	; (8000df8 <HAL_GPIO_Init+0x2b8>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	4a4c      	ldr	r2, [pc, #304]	; (8000df8 <HAL_GPIO_Init+0x2b8>)
 8000cc6:	f043 0301 	orr.w	r3, r3, #1
 8000cca:	6193      	str	r3, [r2, #24]
 8000ccc:	4b4a      	ldr	r3, [pc, #296]	; (8000df8 <HAL_GPIO_Init+0x2b8>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	f003 0301 	and.w	r3, r3, #1
 8000cd4:	60bb      	str	r3, [r7, #8]
 8000cd6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cd8:	4a48      	ldr	r2, [pc, #288]	; (8000dfc <HAL_GPIO_Init+0x2bc>)
 8000cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cdc:	089b      	lsrs	r3, r3, #2
 8000cde:	3302      	adds	r3, #2
 8000ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ce4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce8:	f003 0303 	and.w	r3, r3, #3
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	220f      	movs	r2, #15
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4a40      	ldr	r2, [pc, #256]	; (8000e00 <HAL_GPIO_Init+0x2c0>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d013      	beq.n	8000d2c <HAL_GPIO_Init+0x1ec>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4a3f      	ldr	r2, [pc, #252]	; (8000e04 <HAL_GPIO_Init+0x2c4>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d00d      	beq.n	8000d28 <HAL_GPIO_Init+0x1e8>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4a3e      	ldr	r2, [pc, #248]	; (8000e08 <HAL_GPIO_Init+0x2c8>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d007      	beq.n	8000d24 <HAL_GPIO_Init+0x1e4>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4a3d      	ldr	r2, [pc, #244]	; (8000e0c <HAL_GPIO_Init+0x2cc>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d101      	bne.n	8000d20 <HAL_GPIO_Init+0x1e0>
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	e006      	b.n	8000d2e <HAL_GPIO_Init+0x1ee>
 8000d20:	2304      	movs	r3, #4
 8000d22:	e004      	b.n	8000d2e <HAL_GPIO_Init+0x1ee>
 8000d24:	2302      	movs	r3, #2
 8000d26:	e002      	b.n	8000d2e <HAL_GPIO_Init+0x1ee>
 8000d28:	2301      	movs	r3, #1
 8000d2a:	e000      	b.n	8000d2e <HAL_GPIO_Init+0x1ee>
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d30:	f002 0203 	and.w	r2, r2, #3
 8000d34:	0092      	lsls	r2, r2, #2
 8000d36:	4093      	lsls	r3, r2
 8000d38:	68fa      	ldr	r2, [r7, #12]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d3e:	492f      	ldr	r1, [pc, #188]	; (8000dfc <HAL_GPIO_Init+0x2bc>)
 8000d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d42:	089b      	lsrs	r3, r3, #2
 8000d44:	3302      	adds	r3, #2
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d006      	beq.n	8000d66 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d58:	4b2d      	ldr	r3, [pc, #180]	; (8000e10 <HAL_GPIO_Init+0x2d0>)
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	492c      	ldr	r1, [pc, #176]	; (8000e10 <HAL_GPIO_Init+0x2d0>)
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	600b      	str	r3, [r1, #0]
 8000d64:	e006      	b.n	8000d74 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d66:	4b2a      	ldr	r3, [pc, #168]	; (8000e10 <HAL_GPIO_Init+0x2d0>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	69bb      	ldr	r3, [r7, #24]
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	4928      	ldr	r1, [pc, #160]	; (8000e10 <HAL_GPIO_Init+0x2d0>)
 8000d70:	4013      	ands	r3, r2
 8000d72:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d006      	beq.n	8000d8e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d80:	4b23      	ldr	r3, [pc, #140]	; (8000e10 <HAL_GPIO_Init+0x2d0>)
 8000d82:	685a      	ldr	r2, [r3, #4]
 8000d84:	4922      	ldr	r1, [pc, #136]	; (8000e10 <HAL_GPIO_Init+0x2d0>)
 8000d86:	69bb      	ldr	r3, [r7, #24]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	604b      	str	r3, [r1, #4]
 8000d8c:	e006      	b.n	8000d9c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d8e:	4b20      	ldr	r3, [pc, #128]	; (8000e10 <HAL_GPIO_Init+0x2d0>)
 8000d90:	685a      	ldr	r2, [r3, #4]
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	43db      	mvns	r3, r3
 8000d96:	491e      	ldr	r1, [pc, #120]	; (8000e10 <HAL_GPIO_Init+0x2d0>)
 8000d98:	4013      	ands	r3, r2
 8000d9a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d006      	beq.n	8000db6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000da8:	4b19      	ldr	r3, [pc, #100]	; (8000e10 <HAL_GPIO_Init+0x2d0>)
 8000daa:	689a      	ldr	r2, [r3, #8]
 8000dac:	4918      	ldr	r1, [pc, #96]	; (8000e10 <HAL_GPIO_Init+0x2d0>)
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	608b      	str	r3, [r1, #8]
 8000db4:	e006      	b.n	8000dc4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000db6:	4b16      	ldr	r3, [pc, #88]	; (8000e10 <HAL_GPIO_Init+0x2d0>)
 8000db8:	689a      	ldr	r2, [r3, #8]
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	4914      	ldr	r1, [pc, #80]	; (8000e10 <HAL_GPIO_Init+0x2d0>)
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d021      	beq.n	8000e14 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000dd0:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <HAL_GPIO_Init+0x2d0>)
 8000dd2:	68da      	ldr	r2, [r3, #12]
 8000dd4:	490e      	ldr	r1, [pc, #56]	; (8000e10 <HAL_GPIO_Init+0x2d0>)
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	60cb      	str	r3, [r1, #12]
 8000ddc:	e021      	b.n	8000e22 <HAL_GPIO_Init+0x2e2>
 8000dde:	bf00      	nop
 8000de0:	10320000 	.word	0x10320000
 8000de4:	10310000 	.word	0x10310000
 8000de8:	10220000 	.word	0x10220000
 8000dec:	10210000 	.word	0x10210000
 8000df0:	10120000 	.word	0x10120000
 8000df4:	10110000 	.word	0x10110000
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	40010000 	.word	0x40010000
 8000e00:	40010800 	.word	0x40010800
 8000e04:	40010c00 	.word	0x40010c00
 8000e08:	40011000 	.word	0x40011000
 8000e0c:	40011400 	.word	0x40011400
 8000e10:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e14:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <HAL_GPIO_Init+0x304>)
 8000e16:	68da      	ldr	r2, [r3, #12]
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	4909      	ldr	r1, [pc, #36]	; (8000e44 <HAL_GPIO_Init+0x304>)
 8000e1e:	4013      	ands	r3, r2
 8000e20:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e24:	3301      	adds	r3, #1
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	f47f ae8e 	bne.w	8000b54 <HAL_GPIO_Init+0x14>
  }
}
 8000e38:	bf00      	nop
 8000e3a:	bf00      	nop
 8000e3c:	372c      	adds	r7, #44	; 0x2c
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr
 8000e44:	40010400 	.word	0x40010400

08000e48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	460b      	mov	r3, r1
 8000e52:	807b      	strh	r3, [r7, #2]
 8000e54:	4613      	mov	r3, r2
 8000e56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e58:	787b      	ldrb	r3, [r7, #1]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d003      	beq.n	8000e66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e5e:	887a      	ldrh	r2, [r7, #2]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e64:	e003      	b.n	8000e6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e66:	887b      	ldrh	r3, [r7, #2]
 8000e68:	041a      	lsls	r2, r3, #16
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	611a      	str	r2, [r3, #16]
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr

08000e78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d101      	bne.n	8000e8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e26c      	b.n	8001364 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	f000 8087 	beq.w	8000fa6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e98:	4b92      	ldr	r3, [pc, #584]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 030c 	and.w	r3, r3, #12
 8000ea0:	2b04      	cmp	r3, #4
 8000ea2:	d00c      	beq.n	8000ebe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ea4:	4b8f      	ldr	r3, [pc, #572]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f003 030c 	and.w	r3, r3, #12
 8000eac:	2b08      	cmp	r3, #8
 8000eae:	d112      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x5e>
 8000eb0:	4b8c      	ldr	r3, [pc, #560]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ebc:	d10b      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ebe:	4b89      	ldr	r3, [pc, #548]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d06c      	beq.n	8000fa4 <HAL_RCC_OscConfig+0x12c>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d168      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e246      	b.n	8001364 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ede:	d106      	bne.n	8000eee <HAL_RCC_OscConfig+0x76>
 8000ee0:	4b80      	ldr	r3, [pc, #512]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a7f      	ldr	r2, [pc, #508]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000ee6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eea:	6013      	str	r3, [r2, #0]
 8000eec:	e02e      	b.n	8000f4c <HAL_RCC_OscConfig+0xd4>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d10c      	bne.n	8000f10 <HAL_RCC_OscConfig+0x98>
 8000ef6:	4b7b      	ldr	r3, [pc, #492]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a7a      	ldr	r2, [pc, #488]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000efc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f00:	6013      	str	r3, [r2, #0]
 8000f02:	4b78      	ldr	r3, [pc, #480]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a77      	ldr	r2, [pc, #476]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f0c:	6013      	str	r3, [r2, #0]
 8000f0e:	e01d      	b.n	8000f4c <HAL_RCC_OscConfig+0xd4>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f18:	d10c      	bne.n	8000f34 <HAL_RCC_OscConfig+0xbc>
 8000f1a:	4b72      	ldr	r3, [pc, #456]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a71      	ldr	r2, [pc, #452]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f24:	6013      	str	r3, [r2, #0]
 8000f26:	4b6f      	ldr	r3, [pc, #444]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a6e      	ldr	r2, [pc, #440]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f30:	6013      	str	r3, [r2, #0]
 8000f32:	e00b      	b.n	8000f4c <HAL_RCC_OscConfig+0xd4>
 8000f34:	4b6b      	ldr	r3, [pc, #428]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a6a      	ldr	r2, [pc, #424]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f3e:	6013      	str	r3, [r2, #0]
 8000f40:	4b68      	ldr	r3, [pc, #416]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a67      	ldr	r2, [pc, #412]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d013      	beq.n	8000f7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f54:	f7ff fcc0 	bl	80008d8 <HAL_GetTick>
 8000f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f5a:	e008      	b.n	8000f6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f5c:	f7ff fcbc 	bl	80008d8 <HAL_GetTick>
 8000f60:	4602      	mov	r2, r0
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	2b64      	cmp	r3, #100	; 0x64
 8000f68:	d901      	bls.n	8000f6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e1fa      	b.n	8001364 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f6e:	4b5d      	ldr	r3, [pc, #372]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d0f0      	beq.n	8000f5c <HAL_RCC_OscConfig+0xe4>
 8000f7a:	e014      	b.n	8000fa6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f7c:	f7ff fcac 	bl	80008d8 <HAL_GetTick>
 8000f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f82:	e008      	b.n	8000f96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f84:	f7ff fca8 	bl	80008d8 <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	2b64      	cmp	r3, #100	; 0x64
 8000f90:	d901      	bls.n	8000f96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f92:	2303      	movs	r3, #3
 8000f94:	e1e6      	b.n	8001364 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f96:	4b53      	ldr	r3, [pc, #332]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d1f0      	bne.n	8000f84 <HAL_RCC_OscConfig+0x10c>
 8000fa2:	e000      	b.n	8000fa6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 0302 	and.w	r3, r3, #2
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d063      	beq.n	800107a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fb2:	4b4c      	ldr	r3, [pc, #304]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f003 030c 	and.w	r3, r3, #12
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d00b      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fbe:	4b49      	ldr	r3, [pc, #292]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f003 030c 	and.w	r3, r3, #12
 8000fc6:	2b08      	cmp	r3, #8
 8000fc8:	d11c      	bne.n	8001004 <HAL_RCC_OscConfig+0x18c>
 8000fca:	4b46      	ldr	r3, [pc, #280]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d116      	bne.n	8001004 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fd6:	4b43      	ldr	r3, [pc, #268]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d005      	beq.n	8000fee <HAL_RCC_OscConfig+0x176>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	691b      	ldr	r3, [r3, #16]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d001      	beq.n	8000fee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e1ba      	b.n	8001364 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fee:	4b3d      	ldr	r3, [pc, #244]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	695b      	ldr	r3, [r3, #20]
 8000ffa:	00db      	lsls	r3, r3, #3
 8000ffc:	4939      	ldr	r1, [pc, #228]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8000ffe:	4313      	orrs	r3, r2
 8001000:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001002:	e03a      	b.n	800107a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	691b      	ldr	r3, [r3, #16]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d020      	beq.n	800104e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800100c:	4b36      	ldr	r3, [pc, #216]	; (80010e8 <HAL_RCC_OscConfig+0x270>)
 800100e:	2201      	movs	r2, #1
 8001010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001012:	f7ff fc61 	bl	80008d8 <HAL_GetTick>
 8001016:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001018:	e008      	b.n	800102c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800101a:	f7ff fc5d 	bl	80008d8 <HAL_GetTick>
 800101e:	4602      	mov	r2, r0
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	2b02      	cmp	r3, #2
 8001026:	d901      	bls.n	800102c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001028:	2303      	movs	r3, #3
 800102a:	e19b      	b.n	8001364 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800102c:	4b2d      	ldr	r3, [pc, #180]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 0302 	and.w	r3, r3, #2
 8001034:	2b00      	cmp	r3, #0
 8001036:	d0f0      	beq.n	800101a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001038:	4b2a      	ldr	r3, [pc, #168]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	695b      	ldr	r3, [r3, #20]
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	4927      	ldr	r1, [pc, #156]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8001048:	4313      	orrs	r3, r2
 800104a:	600b      	str	r3, [r1, #0]
 800104c:	e015      	b.n	800107a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800104e:	4b26      	ldr	r3, [pc, #152]	; (80010e8 <HAL_RCC_OscConfig+0x270>)
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001054:	f7ff fc40 	bl	80008d8 <HAL_GetTick>
 8001058:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800105a:	e008      	b.n	800106e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800105c:	f7ff fc3c 	bl	80008d8 <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	2b02      	cmp	r3, #2
 8001068:	d901      	bls.n	800106e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	e17a      	b.n	8001364 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800106e:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 0302 	and.w	r3, r3, #2
 8001076:	2b00      	cmp	r3, #0
 8001078:	d1f0      	bne.n	800105c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0308 	and.w	r3, r3, #8
 8001082:	2b00      	cmp	r3, #0
 8001084:	d03a      	beq.n	80010fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	699b      	ldr	r3, [r3, #24]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d019      	beq.n	80010c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800108e:	4b17      	ldr	r3, [pc, #92]	; (80010ec <HAL_RCC_OscConfig+0x274>)
 8001090:	2201      	movs	r2, #1
 8001092:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001094:	f7ff fc20 	bl	80008d8 <HAL_GetTick>
 8001098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800109a:	e008      	b.n	80010ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800109c:	f7ff fc1c 	bl	80008d8 <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d901      	bls.n	80010ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	e15a      	b.n	8001364 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ae:	4b0d      	ldr	r3, [pc, #52]	; (80010e4 <HAL_RCC_OscConfig+0x26c>)
 80010b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d0f0      	beq.n	800109c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010ba:	2001      	movs	r0, #1
 80010bc:	f000 faa6 	bl	800160c <RCC_Delay>
 80010c0:	e01c      	b.n	80010fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010c2:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <HAL_RCC_OscConfig+0x274>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010c8:	f7ff fc06 	bl	80008d8 <HAL_GetTick>
 80010cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010ce:	e00f      	b.n	80010f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010d0:	f7ff fc02 	bl	80008d8 <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d908      	bls.n	80010f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e140      	b.n	8001364 <HAL_RCC_OscConfig+0x4ec>
 80010e2:	bf00      	nop
 80010e4:	40021000 	.word	0x40021000
 80010e8:	42420000 	.word	0x42420000
 80010ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010f0:	4b9e      	ldr	r3, [pc, #632]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 80010f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f4:	f003 0302 	and.w	r3, r3, #2
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d1e9      	bne.n	80010d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 0304 	and.w	r3, r3, #4
 8001104:	2b00      	cmp	r3, #0
 8001106:	f000 80a6 	beq.w	8001256 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800110a:	2300      	movs	r3, #0
 800110c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800110e:	4b97      	ldr	r3, [pc, #604]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d10d      	bne.n	8001136 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800111a:	4b94      	ldr	r3, [pc, #592]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 800111c:	69db      	ldr	r3, [r3, #28]
 800111e:	4a93      	ldr	r2, [pc, #588]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 8001120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001124:	61d3      	str	r3, [r2, #28]
 8001126:	4b91      	ldr	r3, [pc, #580]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001132:	2301      	movs	r3, #1
 8001134:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001136:	4b8e      	ldr	r3, [pc, #568]	; (8001370 <HAL_RCC_OscConfig+0x4f8>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800113e:	2b00      	cmp	r3, #0
 8001140:	d118      	bne.n	8001174 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001142:	4b8b      	ldr	r3, [pc, #556]	; (8001370 <HAL_RCC_OscConfig+0x4f8>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a8a      	ldr	r2, [pc, #552]	; (8001370 <HAL_RCC_OscConfig+0x4f8>)
 8001148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800114c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800114e:	f7ff fbc3 	bl	80008d8 <HAL_GetTick>
 8001152:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001154:	e008      	b.n	8001168 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001156:	f7ff fbbf 	bl	80008d8 <HAL_GetTick>
 800115a:	4602      	mov	r2, r0
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	2b64      	cmp	r3, #100	; 0x64
 8001162:	d901      	bls.n	8001168 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001164:	2303      	movs	r3, #3
 8001166:	e0fd      	b.n	8001364 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001168:	4b81      	ldr	r3, [pc, #516]	; (8001370 <HAL_RCC_OscConfig+0x4f8>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001170:	2b00      	cmp	r3, #0
 8001172:	d0f0      	beq.n	8001156 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d106      	bne.n	800118a <HAL_RCC_OscConfig+0x312>
 800117c:	4b7b      	ldr	r3, [pc, #492]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	4a7a      	ldr	r2, [pc, #488]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	6213      	str	r3, [r2, #32]
 8001188:	e02d      	b.n	80011e6 <HAL_RCC_OscConfig+0x36e>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d10c      	bne.n	80011ac <HAL_RCC_OscConfig+0x334>
 8001192:	4b76      	ldr	r3, [pc, #472]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 8001194:	6a1b      	ldr	r3, [r3, #32]
 8001196:	4a75      	ldr	r2, [pc, #468]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 8001198:	f023 0301 	bic.w	r3, r3, #1
 800119c:	6213      	str	r3, [r2, #32]
 800119e:	4b73      	ldr	r3, [pc, #460]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 80011a0:	6a1b      	ldr	r3, [r3, #32]
 80011a2:	4a72      	ldr	r2, [pc, #456]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 80011a4:	f023 0304 	bic.w	r3, r3, #4
 80011a8:	6213      	str	r3, [r2, #32]
 80011aa:	e01c      	b.n	80011e6 <HAL_RCC_OscConfig+0x36e>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	2b05      	cmp	r3, #5
 80011b2:	d10c      	bne.n	80011ce <HAL_RCC_OscConfig+0x356>
 80011b4:	4b6d      	ldr	r3, [pc, #436]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 80011b6:	6a1b      	ldr	r3, [r3, #32]
 80011b8:	4a6c      	ldr	r2, [pc, #432]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 80011ba:	f043 0304 	orr.w	r3, r3, #4
 80011be:	6213      	str	r3, [r2, #32]
 80011c0:	4b6a      	ldr	r3, [pc, #424]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 80011c2:	6a1b      	ldr	r3, [r3, #32]
 80011c4:	4a69      	ldr	r2, [pc, #420]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	6213      	str	r3, [r2, #32]
 80011cc:	e00b      	b.n	80011e6 <HAL_RCC_OscConfig+0x36e>
 80011ce:	4b67      	ldr	r3, [pc, #412]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 80011d0:	6a1b      	ldr	r3, [r3, #32]
 80011d2:	4a66      	ldr	r2, [pc, #408]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 80011d4:	f023 0301 	bic.w	r3, r3, #1
 80011d8:	6213      	str	r3, [r2, #32]
 80011da:	4b64      	ldr	r3, [pc, #400]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 80011dc:	6a1b      	ldr	r3, [r3, #32]
 80011de:	4a63      	ldr	r2, [pc, #396]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 80011e0:	f023 0304 	bic.w	r3, r3, #4
 80011e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d015      	beq.n	800121a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ee:	f7ff fb73 	bl	80008d8 <HAL_GetTick>
 80011f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011f4:	e00a      	b.n	800120c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011f6:	f7ff fb6f 	bl	80008d8 <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	f241 3288 	movw	r2, #5000	; 0x1388
 8001204:	4293      	cmp	r3, r2
 8001206:	d901      	bls.n	800120c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e0ab      	b.n	8001364 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800120c:	4b57      	ldr	r3, [pc, #348]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 800120e:	6a1b      	ldr	r3, [r3, #32]
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d0ee      	beq.n	80011f6 <HAL_RCC_OscConfig+0x37e>
 8001218:	e014      	b.n	8001244 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800121a:	f7ff fb5d 	bl	80008d8 <HAL_GetTick>
 800121e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001220:	e00a      	b.n	8001238 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001222:	f7ff fb59 	bl	80008d8 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001230:	4293      	cmp	r3, r2
 8001232:	d901      	bls.n	8001238 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e095      	b.n	8001364 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001238:	4b4c      	ldr	r3, [pc, #304]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 800123a:	6a1b      	ldr	r3, [r3, #32]
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d1ee      	bne.n	8001222 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001244:	7dfb      	ldrb	r3, [r7, #23]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d105      	bne.n	8001256 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800124a:	4b48      	ldr	r3, [pc, #288]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 800124c:	69db      	ldr	r3, [r3, #28]
 800124e:	4a47      	ldr	r2, [pc, #284]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 8001250:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001254:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	2b00      	cmp	r3, #0
 800125c:	f000 8081 	beq.w	8001362 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001260:	4b42      	ldr	r3, [pc, #264]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 030c 	and.w	r3, r3, #12
 8001268:	2b08      	cmp	r3, #8
 800126a:	d061      	beq.n	8001330 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	69db      	ldr	r3, [r3, #28]
 8001270:	2b02      	cmp	r3, #2
 8001272:	d146      	bne.n	8001302 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001274:	4b3f      	ldr	r3, [pc, #252]	; (8001374 <HAL_RCC_OscConfig+0x4fc>)
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127a:	f7ff fb2d 	bl	80008d8 <HAL_GetTick>
 800127e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001280:	e008      	b.n	8001294 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001282:	f7ff fb29 	bl	80008d8 <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d901      	bls.n	8001294 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e067      	b.n	8001364 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001294:	4b35      	ldr	r3, [pc, #212]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d1f0      	bne.n	8001282 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a1b      	ldr	r3, [r3, #32]
 80012a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012a8:	d108      	bne.n	80012bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012aa:	4b30      	ldr	r3, [pc, #192]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	492d      	ldr	r1, [pc, #180]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 80012b8:	4313      	orrs	r3, r2
 80012ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012bc:	4b2b      	ldr	r3, [pc, #172]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a19      	ldr	r1, [r3, #32]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012cc:	430b      	orrs	r3, r1
 80012ce:	4927      	ldr	r1, [pc, #156]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 80012d0:	4313      	orrs	r3, r2
 80012d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012d4:	4b27      	ldr	r3, [pc, #156]	; (8001374 <HAL_RCC_OscConfig+0x4fc>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012da:	f7ff fafd 	bl	80008d8 <HAL_GetTick>
 80012de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012e0:	e008      	b.n	80012f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012e2:	f7ff faf9 	bl	80008d8 <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e037      	b.n	8001364 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012f4:	4b1d      	ldr	r3, [pc, #116]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d0f0      	beq.n	80012e2 <HAL_RCC_OscConfig+0x46a>
 8001300:	e02f      	b.n	8001362 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001302:	4b1c      	ldr	r3, [pc, #112]	; (8001374 <HAL_RCC_OscConfig+0x4fc>)
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001308:	f7ff fae6 	bl	80008d8 <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001310:	f7ff fae2 	bl	80008d8 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e020      	b.n	8001364 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001322:	4b12      	ldr	r3, [pc, #72]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1f0      	bne.n	8001310 <HAL_RCC_OscConfig+0x498>
 800132e:	e018      	b.n	8001362 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	69db      	ldr	r3, [r3, #28]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d101      	bne.n	800133c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e013      	b.n	8001364 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800133c:	4b0b      	ldr	r3, [pc, #44]	; (800136c <HAL_RCC_OscConfig+0x4f4>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a1b      	ldr	r3, [r3, #32]
 800134c:	429a      	cmp	r2, r3
 800134e:	d106      	bne.n	800135e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800135a:	429a      	cmp	r2, r3
 800135c:	d001      	beq.n	8001362 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e000      	b.n	8001364 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001362:	2300      	movs	r3, #0
}
 8001364:	4618      	mov	r0, r3
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40021000 	.word	0x40021000
 8001370:	40007000 	.word	0x40007000
 8001374:	42420060 	.word	0x42420060

08001378 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d101      	bne.n	800138c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e0d0      	b.n	800152e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800138c:	4b6a      	ldr	r3, [pc, #424]	; (8001538 <HAL_RCC_ClockConfig+0x1c0>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0307 	and.w	r3, r3, #7
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	429a      	cmp	r2, r3
 8001398:	d910      	bls.n	80013bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800139a:	4b67      	ldr	r3, [pc, #412]	; (8001538 <HAL_RCC_ClockConfig+0x1c0>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f023 0207 	bic.w	r2, r3, #7
 80013a2:	4965      	ldr	r1, [pc, #404]	; (8001538 <HAL_RCC_ClockConfig+0x1c0>)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013aa:	4b63      	ldr	r3, [pc, #396]	; (8001538 <HAL_RCC_ClockConfig+0x1c0>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d001      	beq.n	80013bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e0b8      	b.n	800152e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d020      	beq.n	800140a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d005      	beq.n	80013e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013d4:	4b59      	ldr	r3, [pc, #356]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	4a58      	ldr	r2, [pc, #352]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 80013da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80013de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0308 	and.w	r3, r3, #8
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d005      	beq.n	80013f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013ec:	4b53      	ldr	r3, [pc, #332]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	4a52      	ldr	r2, [pc, #328]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 80013f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80013f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013f8:	4b50      	ldr	r3, [pc, #320]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	494d      	ldr	r1, [pc, #308]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 8001406:	4313      	orrs	r3, r2
 8001408:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	2b00      	cmp	r3, #0
 8001414:	d040      	beq.n	8001498 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d107      	bne.n	800142e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141e:	4b47      	ldr	r3, [pc, #284]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d115      	bne.n	8001456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e07f      	b.n	800152e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2b02      	cmp	r3, #2
 8001434:	d107      	bne.n	8001446 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001436:	4b41      	ldr	r3, [pc, #260]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d109      	bne.n	8001456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e073      	b.n	800152e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001446:	4b3d      	ldr	r3, [pc, #244]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d101      	bne.n	8001456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e06b      	b.n	800152e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001456:	4b39      	ldr	r3, [pc, #228]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f023 0203 	bic.w	r2, r3, #3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	4936      	ldr	r1, [pc, #216]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 8001464:	4313      	orrs	r3, r2
 8001466:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001468:	f7ff fa36 	bl	80008d8 <HAL_GetTick>
 800146c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800146e:	e00a      	b.n	8001486 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001470:	f7ff fa32 	bl	80008d8 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	f241 3288 	movw	r2, #5000	; 0x1388
 800147e:	4293      	cmp	r3, r2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e053      	b.n	800152e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001486:	4b2d      	ldr	r3, [pc, #180]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f003 020c 	and.w	r2, r3, #12
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	429a      	cmp	r2, r3
 8001496:	d1eb      	bne.n	8001470 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001498:	4b27      	ldr	r3, [pc, #156]	; (8001538 <HAL_RCC_ClockConfig+0x1c0>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0307 	and.w	r3, r3, #7
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d210      	bcs.n	80014c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014a6:	4b24      	ldr	r3, [pc, #144]	; (8001538 <HAL_RCC_ClockConfig+0x1c0>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f023 0207 	bic.w	r2, r3, #7
 80014ae:	4922      	ldr	r1, [pc, #136]	; (8001538 <HAL_RCC_ClockConfig+0x1c0>)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014b6:	4b20      	ldr	r3, [pc, #128]	; (8001538 <HAL_RCC_ClockConfig+0x1c0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d001      	beq.n	80014c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e032      	b.n	800152e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0304 	and.w	r3, r3, #4
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d008      	beq.n	80014e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014d4:	4b19      	ldr	r3, [pc, #100]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	4916      	ldr	r1, [pc, #88]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 80014e2:	4313      	orrs	r3, r2
 80014e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0308 	and.w	r3, r3, #8
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d009      	beq.n	8001506 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014f2:	4b12      	ldr	r3, [pc, #72]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	490e      	ldr	r1, [pc, #56]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 8001502:	4313      	orrs	r3, r2
 8001504:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001506:	f000 f821 	bl	800154c <HAL_RCC_GetSysClockFreq>
 800150a:	4602      	mov	r2, r0
 800150c:	4b0b      	ldr	r3, [pc, #44]	; (800153c <HAL_RCC_ClockConfig+0x1c4>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	091b      	lsrs	r3, r3, #4
 8001512:	f003 030f 	and.w	r3, r3, #15
 8001516:	490a      	ldr	r1, [pc, #40]	; (8001540 <HAL_RCC_ClockConfig+0x1c8>)
 8001518:	5ccb      	ldrb	r3, [r1, r3]
 800151a:	fa22 f303 	lsr.w	r3, r2, r3
 800151e:	4a09      	ldr	r2, [pc, #36]	; (8001544 <HAL_RCC_ClockConfig+0x1cc>)
 8001520:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001522:	4b09      	ldr	r3, [pc, #36]	; (8001548 <HAL_RCC_ClockConfig+0x1d0>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff f994 	bl	8000854 <HAL_InitTick>

  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40022000 	.word	0x40022000
 800153c:	40021000 	.word	0x40021000
 8001540:	08003748 	.word	0x08003748
 8001544:	20000020 	.word	0x20000020
 8001548:	20000024 	.word	0x20000024

0800154c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800154c:	b490      	push	{r4, r7}
 800154e:	b08a      	sub	sp, #40	; 0x28
 8001550:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001552:	4b2a      	ldr	r3, [pc, #168]	; (80015fc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001554:	1d3c      	adds	r4, r7, #4
 8001556:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001558:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800155c:	f240 2301 	movw	r3, #513	; 0x201
 8001560:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]
 8001566:	2300      	movs	r3, #0
 8001568:	61bb      	str	r3, [r7, #24]
 800156a:	2300      	movs	r3, #0
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001572:	2300      	movs	r3, #0
 8001574:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001576:	4b22      	ldr	r3, [pc, #136]	; (8001600 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	f003 030c 	and.w	r3, r3, #12
 8001582:	2b04      	cmp	r3, #4
 8001584:	d002      	beq.n	800158c <HAL_RCC_GetSysClockFreq+0x40>
 8001586:	2b08      	cmp	r3, #8
 8001588:	d003      	beq.n	8001592 <HAL_RCC_GetSysClockFreq+0x46>
 800158a:	e02d      	b.n	80015e8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800158c:	4b1d      	ldr	r3, [pc, #116]	; (8001604 <HAL_RCC_GetSysClockFreq+0xb8>)
 800158e:	623b      	str	r3, [r7, #32]
      break;
 8001590:	e02d      	b.n	80015ee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	0c9b      	lsrs	r3, r3, #18
 8001596:	f003 030f 	and.w	r3, r3, #15
 800159a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800159e:	4413      	add	r3, r2
 80015a0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80015a4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d013      	beq.n	80015d8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015b0:	4b13      	ldr	r3, [pc, #76]	; (8001600 <HAL_RCC_GetSysClockFreq+0xb4>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	0c5b      	lsrs	r3, r3, #17
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015be:	4413      	add	r3, r2
 80015c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80015c4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	4a0e      	ldr	r2, [pc, #56]	; (8001604 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015ca:	fb02 f203 	mul.w	r2, r2, r3
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
 80015d6:	e004      	b.n	80015e2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	4a0b      	ldr	r2, [pc, #44]	; (8001608 <HAL_RCC_GetSysClockFreq+0xbc>)
 80015dc:	fb02 f303 	mul.w	r3, r2, r3
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	623b      	str	r3, [r7, #32]
      break;
 80015e6:	e002      	b.n	80015ee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015ea:	623b      	str	r3, [r7, #32]
      break;
 80015ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015ee:	6a3b      	ldr	r3, [r7, #32]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3728      	adds	r7, #40	; 0x28
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc90      	pop	{r4, r7}
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	08003724 	.word	0x08003724
 8001600:	40021000 	.word	0x40021000
 8001604:	007a1200 	.word	0x007a1200
 8001608:	003d0900 	.word	0x003d0900

0800160c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001614:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <RCC_Delay+0x34>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a0a      	ldr	r2, [pc, #40]	; (8001644 <RCC_Delay+0x38>)
 800161a:	fba2 2303 	umull	r2, r3, r2, r3
 800161e:	0a5b      	lsrs	r3, r3, #9
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	fb02 f303 	mul.w	r3, r2, r3
 8001626:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001628:	bf00      	nop
  }
  while (Delay --);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	1e5a      	subs	r2, r3, #1
 800162e:	60fa      	str	r2, [r7, #12]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1f9      	bne.n	8001628 <RCC_Delay+0x1c>
}
 8001634:	bf00      	nop
 8001636:	bf00      	nop
 8001638:	3714      	adds	r7, #20
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr
 8001640:	20000020 	.word	0x20000020
 8001644:	10624dd3 	.word	0x10624dd3

08001648 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e041      	b.n	80016de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2b00      	cmp	r3, #0
 8001664:	d106      	bne.n	8001674 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff f856 	bl	8000720 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2202      	movs	r2, #2
 8001678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3304      	adds	r3, #4
 8001684:	4619      	mov	r1, r3
 8001686:	4610      	mov	r0, r2
 8001688:	f000 fa26 	bl	8001ad8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2201      	movs	r2, #1
 8001690:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2201      	movs	r2, #1
 8001698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2201      	movs	r2, #1
 80016a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2201      	movs	r2, #1
 80016a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2201      	movs	r2, #1
 80016b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2201      	movs	r2, #1
 80016c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2201      	movs	r2, #1
 80016c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2201      	movs	r2, #1
 80016d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2201      	movs	r2, #1
 80016d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	691b      	ldr	r3, [r3, #16]
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d122      	bne.n	8001742 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b02      	cmp	r3, #2
 8001708:	d11b      	bne.n	8001742 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f06f 0202 	mvn.w	r2, #2
 8001712:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2201      	movs	r2, #1
 8001718:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	f003 0303 	and.w	r3, r3, #3
 8001724:	2b00      	cmp	r3, #0
 8001726:	d003      	beq.n	8001730 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f000 f9ba 	bl	8001aa2 <HAL_TIM_IC_CaptureCallback>
 800172e:	e005      	b.n	800173c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f000 f9ad 	bl	8001a90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f000 f9bc 	bl	8001ab4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	691b      	ldr	r3, [r3, #16]
 8001748:	f003 0304 	and.w	r3, r3, #4
 800174c:	2b04      	cmp	r3, #4
 800174e:	d122      	bne.n	8001796 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	f003 0304 	and.w	r3, r3, #4
 800175a:	2b04      	cmp	r3, #4
 800175c:	d11b      	bne.n	8001796 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f06f 0204 	mvn.w	r2, #4
 8001766:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2202      	movs	r2, #2
 800176c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001778:	2b00      	cmp	r3, #0
 800177a:	d003      	beq.n	8001784 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f000 f990 	bl	8001aa2 <HAL_TIM_IC_CaptureCallback>
 8001782:	e005      	b.n	8001790 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f000 f983 	bl	8001a90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 f992 	bl	8001ab4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	691b      	ldr	r3, [r3, #16]
 800179c:	f003 0308 	and.w	r3, r3, #8
 80017a0:	2b08      	cmp	r3, #8
 80017a2:	d122      	bne.n	80017ea <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	f003 0308 	and.w	r3, r3, #8
 80017ae:	2b08      	cmp	r3, #8
 80017b0:	d11b      	bne.n	80017ea <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f06f 0208 	mvn.w	r2, #8
 80017ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2204      	movs	r2, #4
 80017c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	69db      	ldr	r3, [r3, #28]
 80017c8:	f003 0303 	and.w	r3, r3, #3
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d003      	beq.n	80017d8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f000 f966 	bl	8001aa2 <HAL_TIM_IC_CaptureCallback>
 80017d6:	e005      	b.n	80017e4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f000 f959 	bl	8001a90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 f968 	bl	8001ab4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	691b      	ldr	r3, [r3, #16]
 80017f0:	f003 0310 	and.w	r3, r3, #16
 80017f4:	2b10      	cmp	r3, #16
 80017f6:	d122      	bne.n	800183e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	f003 0310 	and.w	r3, r3, #16
 8001802:	2b10      	cmp	r3, #16
 8001804:	d11b      	bne.n	800183e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f06f 0210 	mvn.w	r2, #16
 800180e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2208      	movs	r2, #8
 8001814:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	69db      	ldr	r3, [r3, #28]
 800181c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f000 f93c 	bl	8001aa2 <HAL_TIM_IC_CaptureCallback>
 800182a:	e005      	b.n	8001838 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f000 f92f 	bl	8001a90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f000 f93e 	bl	8001ab4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	f003 0301 	and.w	r3, r3, #1
 8001848:	2b01      	cmp	r3, #1
 800184a:	d10e      	bne.n	800186a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	2b01      	cmp	r3, #1
 8001858:	d107      	bne.n	800186a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f06f 0201 	mvn.w	r2, #1
 8001862:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f000 f90a 	bl	8001a7e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	691b      	ldr	r3, [r3, #16]
 8001870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001874:	2b80      	cmp	r3, #128	; 0x80
 8001876:	d10e      	bne.n	8001896 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001882:	2b80      	cmp	r3, #128	; 0x80
 8001884:	d107      	bne.n	8001896 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800188e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f000 fa80 	bl	8001d96 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018a0:	2b40      	cmp	r3, #64	; 0x40
 80018a2:	d10e      	bne.n	80018c2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ae:	2b40      	cmp	r3, #64	; 0x40
 80018b0:	d107      	bne.n	80018c2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80018ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f000 f902 	bl	8001ac6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	f003 0320 	and.w	r3, r3, #32
 80018cc:	2b20      	cmp	r3, #32
 80018ce:	d10e      	bne.n	80018ee <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	f003 0320 	and.w	r3, r3, #32
 80018da:	2b20      	cmp	r3, #32
 80018dc:	d107      	bne.n	80018ee <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f06f 0220 	mvn.w	r2, #32
 80018e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f000 fa4b 	bl	8001d84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b084      	sub	sp, #16
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
 80018fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001906:	2b01      	cmp	r3, #1
 8001908:	d101      	bne.n	800190e <HAL_TIM_ConfigClockSource+0x18>
 800190a:	2302      	movs	r3, #2
 800190c:	e0b3      	b.n	8001a76 <HAL_TIM_ConfigClockSource+0x180>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2201      	movs	r2, #1
 8001912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2202      	movs	r2, #2
 800191a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800192c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001934:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001946:	d03e      	beq.n	80019c6 <HAL_TIM_ConfigClockSource+0xd0>
 8001948:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800194c:	f200 8087 	bhi.w	8001a5e <HAL_TIM_ConfigClockSource+0x168>
 8001950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001954:	f000 8085 	beq.w	8001a62 <HAL_TIM_ConfigClockSource+0x16c>
 8001958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800195c:	d87f      	bhi.n	8001a5e <HAL_TIM_ConfigClockSource+0x168>
 800195e:	2b70      	cmp	r3, #112	; 0x70
 8001960:	d01a      	beq.n	8001998 <HAL_TIM_ConfigClockSource+0xa2>
 8001962:	2b70      	cmp	r3, #112	; 0x70
 8001964:	d87b      	bhi.n	8001a5e <HAL_TIM_ConfigClockSource+0x168>
 8001966:	2b60      	cmp	r3, #96	; 0x60
 8001968:	d050      	beq.n	8001a0c <HAL_TIM_ConfigClockSource+0x116>
 800196a:	2b60      	cmp	r3, #96	; 0x60
 800196c:	d877      	bhi.n	8001a5e <HAL_TIM_ConfigClockSource+0x168>
 800196e:	2b50      	cmp	r3, #80	; 0x50
 8001970:	d03c      	beq.n	80019ec <HAL_TIM_ConfigClockSource+0xf6>
 8001972:	2b50      	cmp	r3, #80	; 0x50
 8001974:	d873      	bhi.n	8001a5e <HAL_TIM_ConfigClockSource+0x168>
 8001976:	2b40      	cmp	r3, #64	; 0x40
 8001978:	d058      	beq.n	8001a2c <HAL_TIM_ConfigClockSource+0x136>
 800197a:	2b40      	cmp	r3, #64	; 0x40
 800197c:	d86f      	bhi.n	8001a5e <HAL_TIM_ConfigClockSource+0x168>
 800197e:	2b30      	cmp	r3, #48	; 0x30
 8001980:	d064      	beq.n	8001a4c <HAL_TIM_ConfigClockSource+0x156>
 8001982:	2b30      	cmp	r3, #48	; 0x30
 8001984:	d86b      	bhi.n	8001a5e <HAL_TIM_ConfigClockSource+0x168>
 8001986:	2b20      	cmp	r3, #32
 8001988:	d060      	beq.n	8001a4c <HAL_TIM_ConfigClockSource+0x156>
 800198a:	2b20      	cmp	r3, #32
 800198c:	d867      	bhi.n	8001a5e <HAL_TIM_ConfigClockSource+0x168>
 800198e:	2b00      	cmp	r3, #0
 8001990:	d05c      	beq.n	8001a4c <HAL_TIM_ConfigClockSource+0x156>
 8001992:	2b10      	cmp	r3, #16
 8001994:	d05a      	beq.n	8001a4c <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001996:	e062      	b.n	8001a5e <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6818      	ldr	r0, [r3, #0]
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	6899      	ldr	r1, [r3, #8]
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685a      	ldr	r2, [r3, #4]
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	f000 f96f 	bl	8001c8a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80019ba:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	68fa      	ldr	r2, [r7, #12]
 80019c2:	609a      	str	r2, [r3, #8]
      break;
 80019c4:	e04e      	b.n	8001a64 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6818      	ldr	r0, [r3, #0]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	6899      	ldr	r1, [r3, #8]
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685a      	ldr	r2, [r3, #4]
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	f000 f958 	bl	8001c8a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019e8:	609a      	str	r2, [r3, #8]
      break;
 80019ea:	e03b      	b.n	8001a64 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6818      	ldr	r0, [r3, #0]
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	6859      	ldr	r1, [r3, #4]
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	461a      	mov	r2, r3
 80019fa:	f000 f8cf 	bl	8001b9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2150      	movs	r1, #80	; 0x50
 8001a04:	4618      	mov	r0, r3
 8001a06:	f000 f926 	bl	8001c56 <TIM_ITRx_SetConfig>
      break;
 8001a0a:	e02b      	b.n	8001a64 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6818      	ldr	r0, [r3, #0]
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	6859      	ldr	r1, [r3, #4]
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	f000 f8ed 	bl	8001bf8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2160      	movs	r1, #96	; 0x60
 8001a24:	4618      	mov	r0, r3
 8001a26:	f000 f916 	bl	8001c56 <TIM_ITRx_SetConfig>
      break;
 8001a2a:	e01b      	b.n	8001a64 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6818      	ldr	r0, [r3, #0]
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	6859      	ldr	r1, [r3, #4]
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	f000 f8af 	bl	8001b9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2140      	movs	r1, #64	; 0x40
 8001a44:	4618      	mov	r0, r3
 8001a46:	f000 f906 	bl	8001c56 <TIM_ITRx_SetConfig>
      break;
 8001a4a:	e00b      	b.n	8001a64 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4619      	mov	r1, r3
 8001a56:	4610      	mov	r0, r2
 8001a58:	f000 f8fd 	bl	8001c56 <TIM_ITRx_SetConfig>
        break;
 8001a5c:	e002      	b.n	8001a64 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001a5e:	bf00      	nop
 8001a60:	e000      	b.n	8001a64 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001a62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr

08001a90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc80      	pop	{r7}
 8001aa0:	4770      	bx	lr

08001aa2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	b083      	sub	sp, #12
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr

08001ab4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bc80      	pop	{r7}
 8001ac4:	4770      	bx	lr

08001ac6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b083      	sub	sp, #12
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr

08001ad8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4a29      	ldr	r2, [pc, #164]	; (8001b90 <TIM_Base_SetConfig+0xb8>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d00b      	beq.n	8001b08 <TIM_Base_SetConfig+0x30>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001af6:	d007      	beq.n	8001b08 <TIM_Base_SetConfig+0x30>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a26      	ldr	r2, [pc, #152]	; (8001b94 <TIM_Base_SetConfig+0xbc>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d003      	beq.n	8001b08 <TIM_Base_SetConfig+0x30>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a25      	ldr	r2, [pc, #148]	; (8001b98 <TIM_Base_SetConfig+0xc0>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d108      	bne.n	8001b1a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a1c      	ldr	r2, [pc, #112]	; (8001b90 <TIM_Base_SetConfig+0xb8>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d00b      	beq.n	8001b3a <TIM_Base_SetConfig+0x62>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b28:	d007      	beq.n	8001b3a <TIM_Base_SetConfig+0x62>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a19      	ldr	r2, [pc, #100]	; (8001b94 <TIM_Base_SetConfig+0xbc>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d003      	beq.n	8001b3a <TIM_Base_SetConfig+0x62>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a18      	ldr	r2, [pc, #96]	; (8001b98 <TIM_Base_SetConfig+0xc0>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d108      	bne.n	8001b4c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	68fa      	ldr	r2, [r7, #12]
 8001b5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4a07      	ldr	r2, [pc, #28]	; (8001b90 <TIM_Base_SetConfig+0xb8>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d103      	bne.n	8001b80 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	691a      	ldr	r2, [r3, #16]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	615a      	str	r2, [r3, #20]
}
 8001b86:	bf00      	nop
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr
 8001b90:	40012c00 	.word	0x40012c00
 8001b94:	40000400 	.word	0x40000400
 8001b98:	40000800 	.word	0x40000800

08001b9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b087      	sub	sp, #28
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6a1b      	ldr	r3, [r3, #32]
 8001bac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6a1b      	ldr	r3, [r3, #32]
 8001bb2:	f023 0201 	bic.w	r2, r3, #1
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	011b      	lsls	r3, r3, #4
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	f023 030a 	bic.w	r3, r3, #10
 8001bd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	621a      	str	r2, [r3, #32]
}
 8001bee:	bf00      	nop
 8001bf0:	371c      	adds	r7, #28
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr

08001bf8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b087      	sub	sp, #28
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6a1b      	ldr	r3, [r3, #32]
 8001c08:	f023 0210 	bic.w	r2, r3, #16
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001c22:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	031b      	lsls	r3, r3, #12
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001c34:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	011b      	lsls	r3, r3, #4
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	697a      	ldr	r2, [r7, #20]
 8001c44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	621a      	str	r2, [r3, #32]
}
 8001c4c:	bf00      	nop
 8001c4e:	371c      	adds	r7, #28
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr

08001c56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b085      	sub	sp, #20
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
 8001c5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	f043 0307 	orr.w	r3, r3, #7
 8001c78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	609a      	str	r2, [r3, #8]
}
 8001c80:	bf00      	nop
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc80      	pop	{r7}
 8001c88:	4770      	bx	lr

08001c8a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b087      	sub	sp, #28
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	60f8      	str	r0, [r7, #12]
 8001c92:	60b9      	str	r1, [r7, #8]
 8001c94:	607a      	str	r2, [r7, #4]
 8001c96:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ca4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	021a      	lsls	r2, r3, #8
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	431a      	orrs	r2, r3
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	697a      	ldr	r2, [r7, #20]
 8001cbc:	609a      	str	r2, [r3, #8]
}
 8001cbe:	bf00      	nop
 8001cc0:	371c      	adds	r7, #28
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr

08001cc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d101      	bne.n	8001ce0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001cdc:	2302      	movs	r3, #2
 8001cde:	e046      	b.n	8001d6e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2202      	movs	r2, #2
 8001cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a16      	ldr	r2, [pc, #88]	; (8001d78 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d00e      	beq.n	8001d42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d2c:	d009      	beq.n	8001d42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a12      	ldr	r2, [pc, #72]	; (8001d7c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d004      	beq.n	8001d42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a10      	ldr	r2, [pc, #64]	; (8001d80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d10c      	bne.n	8001d5c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	68ba      	ldr	r2, [r7, #8]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68ba      	ldr	r2, [r7, #8]
 8001d5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bc80      	pop	{r7}
 8001d76:	4770      	bx	lr
 8001d78:	40012c00 	.word	0x40012c00
 8001d7c:	40000400 	.word	0x40000400
 8001d80:	40000800 	.word	0x40000800

08001d84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bc80      	pop	{r7}
 8001d94:	4770      	bx	lr

08001d96 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc80      	pop	{r7}
 8001da6:	4770      	bx	lr

08001da8 <AES_keyschedule_enc_LL>:
 8001da8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001dac:	1092      	asrs	r2, r2, #2
 8001dae:	2a00      	cmp	r2, #0
 8001db0:	b082      	sub	sp, #8
 8001db2:	dd06      	ble.n	8001dc2 <AES_keyschedule_enc_LL+0x1a>
 8001db4:	0095      	lsls	r5, r2, #2
 8001db6:	2300      	movs	r3, #0
 8001db8:	58c4      	ldr	r4, [r0, r3]
 8001dba:	50cc      	str	r4, [r1, r3]
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	42ab      	cmp	r3, r5
 8001dc0:	d1fa      	bne.n	8001db8 <AES_keyschedule_enc_LL+0x10>
 8001dc2:	2a06      	cmp	r2, #6
 8001dc4:	d007      	beq.n	8001dd6 <AES_keyschedule_enc_LL+0x2e>
 8001dc6:	2a08      	cmp	r2, #8
 8001dc8:	d06c      	beq.n	8001ea4 <AES_keyschedule_enc_LL+0xfc>
 8001dca:	2a04      	cmp	r2, #4
 8001dcc:	d03a      	beq.n	8001e44 <AES_keyschedule_enc_LL+0x9c>
 8001dce:	b002      	add	sp, #8
 8001dd0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001dd4:	4770      	bx	lr
 8001dd6:	f8df c18c 	ldr.w	ip, [pc, #396]	; 8001f64 <AES_keyschedule_enc_LL+0x1bc>
 8001dda:	684c      	ldr	r4, [r1, #4]
 8001ddc:	688d      	ldr	r5, [r1, #8]
 8001dde:	68c8      	ldr	r0, [r1, #12]
 8001de0:	680e      	ldr	r6, [r1, #0]
 8001de2:	4b5f      	ldr	r3, [pc, #380]	; (8001f60 <AES_keyschedule_enc_LL+0x1b8>)
 8001de4:	f101 08a8 	add.w	r8, r1, #168	; 0xa8
 8001de8:	e005      	b.n	8001df6 <AES_keyschedule_enc_LL+0x4e>
 8001dea:	690f      	ldr	r7, [r1, #16]
 8001dec:	3118      	adds	r1, #24
 8001dee:	4047      	eors	r7, r0
 8001df0:	407a      	eors	r2, r7
 8001df2:	614a      	str	r2, [r1, #20]
 8001df4:	610f      	str	r7, [r1, #16]
 8001df6:	694a      	ldr	r2, [r1, #20]
 8001df8:	f85c 9f04 	ldr.w	r9, [ip, #4]!
 8001dfc:	fa5f fa82 	uxtb.w	sl, r2
 8001e00:	0e17      	lsrs	r7, r2, #24
 8001e02:	f813 a00a 	ldrb.w	sl, [r3, sl]
 8001e06:	5ddf      	ldrb	r7, [r3, r7]
 8001e08:	f3c2 4b07 	ubfx	fp, r2, #16, #8
 8001e0c:	ea47 270a 	orr.w	r7, r7, sl, lsl #8
 8001e10:	f813 b00b 	ldrb.w	fp, [r3, fp]
 8001e14:	f3c2 2a07 	ubfx	sl, r2, #8, #8
 8001e18:	f813 a00a 	ldrb.w	sl, [r3, sl]
 8001e1c:	ea47 670b 	orr.w	r7, r7, fp, lsl #24
 8001e20:	ea47 470a 	orr.w	r7, r7, sl, lsl #16
 8001e24:	ea86 0609 	eor.w	r6, r6, r9
 8001e28:	407e      	eors	r6, r7
 8001e2a:	4074      	eors	r4, r6
 8001e2c:	4065      	eors	r5, r4
 8001e2e:	4068      	eors	r0, r5
 8001e30:	4541      	cmp	r1, r8
 8001e32:	6248      	str	r0, [r1, #36]	; 0x24
 8001e34:	620d      	str	r5, [r1, #32]
 8001e36:	61cc      	str	r4, [r1, #28]
 8001e38:	618e      	str	r6, [r1, #24]
 8001e3a:	d1d6      	bne.n	8001dea <AES_keyschedule_enc_LL+0x42>
 8001e3c:	b002      	add	sp, #8
 8001e3e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001e42:	4770      	bx	lr
 8001e44:	4608      	mov	r0, r1
 8001e46:	f850 4b90 	ldr.w	r4, [r0], #144
 8001e4a:	4f46      	ldr	r7, [pc, #280]	; (8001f64 <AES_keyschedule_enc_LL+0x1bc>)
 8001e4c:	68ca      	ldr	r2, [r1, #12]
 8001e4e:	684d      	ldr	r5, [r1, #4]
 8001e50:	688e      	ldr	r6, [r1, #8]
 8001e52:	4b43      	ldr	r3, [pc, #268]	; (8001f60 <AES_keyschedule_enc_LL+0x1b8>)
 8001e54:	e000      	b.n	8001e58 <AES_keyschedule_enc_LL+0xb0>
 8001e56:	3110      	adds	r1, #16
 8001e58:	fa5f f882 	uxtb.w	r8, r2
 8001e5c:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8001e60:	f813 9008 	ldrb.w	r9, [r3, r8]
 8001e64:	f813 c00c 	ldrb.w	ip, [r3, ip]
 8001e68:	f3c2 4807 	ubfx	r8, r2, #16, #8
 8001e6c:	f813 a008 	ldrb.w	sl, [r3, r8]
 8001e70:	f3c2 2807 	ubfx	r8, r2, #8, #8
 8001e74:	ea4c 2c09 	orr.w	ip, ip, r9, lsl #8
 8001e78:	f813 9008 	ldrb.w	r9, [r3, r8]
 8001e7c:	f857 8f04 	ldr.w	r8, [r7, #4]!
 8001e80:	ea4c 6c0a 	orr.w	ip, ip, sl, lsl #24
 8001e84:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
 8001e88:	ea84 0408 	eor.w	r4, r4, r8
 8001e8c:	ea84 040c 	eor.w	r4, r4, ip
 8001e90:	4065      	eors	r5, r4
 8001e92:	406e      	eors	r6, r5
 8001e94:	4072      	eors	r2, r6
 8001e96:	4281      	cmp	r1, r0
 8001e98:	61ca      	str	r2, [r1, #28]
 8001e9a:	618e      	str	r6, [r1, #24]
 8001e9c:	614d      	str	r5, [r1, #20]
 8001e9e:	610c      	str	r4, [r1, #16]
 8001ea0:	d1d9      	bne.n	8001e56 <AES_keyschedule_enc_LL+0xae>
 8001ea2:	e794      	b.n	8001dce <AES_keyschedule_enc_LL+0x26>
 8001ea4:	4b2e      	ldr	r3, [pc, #184]	; (8001f60 <AES_keyschedule_enc_LL+0x1b8>)
 8001ea6:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8001f64 <AES_keyschedule_enc_LL+0x1bc>
 8001eaa:	f101 00c0 	add.w	r0, r1, #192	; 0xc0
 8001eae:	68ca      	ldr	r2, [r1, #12]
 8001eb0:	688d      	ldr	r5, [r1, #8]
 8001eb2:	684e      	ldr	r6, [r1, #4]
 8001eb4:	f8d1 c000 	ldr.w	ip, [r1]
 8001eb8:	461c      	mov	r4, r3
 8001eba:	9001      	str	r0, [sp, #4]
 8001ebc:	46c2      	mov	sl, r8
 8001ebe:	e026      	b.n	8001f0e <AES_keyschedule_enc_LL+0x166>
 8001ec0:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8001ec4:	b2d7      	uxtb	r7, r2
 8001ec6:	f814 9008 	ldrb.w	r9, [r4, r8]
 8001eca:	5de7      	ldrb	r7, [r4, r7]
 8001ecc:	f3c2 4807 	ubfx	r8, r2, #16, #8
 8001ed0:	ea47 6709 	orr.w	r7, r7, r9, lsl #24
 8001ed4:	f814 8008 	ldrb.w	r8, [r4, r8]
 8001ed8:	f3c2 2907 	ubfx	r9, r2, #8, #8
 8001edc:	f814 9009 	ldrb.w	r9, [r4, r9]
 8001ee0:	ea47 4808 	orr.w	r8, r7, r8, lsl #16
 8001ee4:	690f      	ldr	r7, [r1, #16]
 8001ee6:	ea48 2909 	orr.w	r9, r8, r9, lsl #8
 8001eea:	ea89 0907 	eor.w	r9, r9, r7
 8001eee:	694f      	ldr	r7, [r1, #20]
 8001ef0:	f8c1 9030 	str.w	r9, [r1, #48]	; 0x30
 8001ef4:	ea89 0807 	eor.w	r8, r9, r7
 8001ef8:	698f      	ldr	r7, [r1, #24]
 8001efa:	f8c1 8034 	str.w	r8, [r1, #52]	; 0x34
 8001efe:	ea88 0b07 	eor.w	fp, r8, r7
 8001f02:	ea8b 0000 	eor.w	r0, fp, r0
 8001f06:	63c8      	str	r0, [r1, #60]	; 0x3c
 8001f08:	f8c1 b038 	str.w	fp, [r1, #56]	; 0x38
 8001f0c:	3120      	adds	r1, #32
 8001f0e:	69c8      	ldr	r0, [r1, #28]
 8001f10:	f85a 9f04 	ldr.w	r9, [sl, #4]!
 8001f14:	fa5f f880 	uxtb.w	r8, r0
 8001f18:	0e07      	lsrs	r7, r0, #24
 8001f1a:	f813 b008 	ldrb.w	fp, [r3, r8]
 8001f1e:	5ddf      	ldrb	r7, [r3, r7]
 8001f20:	f3c0 4807 	ubfx	r8, r0, #16, #8
 8001f24:	f813 8008 	ldrb.w	r8, [r3, r8]
 8001f28:	ea47 270b 	orr.w	r7, r7, fp, lsl #8
 8001f2c:	ea47 6708 	orr.w	r7, r7, r8, lsl #24
 8001f30:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8001f34:	f813 8008 	ldrb.w	r8, [r3, r8]
 8001f38:	ea8c 0c09 	eor.w	ip, ip, r9
 8001f3c:	ea47 4708 	orr.w	r7, r7, r8, lsl #16
 8001f40:	ea8c 0c07 	eor.w	ip, ip, r7
 8001f44:	ea8c 0606 	eor.w	r6, ip, r6
 8001f48:	9f01      	ldr	r7, [sp, #4]
 8001f4a:	4075      	eors	r5, r6
 8001f4c:	406a      	eors	r2, r5
 8001f4e:	42b9      	cmp	r1, r7
 8001f50:	62ca      	str	r2, [r1, #44]	; 0x2c
 8001f52:	628d      	str	r5, [r1, #40]	; 0x28
 8001f54:	624e      	str	r6, [r1, #36]	; 0x24
 8001f56:	f8c1 c020 	str.w	ip, [r1, #32]
 8001f5a:	d1b1      	bne.n	8001ec0 <AES_keyschedule_enc_LL+0x118>
 8001f5c:	e737      	b.n	8001dce <AES_keyschedule_enc_LL+0x26>
 8001f5e:	bf00      	nop
 8001f60:	08003b80 	.word	0x08003b80
 8001f64:	08003754 	.word	0x08003754

08001f68 <AES_keyschedule_enc>:
 8001f68:	ea4f 0ca2 	mov.w	ip, r2, asr #2
 8001f6c:	f1bc 0f00 	cmp.w	ip, #0
 8001f70:	b4f0      	push	{r4, r5, r6, r7}
 8001f72:	dd12      	ble.n	8001f9a <AES_keyschedule_enc+0x32>
 8001f74:	4603      	mov	r3, r0
 8001f76:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8001f7a:	1f0c      	subs	r4, r1, #4
 8001f7c:	785d      	ldrb	r5, [r3, #1]
 8001f7e:	781e      	ldrb	r6, [r3, #0]
 8001f80:	78df      	ldrb	r7, [r3, #3]
 8001f82:	042d      	lsls	r5, r5, #16
 8001f84:	ea45 6506 	orr.w	r5, r5, r6, lsl #24
 8001f88:	789e      	ldrb	r6, [r3, #2]
 8001f8a:	433d      	orrs	r5, r7
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 8001f92:	4563      	cmp	r3, ip
 8001f94:	f844 5f04 	str.w	r5, [r4, #4]!
 8001f98:	d1f0      	bne.n	8001f7c <AES_keyschedule_enc+0x14>
 8001f9a:	4608      	mov	r0, r1
 8001f9c:	bcf0      	pop	{r4, r5, r6, r7}
 8001f9e:	f7ff bf03 	b.w	8001da8 <AES_keyschedule_enc_LL>
 8001fa2:	bf00      	nop

08001fa4 <AES_general_SW_enc>:
 8001fa4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001fa8:	4cc1      	ldr	r4, [pc, #772]	; (80022b0 <AES_general_SW_enc+0x30c>)
 8001faa:	b08a      	sub	sp, #40	; 0x28
 8001fac:	2501      	movs	r5, #1
 8001fae:	2600      	movs	r6, #0
 8001fb0:	9609      	str	r6, [sp, #36]	; 0x24
 8001fb2:	6025      	str	r5, [r4, #0]
 8001fb4:	6825      	ldr	r5, [r4, #0]
 8001fb6:	10db      	asrs	r3, r3, #3
 8001fb8:	9509      	str	r5, [sp, #36]	; 0x24
 8001fba:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8001fbe:	3303      	adds	r3, #3
 8001fc0:	9509      	str	r5, [sp, #36]	; 0x24
 8001fc2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8001fc4:	3c08      	subs	r4, #8
 8001fc6:	3501      	adds	r5, #1
 8001fc8:	9305      	str	r3, [sp, #20]
 8001fca:	9107      	str	r1, [sp, #28]
 8001fcc:	f000 8150 	beq.w	8002270 <AES_general_SW_enc+0x2cc>
 8001fd0:	e890 00a0 	ldmia.w	r0, {r5, r7}
 8001fd4:	6811      	ldr	r1, [r2, #0]
 8001fd6:	6853      	ldr	r3, [r2, #4]
 8001fd8:	404d      	eors	r5, r1
 8001fda:	ea83 0c07 	eor.w	ip, r3, r7
 8001fde:	46aa      	mov	sl, r5
 8001fe0:	462e      	mov	r6, r5
 8001fe2:	4bb4      	ldr	r3, [pc, #720]	; (80022b4 <AES_general_SW_enc+0x310>)
 8001fe4:	4664      	mov	r4, ip
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	e06c      	b.n	80020c4 <AES_general_SW_enc+0x120>
 8001fea:	ea4f 601b 	mov.w	r0, fp, lsr #24
 8001fee:	ea4f 6619 	mov.w	r6, r9, lsr #24
 8001ff2:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8001ff6:	6814      	ldr	r4, [r2, #0]
 8001ff8:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8001ffc:	ea4f 651c 	mov.w	r5, ip, lsr #24
 8002000:	4044      	eors	r4, r0
 8002002:	fa5f f089 	uxtb.w	r0, r9
 8002006:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 800200a:	9606      	str	r6, [sp, #24]
 800200c:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8002010:	6850      	ldr	r0, [r2, #4]
 8002012:	ea84 6436 	eor.w	r4, r4, r6, ror #24
 8002016:	4068      	eors	r0, r5
 8002018:	fa5f f58b 	uxtb.w	r5, fp
 800201c:	f3cc 4607 	ubfx	r6, ip, #16, #8
 8002020:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 8002024:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8002028:	ea4f 6817 	mov.w	r8, r7, lsr #24
 800202c:	ea80 6535 	eor.w	r5, r0, r5, ror #24
 8002030:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 8002034:	ea84 2636 	eor.w	r6, r4, r6, ror #8
 8002038:	fa5f f887 	uxtb.w	r8, r7
 800203c:	fa5f f48c 	uxtb.w	r4, ip
 8002040:	9504      	str	r5, [sp, #16]
 8002042:	f3c7 2007 	ubfx	r0, r7, #8, #8
 8002046:	6895      	ldr	r5, [r2, #8]
 8002048:	f3c7 4707 	ubfx	r7, r7, #16, #8
 800204c:	9603      	str	r6, [sp, #12]
 800204e:	f851 6027 	ldr.w	r6, [r1, r7, lsl #2]
 8002052:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
 8002056:	ea8a 0505 	eor.w	r5, sl, r5
 800205a:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 800205e:	ea85 6537 	eor.w	r5, r5, r7, ror #24
 8002062:	f851 702c 	ldr.w	r7, [r1, ip, lsl #2]
 8002066:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800206a:	9701      	str	r7, [sp, #4]
 800206c:	f3c9 4707 	ubfx	r7, r9, #16, #8
 8002070:	f851 a027 	ldr.w	sl, [r1, r7, lsl #2]
 8002074:	9002      	str	r0, [sp, #8]
 8002076:	68d4      	ldr	r4, [r2, #12]
 8002078:	9806      	ldr	r0, [sp, #24]
 800207a:	9f04      	ldr	r7, [sp, #16]
 800207c:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 8002080:	ea80 0c04 	eor.w	ip, r0, r4
 8002084:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8002088:	ea87 2636 	eor.w	r6, r7, r6, ror #8
 800208c:	f3cb 4707 	ubfx	r7, fp, #16, #8
 8002090:	ea8c 6838 	eor.w	r8, ip, r8, ror #24
 8002094:	f851 c029 	ldr.w	ip, [r1, r9, lsl #2]
 8002098:	f851 9027 	ldr.w	r9, [r1, r7, lsl #2]
 800209c:	9802      	ldr	r0, [sp, #8]
 800209e:	ea88 2839 	eor.w	r8, r8, r9, ror #8
 80020a2:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80020a6:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 80020aa:	f851 702b 	ldr.w	r7, [r1, fp, lsl #2]
 80020ae:	ea89 4430 	eor.w	r4, r9, r0, ror #16
 80020b2:	9801      	ldr	r0, [sp, #4]
 80020b4:	ea85 253a 	eor.w	r5, r5, sl, ror #8
 80020b8:	ea86 463c 	eor.w	r6, r6, ip, ror #16
 80020bc:	ea85 4537 	eor.w	r5, r5, r7, ror #16
 80020c0:	ea88 4a30 	eor.w	sl, r8, r0, ror #16
 80020c4:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80020c8:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 80020cc:	ea4f 6c1a 	mov.w	ip, sl, lsr #24
 80020d0:	9003      	str	r0, [sp, #12]
 80020d2:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 80020d6:	ea4f 6814 	mov.w	r8, r4, lsr #24
 80020da:	f853 b028 	ldr.w	fp, [r3, r8, lsl #2]
 80020de:	9004      	str	r0, [sp, #16]
 80020e0:	fa5f fc8a 	uxtb.w	ip, sl
 80020e4:	6910      	ldr	r0, [r2, #16]
 80020e6:	0e37      	lsrs	r7, r6, #24
 80020e8:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
 80020ec:	ea8b 0b00 	eor.w	fp, fp, r0
 80020f0:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 80020f4:	6950      	ldr	r0, [r2, #20]
 80020f6:	ea8b 683c 	eor.w	r8, fp, ip, ror #24
 80020fa:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 80020fe:	f853 b02c 	ldr.w	fp, [r3, ip, lsl #2]
 8002102:	ea87 0c00 	eor.w	ip, r7, r0
 8002106:	b2e7      	uxtb	r7, r4
 8002108:	9805      	ldr	r0, [sp, #20]
 800210a:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 800210e:	3801      	subs	r0, #1
 8002110:	ea8c 6c37 	eor.w	ip, ip, r7, ror #24
 8002114:	9005      	str	r0, [sp, #20]
 8002116:	6997      	ldr	r7, [r2, #24]
 8002118:	9803      	ldr	r0, [sp, #12]
 800211a:	fa5f f985 	uxtb.w	r9, r5
 800211e:	4047      	eors	r7, r0
 8002120:	b2f0      	uxtb	r0, r6
 8002122:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002126:	f3c6 2607 	ubfx	r6, r6, #8, #8
 800212a:	ea87 6030 	eor.w	r0, r7, r0, ror #24
 800212e:	9006      	str	r0, [sp, #24]
 8002130:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8002134:	69d0      	ldr	r0, [r2, #28]
 8002136:	9f04      	ldr	r7, [sp, #16]
 8002138:	9602      	str	r6, [sp, #8]
 800213a:	ea87 0600 	eor.w	r6, r7, r0
 800213e:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8002142:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002146:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
 800214a:	ea88 2b3b 	eor.w	fp, r8, fp, ror #8
 800214e:	f3ca 4807 	ubfx	r8, sl, #16, #8
 8002152:	ea86 6939 	eor.w	r9, r6, r9, ror #24
 8002156:	ea8c 2c30 	eor.w	ip, ip, r0, ror #8
 800215a:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
 800215e:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8002162:	9e06      	ldr	r6, [sp, #24]
 8002164:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8002168:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 800216c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002170:	ea86 2738 	eor.w	r7, r6, r8, ror #8
 8002174:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8002178:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 800217c:	ea87 4734 	eor.w	r7, r7, r4, ror #16
 8002180:	9c05      	ldr	r4, [sp, #20]
 8002182:	ea89 2930 	eor.w	r9, r9, r0, ror #8
 8002186:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 800218a:	f853 a02a 	ldr.w	sl, [r3, sl, lsl #2]
 800218e:	9802      	ldr	r0, [sp, #8]
 8002190:	2c00      	cmp	r4, #0
 8002192:	ea8b 4b35 	eor.w	fp, fp, r5, ror #16
 8002196:	ea8c 4c3a 	eor.w	ip, ip, sl, ror #16
 800219a:	ea89 4930 	eor.w	r9, r9, r0, ror #16
 800219e:	f102 0220 	add.w	r2, r2, #32
 80021a2:	f73f af22 	bgt.w	8001fea <AES_general_SW_enc+0x46>
 80021a6:	464b      	mov	r3, r9
 80021a8:	46d9      	mov	r9, fp
 80021aa:	469b      	mov	fp, r3
 80021ac:	4b42      	ldr	r3, [pc, #264]	; (80022b8 <AES_general_SW_enc+0x314>)
 80021ae:	ea4f 6519 	mov.w	r5, r9, lsr #24
 80021b2:	fa5f f18b 	uxtb.w	r1, fp
 80021b6:	463c      	mov	r4, r7
 80021b8:	5c5e      	ldrb	r6, [r3, r1]
 80021ba:	5d5f      	ldrb	r7, [r3, r5]
 80021bc:	f3cc 4107 	ubfx	r1, ip, #16, #8
 80021c0:	5c59      	ldrb	r1, [r3, r1]
 80021c2:	f3c4 2507 	ubfx	r5, r4, #8, #8
 80021c6:	4660      	mov	r0, ip
 80021c8:	ea46 6707 	orr.w	r7, r6, r7, lsl #24
 80021cc:	f813 c005 	ldrb.w	ip, [r3, r5]
 80021d0:	0e06      	lsrs	r6, r0, #24
 80021d2:	fa5f f589 	uxtb.w	r5, r9
 80021d6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80021da:	6811      	ldr	r1, [r2, #0]
 80021dc:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80021e0:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
 80021e4:	f813 c006 	ldrb.w	ip, [r3, r6]
 80021e8:	5d5e      	ldrb	r6, [r3, r5]
 80021ea:	f3c4 4507 	ubfx	r5, r4, #16, #8
 80021ee:	5d5d      	ldrb	r5, [r3, r5]
 80021f0:	4079      	eors	r1, r7
 80021f2:	f3cb 2707 	ubfx	r7, fp, #8, #8
 80021f6:	f8c8 1000 	str.w	r1, [r8]
 80021fa:	ea46 660c 	orr.w	r6, r6, ip, lsl #24
 80021fe:	f813 c007 	ldrb.w	ip, [r3, r7]
 8002202:	6851      	ldr	r1, [r2, #4]
 8002204:	0e27      	lsrs	r7, r4, #24
 8002206:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 800220a:	b2c5      	uxtb	r5, r0
 800220c:	ea46 260c 	orr.w	r6, r6, ip, lsl #8
 8002210:	f813 c007 	ldrb.w	ip, [r3, r7]
 8002214:	5d5f      	ldrb	r7, [r3, r5]
 8002216:	f3cb 4507 	ubfx	r5, fp, #16, #8
 800221a:	5d5d      	ldrb	r5, [r3, r5]
 800221c:	4071      	eors	r1, r6
 800221e:	f3c9 2607 	ubfx	r6, r9, #8, #8
 8002222:	f8c8 1004 	str.w	r1, [r8, #4]
 8002226:	ea47 670c 	orr.w	r7, r7, ip, lsl #24
 800222a:	f813 c006 	ldrb.w	ip, [r3, r6]
 800222e:	6891      	ldr	r1, [r2, #8]
 8002230:	b2e4      	uxtb	r4, r4
 8002232:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
 8002236:	ea4f 661b 	mov.w	r6, fp, lsr #24
 800223a:	5d1d      	ldrb	r5, [r3, r4]
 800223c:	5d9e      	ldrb	r6, [r3, r6]
 800223e:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
 8002242:	f3c9 4407 	ubfx	r4, r9, #16, #8
 8002246:	5d1c      	ldrb	r4, [r3, r4]
 8002248:	4079      	eors	r1, r7
 800224a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800224e:	5c18      	ldrb	r0, [r3, r0]
 8002250:	f8c8 1008 	str.w	r1, [r8, #8]
 8002254:	ea45 6306 	orr.w	r3, r5, r6, lsl #24
 8002258:	68d2      	ldr	r2, [r2, #12]
 800225a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800225e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002262:	4053      	eors	r3, r2
 8002264:	f8c8 300c 	str.w	r3, [r8, #12]
 8002268:	b00a      	add	sp, #40	; 0x28
 800226a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800226e:	4770      	bx	lr
 8002270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002272:	6023      	str	r3, [r4, #0]
 8002274:	6823      	ldr	r3, [r4, #0]
 8002276:	9309      	str	r3, [sp, #36]	; 0x24
 8002278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800227a:	b973      	cbnz	r3, 800229a <AES_general_SW_enc+0x2f6>
 800227c:	6803      	ldr	r3, [r0, #0]
 800227e:	6817      	ldr	r7, [r2, #0]
 8002280:	6846      	ldr	r6, [r0, #4]
 8002282:	6885      	ldr	r5, [r0, #8]
 8002284:	6854      	ldr	r4, [r2, #4]
 8002286:	68c0      	ldr	r0, [r0, #12]
 8002288:	ea87 0c03 	eor.w	ip, r7, r3
 800228c:	6891      	ldr	r1, [r2, #8]
 800228e:	68d3      	ldr	r3, [r2, #12]
 8002290:	4066      	eors	r6, r4
 8002292:	404d      	eors	r5, r1
 8002294:	ea83 0a00 	eor.w	sl, r3, r0
 8002298:	e6a3      	b.n	8001fe2 <AES_general_SW_enc+0x3e>
 800229a:	6805      	ldr	r5, [r0, #0]
 800229c:	6811      	ldr	r1, [r2, #0]
 800229e:	6840      	ldr	r0, [r0, #4]
 80022a0:	6853      	ldr	r3, [r2, #4]
 80022a2:	404d      	eors	r5, r1
 80022a4:	ea83 0c00 	eor.w	ip, r3, r0
 80022a8:	46aa      	mov	sl, r5
 80022aa:	462e      	mov	r6, r5
 80022ac:	e699      	b.n	8001fe2 <AES_general_SW_enc+0x3e>
 80022ae:	bf00      	nop
 80022b0:	40023008 	.word	0x40023008
 80022b4:	08003780 	.word	0x08003780
 80022b8:	08003b80 	.word	0x08003b80

080022bc <AES_CCM_Encrypt_Init>:
 80022bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022be:	2300      	movs	r3, #0
 80022c0:	b085      	sub	sp, #20
 80022c2:	4604      	mov	r4, r0
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	9301      	str	r3, [sp, #4]
 80022c8:	9302      	str	r3, [sp, #8]
 80022ca:	9303      	str	r3, [sp, #12]
 80022cc:	b148      	cbz	r0, 80022e2 <AES_CCM_Encrypt_Init+0x26>
 80022ce:	b141      	cbz	r1, 80022e2 <AES_CCM_Encrypt_Init+0x26>
 80022d0:	b13a      	cbz	r2, 80022e2 <AES_CCM_Encrypt_Init+0x26>
 80022d2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80022d4:	1f03      	subs	r3, r0, #4
 80022d6:	2b0c      	cmp	r3, #12
 80022d8:	d907      	bls.n	80022ea <AES_CCM_Encrypt_Init+0x2e>
 80022da:	f640 401f 	movw	r0, #3103	; 0xc1f
 80022de:	b005      	add	sp, #20
 80022e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022e2:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 80022e6:	b005      	add	sp, #20
 80022e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022ea:	07c7      	lsls	r7, r0, #31
 80022ec:	d4f5      	bmi.n	80022da <AES_CCM_Encrypt_Init+0x1e>
 80022ee:	6925      	ldr	r5, [r4, #16]
 80022f0:	1feb      	subs	r3, r5, #7
 80022f2:	2b06      	cmp	r3, #6
 80022f4:	d8f1      	bhi.n	80022da <AES_CCM_Encrypt_Init+0x1e>
 80022f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80022f8:	f023 0608 	bic.w	r6, r3, #8
 80022fc:	2e10      	cmp	r6, #16
 80022fe:	d001      	beq.n	8002304 <AES_CCM_Encrypt_Init+0x48>
 8002300:	2b20      	cmp	r3, #32
 8002302:	d1ea      	bne.n	80022da <AES_CCM_Encrypt_Init+0x1e>
 8002304:	7926      	ldrb	r6, [r4, #4]
 8002306:	60e2      	str	r2, [r4, #12]
 8002308:	f026 0716 	bic.w	r7, r6, #22
 800230c:	07f6      	lsls	r6, r6, #31
 800230e:	7127      	strb	r7, [r4, #4]
 8002310:	f104 0748 	add.w	r7, r4, #72	; 0x48
 8002314:	f140 80ad 	bpl.w	8002472 <AES_CCM_Encrypt_Init+0x1b6>
 8002318:	b2c0      	uxtb	r0, r0
 800231a:	1e86      	subs	r6, r0, #2
 800231c:	f1c5 010e 	rsb	r1, r5, #14
 8002320:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002322:	f3c6 0642 	ubfx	r6, r6, #1, #3
 8002326:	f001 0107 	and.w	r1, r1, #7
 800232a:	ea41 01c6 	orr.w	r1, r1, r6, lsl #3
 800232e:	b108      	cbz	r0, 8002334 <AES_CCM_Encrypt_Init+0x78>
 8002330:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8002334:	7856      	ldrb	r6, [r2, #1]
 8002336:	f892 e000 	ldrb.w	lr, [r2]
 800233a:	7890      	ldrb	r0, [r2, #2]
 800233c:	0236      	lsls	r6, r6, #8
 800233e:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
 8002342:	4330      	orrs	r0, r6
 8002344:	ea40 6101 	orr.w	r1, r0, r1, lsl #24
 8002348:	9100      	str	r1, [sp, #0]
 800234a:	7910      	ldrb	r0, [r2, #4]
 800234c:	78d6      	ldrb	r6, [r2, #3]
 800234e:	0400      	lsls	r0, r0, #16
 8002350:	7991      	ldrb	r1, [r2, #6]
 8002352:	ea40 6606 	orr.w	r6, r0, r6, lsl #24
 8002356:	7950      	ldrb	r0, [r2, #5]
 8002358:	4331      	orrs	r1, r6
 800235a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 800235e:	2d07      	cmp	r5, #7
 8002360:	9101      	str	r1, [sp, #4]
 8002362:	dd17      	ble.n	8002394 <AES_CCM_Encrypt_Init+0xd8>
 8002364:	f1a5 0e07 	sub.w	lr, r5, #7
 8002368:	2000      	movs	r0, #0
 800236a:	1815      	adds	r5, r2, r0
 800236c:	43c1      	mvns	r1, r0
 800236e:	79ee      	ldrb	r6, [r5, #7]
 8002370:	f001 0103 	and.w	r1, r1, #3
 8002374:	00c9      	lsls	r1, r1, #3
 8002376:	fa06 f101 	lsl.w	r1, r6, r1
 800237a:	f020 0503 	bic.w	r5, r0, #3
 800237e:	ae04      	add	r6, sp, #16
 8002380:	3508      	adds	r5, #8
 8002382:	4435      	add	r5, r6
 8002384:	f855 6c10 	ldr.w	r6, [r5, #-16]
 8002388:	3001      	adds	r0, #1
 800238a:	430e      	orrs	r6, r1
 800238c:	4570      	cmp	r0, lr
 800238e:	f845 6c10 	str.w	r6, [r5, #-16]
 8002392:	d1ea      	bne.n	800236a <AES_CCM_Encrypt_Init+0xae>
 8002394:	9803      	ldr	r0, [sp, #12]
 8002396:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002398:	463a      	mov	r2, r7
 800239a:	ea40 0501 	orr.w	r5, r0, r1
 800239e:	f104 0124 	add.w	r1, r4, #36	; 0x24
 80023a2:	4668      	mov	r0, sp
 80023a4:	9503      	str	r5, [sp, #12]
 80023a6:	f7ff fdfd 	bl	8001fa4 <AES_general_SW_enc>
 80023aa:	68e6      	ldr	r6, [r4, #12]
 80023ac:	6927      	ldr	r7, [r4, #16]
 80023ae:	7872      	ldrb	r2, [r6, #1]
 80023b0:	7831      	ldrb	r1, [r6, #0]
 80023b2:	78b3      	ldrb	r3, [r6, #2]
 80023b4:	0212      	lsls	r2, r2, #8
 80023b6:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 80023ba:	f1c7 020e 	rsb	r2, r7, #14
 80023be:	430b      	orrs	r3, r1
 80023c0:	f002 0207 	and.w	r2, r2, #7
 80023c4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80023c8:	6163      	str	r3, [r4, #20]
 80023ca:	7932      	ldrb	r2, [r6, #4]
 80023cc:	78f1      	ldrb	r1, [r6, #3]
 80023ce:	79b3      	ldrb	r3, [r6, #6]
 80023d0:	0412      	lsls	r2, r2, #16
 80023d2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80023d6:	7972      	ldrb	r2, [r6, #5]
 80023d8:	430b      	orrs	r3, r1
 80023da:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80023de:	2f07      	cmp	r7, #7
 80023e0:	f04f 0300 	mov.w	r3, #0
 80023e4:	61a2      	str	r2, [r4, #24]
 80023e6:	61e3      	str	r3, [r4, #28]
 80023e8:	6223      	str	r3, [r4, #32]
 80023ea:	dd1f      	ble.n	800242c <AES_CCM_Encrypt_Init+0x170>
 80023ec:	3f07      	subs	r7, #7
 80023ee:	469c      	mov	ip, r3
 80023f0:	e007      	b.n	8002402 <AES_CCM_Encrypt_Init+0x146>
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	bfb8      	it	lt
 80023f6:	1cda      	addlt	r2, r3, #3
 80023f8:	f022 0203 	bic.w	r2, r2, #3
 80023fc:	4422      	add	r2, r4
 80023fe:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 8002402:	18f5      	adds	r5, r6, r3
 8002404:	43d8      	mvns	r0, r3
 8002406:	79e9      	ldrb	r1, [r5, #7]
 8002408:	f000 0003 	and.w	r0, r0, #3
 800240c:	00c0      	lsls	r0, r0, #3
 800240e:	4081      	lsls	r1, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	461a      	mov	r2, r3
 8002414:	bfb8      	it	lt
 8002416:	1cda      	addlt	r2, r3, #3
 8002418:	f022 0203 	bic.w	r2, r2, #3
 800241c:	3301      	adds	r3, #1
 800241e:	4422      	add	r2, r4
 8002420:	ea4c 0101 	orr.w	r1, ip, r1
 8002424:	42bb      	cmp	r3, r7
 8002426:	61d1      	str	r1, [r2, #28]
 8002428:	461a      	mov	r2, r3
 800242a:	d1e2      	bne.n	80023f2 <AES_CCM_Encrypt_Init+0x136>
 800242c:	6a23      	ldr	r3, [r4, #32]
 800242e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002430:	f043 0301 	orr.w	r3, r3, #1
 8002434:	6223      	str	r3, [r4, #32]
 8002436:	2800      	cmp	r0, #0
 8002438:	f43f af55 	beq.w	80022e6 <AES_CCM_Encrypt_Init+0x2a>
 800243c:	2300      	movs	r3, #0
 800243e:	f5b0 4f7f 	cmp.w	r0, #65280	; 0xff00
 8002442:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
 8002446:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
 800244a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 800244e:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
 8002452:	db19      	blt.n	8002488 <AES_CCM_Encrypt_Init+0x1cc>
 8002454:	0c02      	lsrs	r2, r0, #16
 8002456:	ea6f 32c2 	mvn.w	r2, r2, lsl #15
 800245a:	0400      	lsls	r0, r0, #16
 800245c:	ea6f 32d2 	mvn.w	r2, r2, lsr #15
 8002460:	2106      	movs	r1, #6
 8002462:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
 8002466:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
 800246a:	4618      	mov	r0, r3
 800246c:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
 8002470:	e739      	b.n	80022e6 <AES_CCM_Encrypt_Init+0x2a>
 8002472:	4608      	mov	r0, r1
 8002474:	461a      	mov	r2, r3
 8002476:	60a1      	str	r1, [r4, #8]
 8002478:	4639      	mov	r1, r7
 800247a:	f7ff fd75 	bl	8001f68 <AES_keyschedule_enc>
 800247e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002480:	6925      	ldr	r5, [r4, #16]
 8002482:	68e2      	ldr	r2, [r4, #12]
 8002484:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002486:	e747      	b.n	8002318 <AES_CCM_Encrypt_Init+0x5c>
 8002488:	0400      	lsls	r0, r0, #16
 800248a:	2202      	movs	r2, #2
 800248c:	f8c4 0138 	str.w	r0, [r4, #312]	; 0x138
 8002490:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
 8002494:	4618      	mov	r0, r3
 8002496:	e726      	b.n	80022e6 <AES_CCM_Encrypt_Init+0x2a>

08002498 <AES_CCM_Header_Append>:
 8002498:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800249c:	4680      	mov	r8, r0
 800249e:	468b      	mov	fp, r1
 80024a0:	4692      	mov	sl, r2
 80024a2:	b150      	cbz	r0, 80024ba <AES_CCM_Header_Append+0x22>
 80024a4:	b149      	cbz	r1, 80024ba <AES_CCM_Header_Append+0x22>
 80024a6:	f890 9004 	ldrb.w	r9, [r0, #4]
 80024aa:	f019 0912 	ands.w	r9, r9, #18
 80024ae:	d009      	beq.n	80024c4 <AES_CCM_Header_Append+0x2c>
 80024b0:	f640 451e 	movw	r5, #3102	; 0xc1e
 80024b4:	4628      	mov	r0, r5
 80024b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024ba:	f44f 6542 	mov.w	r5, #3104	; 0xc20
 80024be:	4628      	mov	r0, r5
 80024c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024c4:	2a00      	cmp	r2, #0
 80024c6:	f000 8159 	beq.w	800277c <AES_CCM_Header_Append+0x2e4>
 80024ca:	f8d0 6148 	ldr.w	r6, [r0, #328]	; 0x148
 80024ce:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80024d0:	1994      	adds	r4, r2, r6
 80024d2:	2c10      	cmp	r4, #16
 80024d4:	bf28      	it	cs
 80024d6:	2410      	movcs	r4, #16
 80024d8:	1a9b      	subs	r3, r3, r2
 80024da:	42a6      	cmp	r6, r4
 80024dc:	6403      	str	r3, [r0, #64]	; 0x40
 80024de:	f280 8157 	bge.w	8002790 <AES_CCM_Header_Append+0x2f8>
 80024e2:	4633      	mov	r3, r6
 80024e4:	1b8d      	subs	r5, r1, r6
 80024e6:	43d8      	mvns	r0, r3
 80024e8:	5ce9      	ldrb	r1, [r5, r3]
 80024ea:	f000 0003 	and.w	r0, r0, #3
 80024ee:	00c0      	lsls	r0, r0, #3
 80024f0:	fa01 f000 	lsl.w	r0, r1, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	461a      	mov	r2, r3
 80024f8:	bfb8      	it	lt
 80024fa:	1cda      	addlt	r2, r3, #3
 80024fc:	f022 0203 	bic.w	r2, r2, #3
 8002500:	4442      	add	r2, r8
 8002502:	f8d2 1138 	ldr.w	r1, [r2, #312]	; 0x138
 8002506:	3301      	adds	r3, #1
 8002508:	4301      	orrs	r1, r0
 800250a:	42a3      	cmp	r3, r4
 800250c:	f8c2 1138 	str.w	r1, [r2, #312]	; 0x138
 8002510:	d1e9      	bne.n	80024e6 <AES_CCM_Header_Append+0x4e>
 8002512:	ebc6 0903 	rsb	r9, r6, r3
 8002516:	f109 050f 	add.w	r5, r9, #15
 800251a:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
 800251e:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
 8002522:	f8d8 6138 	ldr.w	r6, [r8, #312]	; 0x138
 8002526:	f8d8 1140 	ldr.w	r1, [r8, #320]	; 0x140
 800252a:	ea87 0206 	eor.w	r2, r7, r6
 800252e:	4041      	eors	r1, r0
 8002530:	f8d8 6028 	ldr.w	r6, [r8, #40]	; 0x28
 8002534:	f8d8 0030 	ldr.w	r0, [r8, #48]	; 0x30
 8002538:	f8d8 413c 	ldr.w	r4, [r8, #316]	; 0x13c
 800253c:	f8d8 3144 	ldr.w	r3, [r8, #324]	; 0x144
 8002540:	4074      	eors	r4, r6
 8002542:	4043      	eors	r3, r0
 8002544:	f108 0724 	add.w	r7, r8, #36	; 0x24
 8002548:	f108 0648 	add.w	r6, r8, #72	; 0x48
 800254c:	f8c8 2024 	str.w	r2, [r8, #36]	; 0x24
 8002550:	f8c8 102c 	str.w	r1, [r8, #44]	; 0x2c
 8002554:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
 8002558:	f8c8 4028 	str.w	r4, [r8, #40]	; 0x28
 800255c:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 8002560:	4638      	mov	r0, r7
 8002562:	4639      	mov	r1, r7
 8002564:	4632      	mov	r2, r6
 8002566:	f7ff fd1d 	bl	8001fa4 <AES_general_SW_enc>
 800256a:	2300      	movs	r3, #0
 800256c:	45aa      	cmp	sl, r5
 800256e:	f8c8 3148 	str.w	r3, [r8, #328]	; 0x148
 8002572:	dd4e      	ble.n	8002612 <AES_CCM_Header_Append+0x17a>
 8002574:	f109 0401 	add.w	r4, r9, #1
 8002578:	445c      	add	r4, fp
 800257a:	7822      	ldrb	r2, [r4, #0]
 800257c:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8002580:	78a3      	ldrb	r3, [r4, #2]
 8002582:	0412      	lsls	r2, r2, #16
 8002584:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002588:	7861      	ldrb	r1, [r4, #1]
 800258a:	431a      	orrs	r2, r3
 800258c:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8002590:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002594:	4053      	eors	r3, r2
 8002596:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
 800259a:	7922      	ldrb	r2, [r4, #4]
 800259c:	78e1      	ldrb	r1, [r4, #3]
 800259e:	79a3      	ldrb	r3, [r4, #6]
 80025a0:	0412      	lsls	r2, r2, #16
 80025a2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80025a6:	7961      	ldrb	r1, [r4, #5]
 80025a8:	431a      	orrs	r2, r3
 80025aa:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 80025ae:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80025b2:	4053      	eors	r3, r2
 80025b4:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
 80025b8:	7a22      	ldrb	r2, [r4, #8]
 80025ba:	79e1      	ldrb	r1, [r4, #7]
 80025bc:	7aa3      	ldrb	r3, [r4, #10]
 80025be:	0412      	lsls	r2, r2, #16
 80025c0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80025c4:	7a61      	ldrb	r1, [r4, #9]
 80025c6:	431a      	orrs	r2, r3
 80025c8:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 80025cc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80025d0:	4053      	eors	r3, r2
 80025d2:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
 80025d6:	7b22      	ldrb	r2, [r4, #12]
 80025d8:	7ae1      	ldrb	r1, [r4, #11]
 80025da:	7ba3      	ldrb	r3, [r4, #14]
 80025dc:	0412      	lsls	r2, r2, #16
 80025de:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80025e2:	7b61      	ldrb	r1, [r4, #13]
 80025e4:	431a      	orrs	r2, r3
 80025e6:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 80025ea:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80025ee:	4053      	eors	r3, r2
 80025f0:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
 80025f4:	f109 0910 	add.w	r9, r9, #16
 80025f8:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 80025fc:	4638      	mov	r0, r7
 80025fe:	4639      	mov	r1, r7
 8002600:	4632      	mov	r2, r6
 8002602:	f7ff fccf 	bl	8001fa4 <AES_general_SW_enc>
 8002606:	f109 030f 	add.w	r3, r9, #15
 800260a:	459a      	cmp	sl, r3
 800260c:	f104 0410 	add.w	r4, r4, #16
 8002610:	dcb3      	bgt.n	800257a <AES_CCM_Header_Append+0xe2>
 8002612:	45ca      	cmp	sl, r9
 8002614:	f340 80b2 	ble.w	800277c <AES_CCM_Header_Append+0x2e4>
 8002618:	ebc9 0a0a 	rsb	sl, r9, sl
 800261c:	f1ba 0f00 	cmp.w	sl, #0
 8002620:	f898 3004 	ldrb.w	r3, [r8, #4]
 8002624:	4655      	mov	r5, sl
 8002626:	bfb8      	it	lt
 8002628:	f10a 0503 	addlt.w	r5, sl, #3
 800262c:	10ad      	asrs	r5, r5, #2
 800262e:	f043 0310 	orr.w	r3, r3, #16
 8002632:	2d00      	cmp	r5, #0
 8002634:	f888 3004 	strb.w	r3, [r8, #4]
 8002638:	f340 80a4 	ble.w	8002784 <AES_CCM_Header_Append+0x2ec>
 800263c:	eb0b 0309 	add.w	r3, fp, r9
 8002640:	78da      	ldrb	r2, [r3, #3]
 8002642:	f81b 1009 	ldrb.w	r1, [fp, r9]
 8002646:	7898      	ldrb	r0, [r3, #2]
 8002648:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 800264c:	785a      	ldrb	r2, [r3, #1]
 800264e:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
 8002652:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002656:	2d01      	cmp	r5, #1
 8002658:	f8c8 3138 	str.w	r3, [r8, #312]	; 0x138
 800265c:	dd36      	ble.n	80026cc <AES_CCM_Header_Append+0x234>
 800265e:	f109 0204 	add.w	r2, r9, #4
 8002662:	eb0b 0302 	add.w	r3, fp, r2
 8002666:	f81b 1002 	ldrb.w	r1, [fp, r2]
 800266a:	78da      	ldrb	r2, [r3, #3]
 800266c:	7898      	ldrb	r0, [r3, #2]
 800266e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8002672:	785a      	ldrb	r2, [r3, #1]
 8002674:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
 8002678:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800267c:	2d02      	cmp	r5, #2
 800267e:	f8c8 313c 	str.w	r3, [r8, #316]	; 0x13c
 8002682:	dd23      	ble.n	80026cc <AES_CCM_Header_Append+0x234>
 8002684:	f109 0208 	add.w	r2, r9, #8
 8002688:	eb0b 0302 	add.w	r3, fp, r2
 800268c:	f81b 1002 	ldrb.w	r1, [fp, r2]
 8002690:	78da      	ldrb	r2, [r3, #3]
 8002692:	7898      	ldrb	r0, [r3, #2]
 8002694:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8002698:	785a      	ldrb	r2, [r3, #1]
 800269a:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
 800269e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80026a2:	2d03      	cmp	r5, #3
 80026a4:	f8c8 3140 	str.w	r3, [r8, #320]	; 0x140
 80026a8:	dd10      	ble.n	80026cc <AES_CCM_Header_Append+0x234>
 80026aa:	f109 020c 	add.w	r2, r9, #12
 80026ae:	eb0b 0302 	add.w	r3, fp, r2
 80026b2:	f81b 1002 	ldrb.w	r1, [fp, r2]
 80026b6:	78da      	ldrb	r2, [r3, #3]
 80026b8:	7858      	ldrb	r0, [r3, #1]
 80026ba:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80026be:	789a      	ldrb	r2, [r3, #2]
 80026c0:	ea41 4300 	orr.w	r3, r1, r0, lsl #16
 80026c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80026c8:	f8c8 3144 	str.w	r3, [r8, #324]	; 0x144
 80026cc:	ebc5 7485 	rsb	r4, r5, r5, lsl #30
 80026d0:	00a8      	lsls	r0, r5, #2
 80026d2:	00a4      	lsls	r4, r4, #2
 80026d4:	3501      	adds	r5, #1
 80026d6:	4684      	mov	ip, r0
 80026d8:	2200      	movs	r2, #0
 80026da:	4454      	add	r4, sl
 80026dc:	4440      	add	r0, r8
 80026de:	4294      	cmp	r4, r2
 80026e0:	f8c0 2138 	str.w	r2, [r0, #312]	; 0x138
 80026e4:	dd56      	ble.n	8002794 <AES_CCM_Header_Append+0x2fc>
 80026e6:	44e1      	add	r9, ip
 80026e8:	eb04 0309 	add.w	r3, r4, r9
 80026ec:	eb0b 0a03 	add.w	sl, fp, r3
 80026f0:	44cb      	add	fp, r9
 80026f2:	2318      	movs	r3, #24
 80026f4:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80026f8:	4099      	lsls	r1, r3
 80026fa:	45d3      	cmp	fp, sl
 80026fc:	ea42 0201 	orr.w	r2, r2, r1
 8002700:	f8c0 2138 	str.w	r2, [r0, #312]	; 0x138
 8002704:	f1a3 0308 	sub.w	r3, r3, #8
 8002708:	d1f4      	bne.n	80026f4 <AES_CCM_Header_Append+0x25c>
 800270a:	4464      	add	r4, ip
 800270c:	2d03      	cmp	r5, #3
 800270e:	f8c8 4148 	str.w	r4, [r8, #328]	; 0x148
 8002712:	dc09      	bgt.n	8002728 <AES_CCM_Header_Append+0x290>
 8002714:	00aa      	lsls	r2, r5, #2
 8002716:	eb08 0085 	add.w	r0, r8, r5, lsl #2
 800271a:	f1c2 0210 	rsb	r2, r2, #16
 800271e:	f500 709c 	add.w	r0, r0, #312	; 0x138
 8002722:	2100      	movs	r1, #0
 8002724:	f000 ffea 	bl	80036fc <memset>
 8002728:	f8d8 5040 	ldr.w	r5, [r8, #64]	; 0x40
 800272c:	bb35      	cbnz	r5, 800277c <AES_CCM_Header_Append+0x2e4>
 800272e:	f8d8 2138 	ldr.w	r2, [r8, #312]	; 0x138
 8002732:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8002736:	f8d8 0140 	ldr.w	r0, [r8, #320]	; 0x140
 800273a:	ea82 0e03 	eor.w	lr, r2, r3
 800273e:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
 8002742:	f8d8 213c 	ldr.w	r2, [r8, #316]	; 0x13c
 8002746:	f8d8 4028 	ldr.w	r4, [r8, #40]	; 0x28
 800274a:	4048      	eors	r0, r1
 800274c:	4054      	eors	r4, r2
 800274e:	f8d8 1144 	ldr.w	r1, [r8, #324]	; 0x144
 8002752:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 8002756:	f8c8 0140 	str.w	r0, [r8, #320]	; 0x140
 800275a:	ea81 0302 	eor.w	r3, r1, r2
 800275e:	f8c8 3144 	str.w	r3, [r8, #324]	; 0x144
 8002762:	4639      	mov	r1, r7
 8002764:	4632      	mov	r2, r6
 8002766:	f8c8 e138 	str.w	lr, [r8, #312]	; 0x138
 800276a:	f8c8 413c 	str.w	r4, [r8, #316]	; 0x13c
 800276e:	f508 709c 	add.w	r0, r8, #312	; 0x138
 8002772:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 8002776:	f7ff fc15 	bl	8001fa4 <AES_general_SW_enc>
 800277a:	e69b      	b.n	80024b4 <AES_CCM_Header_Append+0x1c>
 800277c:	2500      	movs	r5, #0
 800277e:	4628      	mov	r0, r5
 8002780:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002784:	f04f 0c00 	mov.w	ip, #0
 8002788:	4664      	mov	r4, ip
 800278a:	4660      	mov	r0, ip
 800278c:	2501      	movs	r5, #1
 800278e:	e7a3      	b.n	80026d8 <AES_CCM_Header_Append+0x240>
 8002790:	250f      	movs	r5, #15
 8002792:	e6c2      	b.n	800251a <AES_CCM_Header_Append+0x82>
 8002794:	4614      	mov	r4, r2
 8002796:	e7b8      	b.n	800270a <AES_CCM_Header_Append+0x272>

08002798 <AES_CCM_Encrypt_Append>:
 8002798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800279c:	4683      	mov	fp, r0
 800279e:	b095      	sub	sp, #84	; 0x54
 80027a0:	2000      	movs	r0, #0
 80027a2:	9101      	str	r1, [sp, #4]
 80027a4:	9204      	str	r2, [sp, #16]
 80027a6:	9302      	str	r3, [sp, #8]
 80027a8:	9010      	str	r0, [sp, #64]	; 0x40
 80027aa:	9011      	str	r0, [sp, #68]	; 0x44
 80027ac:	9012      	str	r0, [sp, #72]	; 0x48
 80027ae:	9013      	str	r0, [sp, #76]	; 0x4c
 80027b0:	900b      	str	r0, [sp, #44]	; 0x2c
 80027b2:	f1bb 0f00 	cmp.w	fp, #0
 80027b6:	d00d      	beq.n	80027d4 <AES_CCM_Encrypt_Append+0x3c>
 80027b8:	b161      	cbz	r1, 80027d4 <AES_CCM_Encrypt_Append+0x3c>
 80027ba:	b15b      	cbz	r3, 80027d4 <AES_CCM_Encrypt_Append+0x3c>
 80027bc:	981e      	ldr	r0, [sp, #120]	; 0x78
 80027be:	b148      	cbz	r0, 80027d4 <AES_CCM_Encrypt_Append+0x3c>
 80027c0:	f89b 3004 	ldrb.w	r3, [fp, #4]
 80027c4:	f013 0f06 	tst.w	r3, #6
 80027c8:	d009      	beq.n	80027de <AES_CCM_Encrypt_Append+0x46>
 80027ca:	f640 401e 	movw	r0, #3102	; 0xc1e
 80027ce:	b015      	add	sp, #84	; 0x54
 80027d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027d4:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 80027d8:	b015      	add	sp, #84	; 0x54
 80027da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027de:	4bb6      	ldr	r3, [pc, #728]	; (8002ab8 <AES_CCM_Encrypt_Append+0x320>)
 80027e0:	2201      	movs	r2, #1
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	3b08      	subs	r3, #8
 80027e8:	920b      	str	r2, [sp, #44]	; 0x2c
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	920b      	str	r2, [sp, #44]	; 0x2c
 80027ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80027f0:	3201      	adds	r2, #1
 80027f2:	f000 81db 	beq.w	8002bac <AES_CCM_Encrypt_Append+0x414>
 80027f6:	9d04      	ldr	r5, [sp, #16]
 80027f8:	2d0f      	cmp	r5, #15
 80027fa:	f340 835e 	ble.w	8002eba <AES_CCM_Encrypt_Append+0x722>
 80027fe:	f1a5 0310 	sub.w	r3, r5, #16
 8002802:	9d01      	ldr	r5, [sp, #4]
 8002804:	091b      	lsrs	r3, r3, #4
 8002806:	9308      	str	r3, [sp, #32]
 8002808:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 800280c:	f10b 0548 	add.w	r5, fp, #72	; 0x48
 8002810:	9503      	str	r5, [sp, #12]
 8002812:	f10b 0514 	add.w	r5, fp, #20
 8002816:	9507      	str	r5, [sp, #28]
 8002818:	9d01      	ldr	r5, [sp, #4]
 800281a:	3311      	adds	r3, #17
 800281c:	f105 0901 	add.w	r9, r5, #1
 8002820:	f8dd a008 	ldr.w	sl, [sp, #8]
 8002824:	ad10      	add	r5, sp, #64	; 0x40
 8002826:	9305      	str	r3, [sp, #20]
 8002828:	f10b 0c24 	add.w	ip, fp, #36	; 0x24
 800282c:	9506      	str	r5, [sp, #24]
 800282e:	f899 8000 	ldrb.w	r8, [r9]
 8002832:	f819 2c01 	ldrb.w	r2, [r9, #-1]
 8002836:	f899 3002 	ldrb.w	r3, [r9, #2]
 800283a:	ea4f 4808 	mov.w	r8, r8, lsl #16
 800283e:	ea48 6802 	orr.w	r8, r8, r2, lsl #24
 8002842:	f899 2001 	ldrb.w	r2, [r9, #1]
 8002846:	ea48 0803 	orr.w	r8, r8, r3
 800284a:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 800284e:	ea48 2802 	orr.w	r8, r8, r2, lsl #8
 8002852:	ea43 0308 	orr.w	r3, r3, r8
 8002856:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
 800285a:	f899 7004 	ldrb.w	r7, [r9, #4]
 800285e:	f899 2003 	ldrb.w	r2, [r9, #3]
 8002862:	f899 3006 	ldrb.w	r3, [r9, #6]
 8002866:	043f      	lsls	r7, r7, #16
 8002868:	f899 1005 	ldrb.w	r1, [r9, #5]
 800286c:	ea47 6702 	orr.w	r7, r7, r2, lsl #24
 8002870:	431f      	orrs	r7, r3
 8002872:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
 8002876:	ea47 2701 	orr.w	r7, r7, r1, lsl #8
 800287a:	433b      	orrs	r3, r7
 800287c:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
 8002880:	f899 6008 	ldrb.w	r6, [r9, #8]
 8002884:	f899 2007 	ldrb.w	r2, [r9, #7]
 8002888:	f899 300a 	ldrb.w	r3, [r9, #10]
 800288c:	0436      	lsls	r6, r6, #16
 800288e:	f899 0009 	ldrb.w	r0, [r9, #9]
 8002892:	ea46 6602 	orr.w	r6, r6, r2, lsl #24
 8002896:	431e      	orrs	r6, r3
 8002898:	f8db 302c 	ldr.w	r3, [fp, #44]	; 0x2c
 800289c:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
 80028a0:	4333      	orrs	r3, r6
 80028a2:	f8cb 302c 	str.w	r3, [fp, #44]	; 0x2c
 80028a6:	f899 500c 	ldrb.w	r5, [r9, #12]
 80028aa:	f899 200b 	ldrb.w	r2, [r9, #11]
 80028ae:	f899 300e 	ldrb.w	r3, [r9, #14]
 80028b2:	042d      	lsls	r5, r5, #16
 80028b4:	f899 400d 	ldrb.w	r4, [r9, #13]
 80028b8:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
 80028bc:	431d      	orrs	r5, r3
 80028be:	f8db 3030 	ldr.w	r3, [fp, #48]	; 0x30
 80028c2:	ea45 2504 	orr.w	r5, r5, r4, lsl #8
 80028c6:	432b      	orrs	r3, r5
 80028c8:	4660      	mov	r0, ip
 80028ca:	4661      	mov	r1, ip
 80028cc:	f8cb 3030 	str.w	r3, [fp, #48]	; 0x30
 80028d0:	9a03      	ldr	r2, [sp, #12]
 80028d2:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 80028d6:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80028da:	f8cd c000 	str.w	ip, [sp]
 80028de:	970d      	str	r7, [sp, #52]	; 0x34
 80028e0:	950f      	str	r5, [sp, #60]	; 0x3c
 80028e2:	960e      	str	r6, [sp, #56]	; 0x38
 80028e4:	f7ff fb5e 	bl	8001fa4 <AES_general_SW_enc>
 80028e8:	9807      	ldr	r0, [sp, #28]
 80028ea:	9906      	ldr	r1, [sp, #24]
 80028ec:	9a03      	ldr	r2, [sp, #12]
 80028ee:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 80028f2:	f7ff fb57 	bl	8001fa4 <AES_general_SW_enc>
 80028f6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80028f8:	f8db 3020 	ldr.w	r3, [fp, #32]
 80028fc:	402c      	ands	r4, r5
 80028fe:	9911      	ldr	r1, [sp, #68]	; 0x44
 8002900:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002902:	9812      	ldr	r0, [sp, #72]	; 0x48
 8002904:	0e25      	lsrs	r5, r4, #24
 8002906:	3301      	adds	r3, #1
 8002908:	f8cb 3020 	str.w	r3, [fp, #32]
 800290c:	400f      	ands	r7, r1
 800290e:	f88a 5003 	strb.w	r5, [sl, #3]
 8002912:	ea08 0802 	and.w	r8, r8, r2
 8002916:	4030      	ands	r0, r6
 8002918:	9d05      	ldr	r5, [sp, #20]
 800291a:	f109 0910 	add.w	r9, r9, #16
 800291e:	0e00      	lsrs	r0, r0, #24
 8002920:	0e3f      	lsrs	r7, r7, #24
 8002922:	ea4f 6818 	mov.w	r8, r8, lsr #24
 8002926:	0a21      	lsrs	r1, r4, #8
 8002928:	0c22      	lsrs	r2, r4, #16
 800292a:	f88a 0002 	strb.w	r0, [sl, #2]
 800292e:	f88a 4006 	strb.w	r4, [sl, #6]
 8002932:	f88a 7001 	strb.w	r7, [sl, #1]
 8002936:	f88a 8000 	strb.w	r8, [sl]
 800293a:	f88a 1005 	strb.w	r1, [sl, #5]
 800293e:	f88a 2004 	strb.w	r2, [sl, #4]
 8002942:	45a9      	cmp	r9, r5
 8002944:	f10a 0a10 	add.w	sl, sl, #16
 8002948:	f8dd c000 	ldr.w	ip, [sp]
 800294c:	f47f af6f 	bne.w	800282e <AES_CCM_Encrypt_Append+0x96>
 8002950:	9d08      	ldr	r5, [sp, #32]
 8002952:	1c6b      	adds	r3, r5, #1
 8002954:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002958:	9d04      	ldr	r5, [sp, #16]
 800295a:	45a8      	cmp	r8, r5
 800295c:	f280 8121 	bge.w	8002ba2 <AES_CCM_Encrypt_Append+0x40a>
 8002960:	ebc8 0505 	rsb	r5, r8, r5
 8002964:	2d00      	cmp	r5, #0
 8002966:	f89b 3004 	ldrb.w	r3, [fp, #4]
 800296a:	462c      	mov	r4, r5
 800296c:	bfb8      	it	lt
 800296e:	1cec      	addlt	r4, r5, #3
 8002970:	10a4      	asrs	r4, r4, #2
 8002972:	f043 0304 	orr.w	r3, r3, #4
 8002976:	2c00      	cmp	r4, #0
 8002978:	f88b 3004 	strb.w	r3, [fp, #4]
 800297c:	f340 8299 	ble.w	8002eb2 <AES_CCM_Encrypt_Append+0x71a>
 8002980:	9b01      	ldr	r3, [sp, #4]
 8002982:	9801      	ldr	r0, [sp, #4]
 8002984:	4443      	add	r3, r8
 8002986:	f810 1008 	ldrb.w	r1, [r0, r8]
 800298a:	78da      	ldrb	r2, [r3, #3]
 800298c:	7898      	ldrb	r0, [r3, #2]
 800298e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002992:	7859      	ldrb	r1, [r3, #1]
 8002994:	ea42 2300 	orr.w	r3, r2, r0, lsl #8
 8002998:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
 800299c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80029a0:	405a      	eors	r2, r3
 80029a2:	2c01      	cmp	r4, #1
 80029a4:	930c      	str	r3, [sp, #48]	; 0x30
 80029a6:	9210      	str	r2, [sp, #64]	; 0x40
 80029a8:	dd3f      	ble.n	8002a2a <AES_CCM_Encrypt_Append+0x292>
 80029aa:	9b01      	ldr	r3, [sp, #4]
 80029ac:	f108 0204 	add.w	r2, r8, #4
 80029b0:	9801      	ldr	r0, [sp, #4]
 80029b2:	4413      	add	r3, r2
 80029b4:	5c81      	ldrb	r1, [r0, r2]
 80029b6:	78da      	ldrb	r2, [r3, #3]
 80029b8:	7898      	ldrb	r0, [r3, #2]
 80029ba:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80029be:	7859      	ldrb	r1, [r3, #1]
 80029c0:	ea42 2300 	orr.w	r3, r2, r0, lsl #8
 80029c4:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 80029c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80029cc:	405a      	eors	r2, r3
 80029ce:	2c02      	cmp	r4, #2
 80029d0:	930d      	str	r3, [sp, #52]	; 0x34
 80029d2:	9211      	str	r2, [sp, #68]	; 0x44
 80029d4:	dd29      	ble.n	8002a2a <AES_CCM_Encrypt_Append+0x292>
 80029d6:	9b01      	ldr	r3, [sp, #4]
 80029d8:	f108 0208 	add.w	r2, r8, #8
 80029dc:	9801      	ldr	r0, [sp, #4]
 80029de:	4413      	add	r3, r2
 80029e0:	5c81      	ldrb	r1, [r0, r2]
 80029e2:	78da      	ldrb	r2, [r3, #3]
 80029e4:	7898      	ldrb	r0, [r3, #2]
 80029e6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80029ea:	7859      	ldrb	r1, [r3, #1]
 80029ec:	ea42 2300 	orr.w	r3, r2, r0, lsl #8
 80029f0:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 80029f4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80029f8:	405a      	eors	r2, r3
 80029fa:	2c03      	cmp	r4, #3
 80029fc:	930e      	str	r3, [sp, #56]	; 0x38
 80029fe:	9212      	str	r2, [sp, #72]	; 0x48
 8002a00:	dd13      	ble.n	8002a2a <AES_CCM_Encrypt_Append+0x292>
 8002a02:	9b01      	ldr	r3, [sp, #4]
 8002a04:	f108 020c 	add.w	r2, r8, #12
 8002a08:	9801      	ldr	r0, [sp, #4]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	5c81      	ldrb	r1, [r0, r2]
 8002a0e:	78da      	ldrb	r2, [r3, #3]
 8002a10:	7858      	ldrb	r0, [r3, #1]
 8002a12:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002a16:	7899      	ldrb	r1, [r3, #2]
 8002a18:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
 8002a1c:	f8db 2030 	ldr.w	r2, [fp, #48]	; 0x30
 8002a20:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002a24:	405a      	eors	r2, r3
 8002a26:	930f      	str	r3, [sp, #60]	; 0x3c
 8002a28:	9213      	str	r2, [sp, #76]	; 0x4c
 8002a2a:	ebc4 7384 	rsb	r3, r4, r4, lsl #30
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	1c67      	adds	r7, r4, #1
 8002a32:	46a6      	mov	lr, r4
 8002a34:	2100      	movs	r1, #0
 8002a36:	ea4f 068e 	mov.w	r6, lr, lsl #2
 8002a3a:	442b      	add	r3, r5
 8002a3c:	aa14      	add	r2, sp, #80	; 0x50
 8002a3e:	4432      	add	r2, r6
 8002a40:	428b      	cmp	r3, r1
 8002a42:	f842 1c20 	str.w	r1, [r2, #-32]
 8002a46:	dd15      	ble.n	8002a74 <AES_CCM_Encrypt_Append+0x2dc>
 8002a48:	9a01      	ldr	r2, [sp, #4]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	eb08 0206 	add.w	r2, r8, r6
 8002a50:	1898      	adds	r0, r3, r2
 8002a52:	9b01      	ldr	r3, [sp, #4]
 8002a54:	441a      	add	r2, r3
 8002a56:	2318      	movs	r3, #24
 8002a58:	f812 cb01 	ldrb.w	ip, [r2], #1
 8002a5c:	fa0c fc03 	lsl.w	ip, ip, r3
 8002a60:	4282      	cmp	r2, r0
 8002a62:	ea81 010c 	eor.w	r1, r1, ip
 8002a66:	f1a3 0308 	sub.w	r3, r3, #8
 8002a6a:	d1f5      	bne.n	8002a58 <AES_CCM_Encrypt_Append+0x2c0>
 8002a6c:	ab14      	add	r3, sp, #80	; 0x50
 8002a6e:	4433      	add	r3, r6
 8002a70:	f843 1c20 	str.w	r1, [r3, #-32]
 8002a74:	eb0b 0e8e 	add.w	lr, fp, lr, lsl #2
 8002a78:	f8de 3024 	ldr.w	r3, [lr, #36]	; 0x24
 8002a7c:	a814      	add	r0, sp, #80	; 0x50
 8002a7e:	4406      	add	r6, r0
 8002a80:	4059      	eors	r1, r3
 8002a82:	2f03      	cmp	r7, #3
 8002a84:	f846 1c10 	str.w	r1, [r6, #-16]
 8002a88:	f300 820f 	bgt.w	8002eaa <AES_CCM_Encrypt_Append+0x712>
 8002a8c:	00be      	lsls	r6, r7, #2
 8002a8e:	f1c6 0610 	rsb	r6, r6, #16
 8002a92:	00bf      	lsls	r7, r7, #2
 8002a94:	a80c      	add	r0, sp, #48	; 0x30
 8002a96:	4632      	mov	r2, r6
 8002a98:	2100      	movs	r1, #0
 8002a9a:	4438      	add	r0, r7
 8002a9c:	f000 fe2e 	bl	80036fc <memset>
 8002aa0:	aa10      	add	r2, sp, #64	; 0x40
 8002aa2:	9206      	str	r2, [sp, #24]
 8002aa4:	9806      	ldr	r0, [sp, #24]
 8002aa6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002aaa:	4632      	mov	r2, r6
 8002aac:	4459      	add	r1, fp
 8002aae:	4438      	add	r0, r7
 8002ab0:	f000 fe16 	bl	80036e0 <memcpy>
 8002ab4:	9806      	ldr	r0, [sp, #24]
 8002ab6:	e001      	b.n	8002abc <AES_CCM_Encrypt_Append+0x324>
 8002ab8:	40023008 	.word	0x40023008
 8002abc:	f10b 0648 	add.w	r6, fp, #72	; 0x48
 8002ac0:	4632      	mov	r2, r6
 8002ac2:	f10b 0124 	add.w	r1, fp, #36	; 0x24
 8002ac6:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 8002aca:	f7ff fa6b 	bl	8001fa4 <AES_general_SW_enc>
 8002ace:	4632      	mov	r2, r6
 8002ad0:	9906      	ldr	r1, [sp, #24]
 8002ad2:	f10b 0014 	add.w	r0, fp, #20
 8002ad6:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 8002ada:	f7ff fa63 	bl	8001fa4 <AES_general_SW_enc>
 8002ade:	2c00      	cmp	r4, #0
 8002ae0:	f340 81e0 	ble.w	8002ea4 <AES_CCM_Encrypt_Append+0x70c>
 8002ae4:	9910      	ldr	r1, [sp, #64]	; 0x40
 8002ae6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002ae8:	9a02      	ldr	r2, [sp, #8]
 8002aea:	404b      	eors	r3, r1
 8002aec:	4442      	add	r2, r8
 8002aee:	0a1e      	lsrs	r6, r3, #8
 8002af0:	0c18      	lsrs	r0, r3, #16
 8002af2:	0e19      	lsrs	r1, r3, #24
 8002af4:	70d3      	strb	r3, [r2, #3]
 8002af6:	9b02      	ldr	r3, [sp, #8]
 8002af8:	2c01      	cmp	r4, #1
 8002afa:	7096      	strb	r6, [r2, #2]
 8002afc:	7050      	strb	r0, [r2, #1]
 8002afe:	f803 1008 	strb.w	r1, [r3, r8]
 8002b02:	dd30      	ble.n	8002b66 <AES_CCM_Encrypt_Append+0x3ce>
 8002b04:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002b06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002b08:	f108 0104 	add.w	r1, r8, #4
 8002b0c:	4053      	eors	r3, r2
 8002b0e:	9a02      	ldr	r2, [sp, #8]
 8002b10:	0a1f      	lsrs	r7, r3, #8
 8002b12:	440a      	add	r2, r1
 8002b14:	0c1e      	lsrs	r6, r3, #16
 8002b16:	7097      	strb	r7, [r2, #2]
 8002b18:	70d3      	strb	r3, [r2, #3]
 8002b1a:	7056      	strb	r6, [r2, #1]
 8002b1c:	9a02      	ldr	r2, [sp, #8]
 8002b1e:	0e18      	lsrs	r0, r3, #24
 8002b20:	2c02      	cmp	r4, #2
 8002b22:	5450      	strb	r0, [r2, r1]
 8002b24:	dd1f      	ble.n	8002b66 <AES_CCM_Encrypt_Append+0x3ce>
 8002b26:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002b28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002b2a:	f108 0108 	add.w	r1, r8, #8
 8002b2e:	4053      	eors	r3, r2
 8002b30:	9a02      	ldr	r2, [sp, #8]
 8002b32:	0a1f      	lsrs	r7, r3, #8
 8002b34:	440a      	add	r2, r1
 8002b36:	0c1e      	lsrs	r6, r3, #16
 8002b38:	0e18      	lsrs	r0, r3, #24
 8002b3a:	70d3      	strb	r3, [r2, #3]
 8002b3c:	9b02      	ldr	r3, [sp, #8]
 8002b3e:	2c03      	cmp	r4, #3
 8002b40:	7097      	strb	r7, [r2, #2]
 8002b42:	7056      	strb	r6, [r2, #1]
 8002b44:	5458      	strb	r0, [r3, r1]
 8002b46:	dd0e      	ble.n	8002b66 <AES_CCM_Encrypt_Append+0x3ce>
 8002b48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002b4a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002b4c:	f108 010c 	add.w	r1, r8, #12
 8002b50:	4053      	eors	r3, r2
 8002b52:	9a02      	ldr	r2, [sp, #8]
 8002b54:	0a1f      	lsrs	r7, r3, #8
 8002b56:	440a      	add	r2, r1
 8002b58:	0c1e      	lsrs	r6, r3, #16
 8002b5a:	7097      	strb	r7, [r2, #2]
 8002b5c:	70d3      	strb	r3, [r2, #3]
 8002b5e:	7056      	strb	r6, [r2, #1]
 8002b60:	9a02      	ldr	r2, [sp, #8]
 8002b62:	0e18      	lsrs	r0, r3, #24
 8002b64:	5450      	strb	r0, [r2, r1]
 8002b66:	ebc4 7284 	rsb	r2, r4, r4, lsl #30
 8002b6a:	0092      	lsls	r2, r2, #2
 8002b6c:	00a4      	lsls	r4, r4, #2
 8002b6e:	ab14      	add	r3, sp, #80	; 0x50
 8002b70:	4423      	add	r3, r4
 8002b72:	f853 0c20 	ldr.w	r0, [r3, #-32]
 8002b76:	4415      	add	r5, r2
 8002b78:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8002b7c:	2d00      	cmp	r5, #0
 8002b7e:	ea80 0003 	eor.w	r0, r0, r3
 8002b82:	dd0e      	ble.n	8002ba2 <AES_CCM_Encrypt_Append+0x40a>
 8002b84:	9b02      	ldr	r3, [sp, #8]
 8002b86:	4444      	add	r4, r8
 8002b88:	441d      	add	r5, r3
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	4422      	add	r2, r4
 8002b8e:	2318      	movs	r3, #24
 8002b90:	442c      	add	r4, r5
 8002b92:	fa20 f103 	lsr.w	r1, r0, r3
 8002b96:	f802 1b01 	strb.w	r1, [r2], #1
 8002b9a:	42a2      	cmp	r2, r4
 8002b9c:	f1a3 0308 	sub.w	r3, r3, #8
 8002ba0:	d1f7      	bne.n	8002b92 <AES_CCM_Encrypt_Append+0x3fa>
 8002ba2:	981e      	ldr	r0, [sp, #120]	; 0x78
 8002ba4:	9d04      	ldr	r5, [sp, #16]
 8002ba6:	6005      	str	r5, [r0, #0]
 8002ba8:	2000      	movs	r0, #0
 8002baa:	e615      	b.n	80027d8 <AES_CCM_Encrypt_Append+0x40>
 8002bac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002bae:	9d04      	ldr	r5, [sp, #16]
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	930b      	str	r3, [sp, #44]	; 0x2c
 8002bb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 80ad 	beq.w	8002d18 <AES_CCM_Encrypt_Append+0x580>
 8002bbe:	2d0f      	cmp	r5, #15
 8002bc0:	f340 817b 	ble.w	8002eba <AES_CCM_Encrypt_Append+0x722>
 8002bc4:	f1a5 0310 	sub.w	r3, r5, #16
 8002bc8:	9d01      	ldr	r5, [sp, #4]
 8002bca:	091b      	lsrs	r3, r3, #4
 8002bcc:	9309      	str	r3, [sp, #36]	; 0x24
 8002bce:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 8002bd2:	f10b 0524 	add.w	r5, fp, #36	; 0x24
 8002bd6:	9503      	str	r5, [sp, #12]
 8002bd8:	f10b 0548 	add.w	r5, fp, #72	; 0x48
 8002bdc:	9505      	str	r5, [sp, #20]
 8002bde:	f10b 0514 	add.w	r5, fp, #20
 8002be2:	9508      	str	r5, [sp, #32]
 8002be4:	9d01      	ldr	r5, [sp, #4]
 8002be6:	3311      	adds	r3, #17
 8002be8:	f105 0901 	add.w	r9, r5, #1
 8002bec:	f8dd a008 	ldr.w	sl, [sp, #8]
 8002bf0:	ad10      	add	r5, sp, #64	; 0x40
 8002bf2:	9307      	str	r3, [sp, #28]
 8002bf4:	9506      	str	r5, [sp, #24]
 8002bf6:	f899 2000 	ldrb.w	r2, [r9]
 8002bfa:	f819 1c01 	ldrb.w	r1, [r9, #-1]
 8002bfe:	f899 3002 	ldrb.w	r3, [r9, #2]
 8002c02:	0412      	lsls	r2, r2, #16
 8002c04:	f899 8001 	ldrb.w	r8, [r9, #1]
 8002c08:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 8002c12:	ea42 2808 	orr.w	r8, r2, r8, lsl #8
 8002c16:	ea43 0308 	orr.w	r3, r3, r8
 8002c1a:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
 8002c1e:	f899 2004 	ldrb.w	r2, [r9, #4]
 8002c22:	f899 1003 	ldrb.w	r1, [r9, #3]
 8002c26:	f899 3006 	ldrb.w	r3, [r9, #6]
 8002c2a:	0412      	lsls	r2, r2, #16
 8002c2c:	f899 7005 	ldrb.w	r7, [r9, #5]
 8002c30:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002c34:	431a      	orrs	r2, r3
 8002c36:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
 8002c3a:	ea42 2707 	orr.w	r7, r2, r7, lsl #8
 8002c3e:	433b      	orrs	r3, r7
 8002c40:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
 8002c44:	f899 2008 	ldrb.w	r2, [r9, #8]
 8002c48:	f899 1007 	ldrb.w	r1, [r9, #7]
 8002c4c:	f899 300a 	ldrb.w	r3, [r9, #10]
 8002c50:	0412      	lsls	r2, r2, #16
 8002c52:	f899 6009 	ldrb.w	r6, [r9, #9]
 8002c56:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	f8db 302c 	ldr.w	r3, [fp, #44]	; 0x2c
 8002c60:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8002c64:	4333      	orrs	r3, r6
 8002c66:	f8cb 302c 	str.w	r3, [fp, #44]	; 0x2c
 8002c6a:	f899 200c 	ldrb.w	r2, [r9, #12]
 8002c6e:	f899 100b 	ldrb.w	r1, [r9, #11]
 8002c72:	f899 300e 	ldrb.w	r3, [r9, #14]
 8002c76:	0412      	lsls	r2, r2, #16
 8002c78:	f899 500d 	ldrb.w	r5, [r9, #13]
 8002c7c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002c80:	431a      	orrs	r2, r3
 8002c82:	f8db 3030 	ldr.w	r3, [fp, #48]	; 0x30
 8002c86:	ea42 2505 	orr.w	r5, r2, r5, lsl #8
 8002c8a:	9803      	ldr	r0, [sp, #12]
 8002c8c:	432b      	orrs	r3, r5
 8002c8e:	4601      	mov	r1, r0
 8002c90:	f8cb 3030 	str.w	r3, [fp, #48]	; 0x30
 8002c94:	9a05      	ldr	r2, [sp, #20]
 8002c96:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 8002c9a:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8002c9e:	950f      	str	r5, [sp, #60]	; 0x3c
 8002ca0:	970d      	str	r7, [sp, #52]	; 0x34
 8002ca2:	960e      	str	r6, [sp, #56]	; 0x38
 8002ca4:	f7ff f97e 	bl	8001fa4 <AES_general_SW_enc>
 8002ca8:	9808      	ldr	r0, [sp, #32]
 8002caa:	9906      	ldr	r1, [sp, #24]
 8002cac:	9a05      	ldr	r2, [sp, #20]
 8002cae:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 8002cb2:	f7ff f977 	bl	8001fa4 <AES_general_SW_enc>
 8002cb6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8002cb8:	f8db 3020 	ldr.w	r3, [fp, #32]
 8002cbc:	402c      	ands	r4, r5
 8002cbe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002cc0:	0e25      	lsrs	r5, r4, #24
 8002cc2:	9812      	ldr	r0, [sp, #72]	; 0x48
 8002cc4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	f8cb 3020 	str.w	r3, [fp, #32]
 8002ccc:	f88a 5003 	strb.w	r5, [sl, #3]
 8002cd0:	9d07      	ldr	r5, [sp, #28]
 8002cd2:	ea08 0802 	and.w	r8, r8, r2
 8002cd6:	4030      	ands	r0, r6
 8002cd8:	4039      	ands	r1, r7
 8002cda:	f109 0910 	add.w	r9, r9, #16
 8002cde:	0e00      	lsrs	r0, r0, #24
 8002ce0:	0e09      	lsrs	r1, r1, #24
 8002ce2:	ea4f 6818 	mov.w	r8, r8, lsr #24
 8002ce6:	0a22      	lsrs	r2, r4, #8
 8002ce8:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8002cec:	45a9      	cmp	r9, r5
 8002cee:	f88a 0002 	strb.w	r0, [sl, #2]
 8002cf2:	f88a 4006 	strb.w	r4, [sl, #6]
 8002cf6:	f88a 1001 	strb.w	r1, [sl, #1]
 8002cfa:	f88a 8000 	strb.w	r8, [sl]
 8002cfe:	f88a 2005 	strb.w	r2, [sl, #5]
 8002d02:	f88a c004 	strb.w	ip, [sl, #4]
 8002d06:	f10a 0a10 	add.w	sl, sl, #16
 8002d0a:	f47f af74 	bne.w	8002bf6 <AES_CCM_Encrypt_Append+0x45e>
 8002d0e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8002d10:	1c6b      	adds	r3, r5, #1
 8002d12:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002d16:	e61f      	b.n	8002958 <AES_CCM_Encrypt_Append+0x1c0>
 8002d18:	2d0f      	cmp	r5, #15
 8002d1a:	f340 80ce 	ble.w	8002eba <AES_CCM_Encrypt_Append+0x722>
 8002d1e:	f1a5 0210 	sub.w	r2, r5, #16
 8002d22:	f10b 0524 	add.w	r5, fp, #36	; 0x24
 8002d26:	9503      	str	r5, [sp, #12]
 8002d28:	f10b 0548 	add.w	r5, fp, #72	; 0x48
 8002d2c:	f022 020f 	bic.w	r2, r2, #15
 8002d30:	9505      	str	r5, [sp, #20]
 8002d32:	f10b 0514 	add.w	r5, fp, #20
 8002d36:	f102 0810 	add.w	r8, r2, #16
 8002d3a:	9509      	str	r5, [sp, #36]	; 0x24
 8002d3c:	f8dd a004 	ldr.w	sl, [sp, #4]
 8002d40:	ad10      	add	r5, sp, #64	; 0x40
 8002d42:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8002d46:	469c      	mov	ip, r3
 8002d48:	9506      	str	r5, [sp, #24]
 8002d4a:	f8cd 8020 	str.w	r8, [sp, #32]
 8002d4e:	9d01      	ldr	r5, [sp, #4]
 8002d50:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8002d54:	f815 100c 	ldrb.w	r1, [r5, ip]
 8002d58:	f89a 3003 	ldrb.w	r3, [sl, #3]
 8002d5c:	0412      	lsls	r2, r2, #16
 8002d5e:	f89a 8002 	ldrb.w	r8, [sl, #2]
 8002d62:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002d66:	431a      	orrs	r2, r3
 8002d68:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 8002d6c:	ea42 2408 	orr.w	r4, r2, r8, lsl #8
 8002d70:	4063      	eors	r3, r4
 8002d72:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
 8002d76:	f89a 2005 	ldrb.w	r2, [sl, #5]
 8002d7a:	f89a 1004 	ldrb.w	r1, [sl, #4]
 8002d7e:	f89a 3007 	ldrb.w	r3, [sl, #7]
 8002d82:	0412      	lsls	r2, r2, #16
 8002d84:	f89a 7006 	ldrb.w	r7, [sl, #6]
 8002d88:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
 8002d92:	ea42 2707 	orr.w	r7, r2, r7, lsl #8
 8002d96:	407b      	eors	r3, r7
 8002d98:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
 8002d9c:	f89a 2009 	ldrb.w	r2, [sl, #9]
 8002da0:	f89a 1008 	ldrb.w	r1, [sl, #8]
 8002da4:	f89a 300b 	ldrb.w	r3, [sl, #11]
 8002da8:	0412      	lsls	r2, r2, #16
 8002daa:	f89a 600a 	ldrb.w	r6, [sl, #10]
 8002dae:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002db2:	431a      	orrs	r2, r3
 8002db4:	f8db 302c 	ldr.w	r3, [fp, #44]	; 0x2c
 8002db8:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8002dbc:	4073      	eors	r3, r6
 8002dbe:	f8cb 302c 	str.w	r3, [fp, #44]	; 0x2c
 8002dc2:	f89a 200d 	ldrb.w	r2, [sl, #13]
 8002dc6:	f89a 100c 	ldrb.w	r1, [sl, #12]
 8002dca:	f89a 300f 	ldrb.w	r3, [sl, #15]
 8002dce:	0412      	lsls	r2, r2, #16
 8002dd0:	f89a 500e 	ldrb.w	r5, [sl, #14]
 8002dd4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	f8db 3030 	ldr.w	r3, [fp, #48]	; 0x30
 8002dde:	ea42 2505 	orr.w	r5, r2, r5, lsl #8
 8002de2:	9803      	ldr	r0, [sp, #12]
 8002de4:	406b      	eors	r3, r5
 8002de6:	f8cb 3030 	str.w	r3, [fp, #48]	; 0x30
 8002dea:	4601      	mov	r1, r0
 8002dec:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 8002df0:	9a05      	ldr	r2, [sp, #20]
 8002df2:	f8cd c000 	str.w	ip, [sp]
 8002df6:	940c      	str	r4, [sp, #48]	; 0x30
 8002df8:	970d      	str	r7, [sp, #52]	; 0x34
 8002dfa:	960e      	str	r6, [sp, #56]	; 0x38
 8002dfc:	950f      	str	r5, [sp, #60]	; 0x3c
 8002dfe:	f7ff f8d1 	bl	8001fa4 <AES_general_SW_enc>
 8002e02:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e04:	9906      	ldr	r1, [sp, #24]
 8002e06:	9a05      	ldr	r2, [sp, #20]
 8002e08:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 8002e0c:	f7ff f8ca 	bl	8001fa4 <AES_general_SW_enc>
 8002e10:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8002e12:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002e14:	4068      	eors	r0, r5
 8002e16:	9912      	ldr	r1, [sp, #72]	; 0x48
 8002e18:	f8db 5020 	ldr.w	r5, [fp, #32]
 8002e1c:	405c      	eors	r4, r3
 8002e1e:	4071      	eors	r1, r6
 8002e20:	ea4f 2814 	mov.w	r8, r4, lsr #8
 8002e24:	1c6b      	adds	r3, r5, #1
 8002e26:	0c26      	lsrs	r6, r4, #16
 8002e28:	f8cb 3020 	str.w	r3, [fp, #32]
 8002e2c:	f889 8002 	strb.w	r8, [r9, #2]
 8002e30:	f889 4003 	strb.w	r4, [r9, #3]
 8002e34:	f889 6001 	strb.w	r6, [r9, #1]
 8002e38:	f8dd c000 	ldr.w	ip, [sp]
 8002e3c:	9b02      	ldr	r3, [sp, #8]
 8002e3e:	0e25      	lsrs	r5, r4, #24
 8002e40:	f803 500c 	strb.w	r5, [r3, ip]
 8002e44:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002e46:	0a0d      	lsrs	r5, r1, #8
 8002e48:	f889 500a 	strb.w	r5, [r9, #10]
 8002e4c:	9d08      	ldr	r5, [sp, #32]
 8002e4e:	407a      	eors	r2, r7
 8002e50:	f10c 0c10 	add.w	ip, ip, #16
 8002e54:	0a07      	lsrs	r7, r0, #8
 8002e56:	ea4f 4810 	mov.w	r8, r0, lsr #16
 8002e5a:	0e06      	lsrs	r6, r0, #24
 8002e5c:	0c0c      	lsrs	r4, r1, #16
 8002e5e:	0e0b      	lsrs	r3, r1, #24
 8002e60:	f889 700e 	strb.w	r7, [r9, #14]
 8002e64:	f889 000f 	strb.w	r0, [r9, #15]
 8002e68:	f889 100b 	strb.w	r1, [r9, #11]
 8002e6c:	0a17      	lsrs	r7, r2, #8
 8002e6e:	0c10      	lsrs	r0, r2, #16
 8002e70:	0e11      	lsrs	r1, r2, #24
 8002e72:	45ac      	cmp	ip, r5
 8002e74:	f889 2007 	strb.w	r2, [r9, #7]
 8002e78:	f889 800d 	strb.w	r8, [r9, #13]
 8002e7c:	f889 600c 	strb.w	r6, [r9, #12]
 8002e80:	f889 4009 	strb.w	r4, [r9, #9]
 8002e84:	f889 3008 	strb.w	r3, [r9, #8]
 8002e88:	f889 7006 	strb.w	r7, [r9, #6]
 8002e8c:	f889 0005 	strb.w	r0, [r9, #5]
 8002e90:	f889 1004 	strb.w	r1, [r9, #4]
 8002e94:	f10a 0a10 	add.w	sl, sl, #16
 8002e98:	f109 0910 	add.w	r9, r9, #16
 8002e9c:	f47f af57 	bne.w	8002d4e <AES_CCM_Encrypt_Append+0x5b6>
 8002ea0:	46a8      	mov	r8, r5
 8002ea2:	e559      	b.n	8002958 <AES_CCM_Encrypt_Append+0x1c0>
 8002ea4:	2400      	movs	r4, #0
 8002ea6:	4622      	mov	r2, r4
 8002ea8:	e660      	b.n	8002b6c <AES_CCM_Encrypt_Append+0x3d4>
 8002eaa:	a910      	add	r1, sp, #64	; 0x40
 8002eac:	9106      	str	r1, [sp, #24]
 8002eae:	4608      	mov	r0, r1
 8002eb0:	e604      	b.n	8002abc <AES_CCM_Encrypt_Append+0x324>
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	469e      	mov	lr, r3
 8002eb6:	2701      	movs	r7, #1
 8002eb8:	e5bc      	b.n	8002a34 <AES_CCM_Encrypt_Append+0x29c>
 8002eba:	f04f 0800 	mov.w	r8, #0
 8002ebe:	e54b      	b.n	8002958 <AES_CCM_Encrypt_Append+0x1c0>

08002ec0 <AES_CCM_Encrypt_Finish>:
 8002ec0:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	4606      	mov	r6, r0
 8002eca:	4689      	mov	r9, r1
 8002ecc:	4614      	mov	r4, r2
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	9301      	str	r3, [sp, #4]
 8002ed2:	9302      	str	r3, [sp, #8]
 8002ed4:	9303      	str	r3, [sp, #12]
 8002ed6:	2800      	cmp	r0, #0
 8002ed8:	d040      	beq.n	8002f5c <AES_CCM_Encrypt_Finish+0x9c>
 8002eda:	2900      	cmp	r1, #0
 8002edc:	d03e      	beq.n	8002f5c <AES_CCM_Encrypt_Finish+0x9c>
 8002ede:	2a00      	cmp	r2, #0
 8002ee0:	d03c      	beq.n	8002f5c <AES_CCM_Encrypt_Finish+0x9c>
 8002ee2:	7901      	ldrb	r1, [r0, #4]
 8002ee4:	6902      	ldr	r2, [r0, #16]
 8002ee6:	f041 0102 	orr.w	r1, r1, #2
 8002eea:	2a0b      	cmp	r2, #11
 8002eec:	7101      	strb	r1, [r0, #4]
 8002eee:	dc3a      	bgt.n	8002f66 <AES_CCM_Encrypt_Finish+0xa6>
 8002ef0:	6233      	str	r3, [r6, #32]
 8002ef2:	f106 0014 	add.w	r0, r6, #20
 8002ef6:	4669      	mov	r1, sp
 8002ef8:	f106 0248 	add.w	r2, r6, #72	; 0x48
 8002efc:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8002efe:	f7ff f851 	bl	8001fa4 <AES_general_SW_enc>
 8002f02:	9a00      	ldr	r2, [sp, #0]
 8002f04:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8002f06:	9b02      	ldr	r3, [sp, #8]
 8002f08:	4057      	eors	r7, r2
 8002f0a:	6ab5      	ldr	r5, [r6, #40]	; 0x28
 8002f0c:	9a01      	ldr	r2, [sp, #4]
 8002f0e:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8002f10:	4055      	eors	r5, r2
 8002f12:	4059      	eors	r1, r3
 8002f14:	9a03      	ldr	r2, [sp, #12]
 8002f16:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8002f18:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002f1a:	2800      	cmp	r0, #0
 8002f1c:	ea82 0c03 	eor.w	ip, r2, r3
 8002f20:	9700      	str	r7, [sp, #0]
 8002f22:	9501      	str	r5, [sp, #4]
 8002f24:	9102      	str	r1, [sp, #8]
 8002f26:	f8cd c00c 	str.w	ip, [sp, #12]
 8002f2a:	dd12      	ble.n	8002f52 <AES_CCM_Encrypt_Finish+0x92>
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	f023 0203 	bic.w	r2, r3, #3
 8002f32:	a904      	add	r1, sp, #16
 8002f34:	43d8      	mvns	r0, r3
 8002f36:	440a      	add	r2, r1
 8002f38:	f852 1c10 	ldr.w	r1, [r2, #-16]
 8002f3c:	f000 0203 	and.w	r2, r0, #3
 8002f40:	00d2      	lsls	r2, r2, #3
 8002f42:	fa21 f202 	lsr.w	r2, r1, r2
 8002f46:	f809 2003 	strb.w	r2, [r9, r3]
 8002f4a:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	4298      	cmp	r0, r3
 8002f50:	dced      	bgt.n	8002f2e <AES_CCM_Encrypt_Finish+0x6e>
 8002f52:	6020      	str	r0, [r4, #0]
 8002f54:	2000      	movs	r0, #0
 8002f56:	b004      	add	sp, #16
 8002f58:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 8002f5c:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 8002f60:	b004      	add	sp, #16
 8002f62:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 8002f66:	f1c2 020f 	rsb	r2, r2, #15
 8002f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f6e:	00d2      	lsls	r2, r2, #3
 8002f70:	fa03 f202 	lsl.w	r2, r3, r2
 8002f74:	6a03      	ldr	r3, [r0, #32]
 8002f76:	4013      	ands	r3, r2
 8002f78:	e7ba      	b.n	8002ef0 <AES_CCM_Encrypt_Finish+0x30>
 8002f7a:	bf00      	nop

08002f7c <AES_CCM_Decrypt_Init>:
 8002f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f7e:	2300      	movs	r3, #0
 8002f80:	b085      	sub	sp, #20
 8002f82:	4604      	mov	r4, r0
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	9301      	str	r3, [sp, #4]
 8002f88:	9302      	str	r3, [sp, #8]
 8002f8a:	9303      	str	r3, [sp, #12]
 8002f8c:	b148      	cbz	r0, 8002fa2 <AES_CCM_Decrypt_Init+0x26>
 8002f8e:	b141      	cbz	r1, 8002fa2 <AES_CCM_Decrypt_Init+0x26>
 8002f90:	b13a      	cbz	r2, 8002fa2 <AES_CCM_Decrypt_Init+0x26>
 8002f92:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8002f94:	1f03      	subs	r3, r0, #4
 8002f96:	2b0c      	cmp	r3, #12
 8002f98:	d907      	bls.n	8002faa <AES_CCM_Decrypt_Init+0x2e>
 8002f9a:	f640 401f 	movw	r0, #3103	; 0xc1f
 8002f9e:	b005      	add	sp, #20
 8002fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fa2:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 8002fa6:	b005      	add	sp, #20
 8002fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002faa:	07c7      	lsls	r7, r0, #31
 8002fac:	d4f5      	bmi.n	8002f9a <AES_CCM_Decrypt_Init+0x1e>
 8002fae:	6925      	ldr	r5, [r4, #16]
 8002fb0:	1feb      	subs	r3, r5, #7
 8002fb2:	2b06      	cmp	r3, #6
 8002fb4:	d8f1      	bhi.n	8002f9a <AES_CCM_Decrypt_Init+0x1e>
 8002fb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002fb8:	f023 0608 	bic.w	r6, r3, #8
 8002fbc:	2e10      	cmp	r6, #16
 8002fbe:	d001      	beq.n	8002fc4 <AES_CCM_Decrypt_Init+0x48>
 8002fc0:	2b20      	cmp	r3, #32
 8002fc2:	d1ea      	bne.n	8002f9a <AES_CCM_Decrypt_Init+0x1e>
 8002fc4:	7926      	ldrb	r6, [r4, #4]
 8002fc6:	60e2      	str	r2, [r4, #12]
 8002fc8:	f026 0716 	bic.w	r7, r6, #22
 8002fcc:	07f6      	lsls	r6, r6, #31
 8002fce:	7127      	strb	r7, [r4, #4]
 8002fd0:	f104 0748 	add.w	r7, r4, #72	; 0x48
 8002fd4:	f140 80ad 	bpl.w	8003132 <AES_CCM_Decrypt_Init+0x1b6>
 8002fd8:	b2c0      	uxtb	r0, r0
 8002fda:	1e86      	subs	r6, r0, #2
 8002fdc:	f1c5 010e 	rsb	r1, r5, #14
 8002fe0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002fe2:	f3c6 0642 	ubfx	r6, r6, #1, #3
 8002fe6:	f001 0107 	and.w	r1, r1, #7
 8002fea:	ea41 01c6 	orr.w	r1, r1, r6, lsl #3
 8002fee:	b108      	cbz	r0, 8002ff4 <AES_CCM_Decrypt_Init+0x78>
 8002ff0:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8002ff4:	7856      	ldrb	r6, [r2, #1]
 8002ff6:	f892 e000 	ldrb.w	lr, [r2]
 8002ffa:	7890      	ldrb	r0, [r2, #2]
 8002ffc:	0236      	lsls	r6, r6, #8
 8002ffe:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
 8003002:	4330      	orrs	r0, r6
 8003004:	ea40 6101 	orr.w	r1, r0, r1, lsl #24
 8003008:	9100      	str	r1, [sp, #0]
 800300a:	7910      	ldrb	r0, [r2, #4]
 800300c:	78d6      	ldrb	r6, [r2, #3]
 800300e:	0400      	lsls	r0, r0, #16
 8003010:	7991      	ldrb	r1, [r2, #6]
 8003012:	ea40 6606 	orr.w	r6, r0, r6, lsl #24
 8003016:	7950      	ldrb	r0, [r2, #5]
 8003018:	4331      	orrs	r1, r6
 800301a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 800301e:	2d07      	cmp	r5, #7
 8003020:	9101      	str	r1, [sp, #4]
 8003022:	dd17      	ble.n	8003054 <AES_CCM_Decrypt_Init+0xd8>
 8003024:	f1a5 0e07 	sub.w	lr, r5, #7
 8003028:	2000      	movs	r0, #0
 800302a:	1815      	adds	r5, r2, r0
 800302c:	43c1      	mvns	r1, r0
 800302e:	79ee      	ldrb	r6, [r5, #7]
 8003030:	f001 0103 	and.w	r1, r1, #3
 8003034:	00c9      	lsls	r1, r1, #3
 8003036:	fa06 f101 	lsl.w	r1, r6, r1
 800303a:	f020 0503 	bic.w	r5, r0, #3
 800303e:	ae04      	add	r6, sp, #16
 8003040:	3508      	adds	r5, #8
 8003042:	4435      	add	r5, r6
 8003044:	f855 6c10 	ldr.w	r6, [r5, #-16]
 8003048:	3001      	adds	r0, #1
 800304a:	430e      	orrs	r6, r1
 800304c:	4570      	cmp	r0, lr
 800304e:	f845 6c10 	str.w	r6, [r5, #-16]
 8003052:	d1ea      	bne.n	800302a <AES_CCM_Decrypt_Init+0xae>
 8003054:	9803      	ldr	r0, [sp, #12]
 8003056:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003058:	463a      	mov	r2, r7
 800305a:	ea40 0501 	orr.w	r5, r0, r1
 800305e:	f104 0124 	add.w	r1, r4, #36	; 0x24
 8003062:	4668      	mov	r0, sp
 8003064:	9503      	str	r5, [sp, #12]
 8003066:	f7fe ff9d 	bl	8001fa4 <AES_general_SW_enc>
 800306a:	68e6      	ldr	r6, [r4, #12]
 800306c:	6927      	ldr	r7, [r4, #16]
 800306e:	7872      	ldrb	r2, [r6, #1]
 8003070:	7831      	ldrb	r1, [r6, #0]
 8003072:	78b3      	ldrb	r3, [r6, #2]
 8003074:	0212      	lsls	r2, r2, #8
 8003076:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 800307a:	f1c7 020e 	rsb	r2, r7, #14
 800307e:	430b      	orrs	r3, r1
 8003080:	f002 0207 	and.w	r2, r2, #7
 8003084:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003088:	6163      	str	r3, [r4, #20]
 800308a:	7932      	ldrb	r2, [r6, #4]
 800308c:	78f1      	ldrb	r1, [r6, #3]
 800308e:	79b3      	ldrb	r3, [r6, #6]
 8003090:	0412      	lsls	r2, r2, #16
 8003092:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8003096:	7972      	ldrb	r2, [r6, #5]
 8003098:	430b      	orrs	r3, r1
 800309a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 800309e:	2f07      	cmp	r7, #7
 80030a0:	f04f 0300 	mov.w	r3, #0
 80030a4:	61a2      	str	r2, [r4, #24]
 80030a6:	61e3      	str	r3, [r4, #28]
 80030a8:	6223      	str	r3, [r4, #32]
 80030aa:	dd1f      	ble.n	80030ec <AES_CCM_Decrypt_Init+0x170>
 80030ac:	3f07      	subs	r7, #7
 80030ae:	469c      	mov	ip, r3
 80030b0:	e007      	b.n	80030c2 <AES_CCM_Decrypt_Init+0x146>
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	bfb8      	it	lt
 80030b6:	1cda      	addlt	r2, r3, #3
 80030b8:	f022 0203 	bic.w	r2, r2, #3
 80030bc:	4422      	add	r2, r4
 80030be:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 80030c2:	18f5      	adds	r5, r6, r3
 80030c4:	43d8      	mvns	r0, r3
 80030c6:	79e9      	ldrb	r1, [r5, #7]
 80030c8:	f000 0003 	and.w	r0, r0, #3
 80030cc:	00c0      	lsls	r0, r0, #3
 80030ce:	4081      	lsls	r1, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	461a      	mov	r2, r3
 80030d4:	bfb8      	it	lt
 80030d6:	1cda      	addlt	r2, r3, #3
 80030d8:	f022 0203 	bic.w	r2, r2, #3
 80030dc:	3301      	adds	r3, #1
 80030de:	4422      	add	r2, r4
 80030e0:	ea4c 0101 	orr.w	r1, ip, r1
 80030e4:	42bb      	cmp	r3, r7
 80030e6:	61d1      	str	r1, [r2, #28]
 80030e8:	461a      	mov	r2, r3
 80030ea:	d1e2      	bne.n	80030b2 <AES_CCM_Decrypt_Init+0x136>
 80030ec:	6a23      	ldr	r3, [r4, #32]
 80030ee:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80030f0:	f043 0301 	orr.w	r3, r3, #1
 80030f4:	6223      	str	r3, [r4, #32]
 80030f6:	2800      	cmp	r0, #0
 80030f8:	f43f af55 	beq.w	8002fa6 <AES_CCM_Decrypt_Init+0x2a>
 80030fc:	2300      	movs	r3, #0
 80030fe:	f5b0 4f7f 	cmp.w	r0, #65280	; 0xff00
 8003102:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
 8003106:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
 800310a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 800310e:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
 8003112:	db19      	blt.n	8003148 <AES_CCM_Decrypt_Init+0x1cc>
 8003114:	0c02      	lsrs	r2, r0, #16
 8003116:	ea6f 32c2 	mvn.w	r2, r2, lsl #15
 800311a:	0400      	lsls	r0, r0, #16
 800311c:	ea6f 32d2 	mvn.w	r2, r2, lsr #15
 8003120:	2106      	movs	r1, #6
 8003122:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
 8003126:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
 800312a:	4618      	mov	r0, r3
 800312c:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
 8003130:	e739      	b.n	8002fa6 <AES_CCM_Decrypt_Init+0x2a>
 8003132:	4608      	mov	r0, r1
 8003134:	461a      	mov	r2, r3
 8003136:	60a1      	str	r1, [r4, #8]
 8003138:	4639      	mov	r1, r7
 800313a:	f7fe ff15 	bl	8001f68 <AES_keyschedule_enc>
 800313e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003140:	6925      	ldr	r5, [r4, #16]
 8003142:	68e2      	ldr	r2, [r4, #12]
 8003144:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003146:	e747      	b.n	8002fd8 <AES_CCM_Decrypt_Init+0x5c>
 8003148:	0400      	lsls	r0, r0, #16
 800314a:	2202      	movs	r2, #2
 800314c:	f8c4 0138 	str.w	r0, [r4, #312]	; 0x138
 8003150:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
 8003154:	4618      	mov	r0, r3
 8003156:	e726      	b.n	8002fa6 <AES_CCM_Decrypt_Init+0x2a>

08003158 <AES_CCM_Decrypt_Append>:
 8003158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800315c:	4606      	mov	r6, r0
 800315e:	b08d      	sub	sp, #52	; 0x34
 8003160:	2000      	movs	r0, #0
 8003162:	460f      	mov	r7, r1
 8003164:	9200      	str	r2, [sp, #0]
 8003166:	4698      	mov	r8, r3
 8003168:	9008      	str	r0, [sp, #32]
 800316a:	9009      	str	r0, [sp, #36]	; 0x24
 800316c:	900a      	str	r0, [sp, #40]	; 0x28
 800316e:	900b      	str	r0, [sp, #44]	; 0x2c
 8003170:	b16e      	cbz	r6, 800318e <AES_CCM_Decrypt_Append+0x36>
 8003172:	b161      	cbz	r1, 800318e <AES_CCM_Decrypt_Append+0x36>
 8003174:	b15b      	cbz	r3, 800318e <AES_CCM_Decrypt_Append+0x36>
 8003176:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003178:	b14a      	cbz	r2, 800318e <AES_CCM_Decrypt_Append+0x36>
 800317a:	f896 c004 	ldrb.w	ip, [r6, #4]
 800317e:	f01c 0c06 	ands.w	ip, ip, #6
 8003182:	d009      	beq.n	8003198 <AES_CCM_Decrypt_Append+0x40>
 8003184:	f640 401e 	movw	r0, #3102	; 0xc1e
 8003188:	b00d      	add	sp, #52	; 0x34
 800318a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800318e:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 8003192:	b00d      	add	sp, #52	; 0x34
 8003194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003198:	9b00      	ldr	r3, [sp, #0]
 800319a:	2b0f      	cmp	r3, #15
 800319c:	f340 81aa 	ble.w	80034f4 <AES_CCM_Decrypt_Append+0x39c>
 80031a0:	3b10      	subs	r3, #16
 80031a2:	f023 030f 	bic.w	r3, r3, #15
 80031a6:	f106 0214 	add.w	r2, r6, #20
 80031aa:	f103 0b10 	add.w	fp, r3, #16
 80031ae:	9202      	str	r2, [sp, #8]
 80031b0:	f106 0324 	add.w	r3, r6, #36	; 0x24
 80031b4:	aa04      	add	r2, sp, #16
 80031b6:	46e2      	mov	sl, ip
 80031b8:	f106 0948 	add.w	r9, r6, #72	; 0x48
 80031bc:	9303      	str	r3, [sp, #12]
 80031be:	460d      	mov	r5, r1
 80031c0:	4644      	mov	r4, r8
 80031c2:	9201      	str	r2, [sp, #4]
 80031c4:	9802      	ldr	r0, [sp, #8]
 80031c6:	a908      	add	r1, sp, #32
 80031c8:	464a      	mov	r2, r9
 80031ca:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80031cc:	f7fe feea 	bl	8001fa4 <AES_general_SW_enc>
 80031d0:	6a32      	ldr	r2, [r6, #32]
 80031d2:	9b08      	ldr	r3, [sp, #32]
 80031d4:	3201      	adds	r2, #1
 80031d6:	6232      	str	r2, [r6, #32]
 80031d8:	7868      	ldrb	r0, [r5, #1]
 80031da:	f817 200a 	ldrb.w	r2, [r7, sl]
 80031de:	78e9      	ldrb	r1, [r5, #3]
 80031e0:	0400      	lsls	r0, r0, #16
 80031e2:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 80031e6:	78aa      	ldrb	r2, [r5, #2]
 80031e8:	4308      	orrs	r0, r1
 80031ea:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80031ee:	4058      	eors	r0, r3
 80031f0:	0a01      	lsrs	r1, r0, #8
 80031f2:	0c02      	lsrs	r2, r0, #16
 80031f4:	0e03      	lsrs	r3, r0, #24
 80031f6:	70e0      	strb	r0, [r4, #3]
 80031f8:	70a1      	strb	r1, [r4, #2]
 80031fa:	7062      	strb	r2, [r4, #1]
 80031fc:	f808 300a 	strb.w	r3, [r8, sl]
 8003200:	796b      	ldrb	r3, [r5, #5]
 8003202:	7929      	ldrb	r1, [r5, #4]
 8003204:	79ea      	ldrb	r2, [r5, #7]
 8003206:	041b      	lsls	r3, r3, #16
 8003208:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800320c:	79a9      	ldrb	r1, [r5, #6]
 800320e:	4313      	orrs	r3, r2
 8003210:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003212:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003216:	4053      	eors	r3, r2
 8003218:	0a1a      	lsrs	r2, r3, #8
 800321a:	f8d6 e024 	ldr.w	lr, [r6, #36]	; 0x24
 800321e:	0c19      	lsrs	r1, r3, #16
 8003220:	71a2      	strb	r2, [r4, #6]
 8003222:	0e1a      	lsrs	r2, r3, #24
 8003224:	71e3      	strb	r3, [r4, #7]
 8003226:	7161      	strb	r1, [r4, #5]
 8003228:	7122      	strb	r2, [r4, #4]
 800322a:	7a6a      	ldrb	r2, [r5, #9]
 800322c:	7a29      	ldrb	r1, [r5, #8]
 800322e:	0412      	lsls	r2, r2, #16
 8003230:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003234:	7ae9      	ldrb	r1, [r5, #11]
 8003236:	ea80 0e0e 	eor.w	lr, r0, lr
 800323a:	430a      	orrs	r2, r1
 800323c:	7aa9      	ldrb	r1, [r5, #10]
 800323e:	9008      	str	r0, [sp, #32]
 8003240:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003242:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003246:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8003248:	4042      	eors	r2, r0
 800324a:	4059      	eors	r1, r3
 800324c:	0a10      	lsrs	r0, r2, #8
 800324e:	9309      	str	r3, [sp, #36]	; 0x24
 8003250:	f8cd e010 	str.w	lr, [sp, #16]
 8003254:	0c13      	lsrs	r3, r2, #16
 8003256:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 800325a:	72e2      	strb	r2, [r4, #11]
 800325c:	920a      	str	r2, [sp, #40]	; 0x28
 800325e:	9105      	str	r1, [sp, #20]
 8003260:	72a0      	strb	r0, [r4, #10]
 8003262:	f884 e008 	strb.w	lr, [r4, #8]
 8003266:	7263      	strb	r3, [r4, #9]
 8003268:	7b69      	ldrb	r1, [r5, #13]
 800326a:	7b28      	ldrb	r0, [r5, #12]
 800326c:	7beb      	ldrb	r3, [r5, #15]
 800326e:	0409      	lsls	r1, r1, #16
 8003270:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
 8003274:	7ba8      	ldrb	r0, [r5, #14]
 8003276:	4319      	orrs	r1, r3
 8003278:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800327a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 800327e:	4059      	eors	r1, r3
 8003280:	0a0b      	lsrs	r3, r1, #8
 8003282:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8003284:	ea4f 4e11 	mov.w	lr, r1, lsr #16
 8003288:	73a3      	strb	r3, [r4, #14]
 800328a:	0e0b      	lsrs	r3, r1, #24
 800328c:	73e1      	strb	r1, [r4, #15]
 800328e:	f884 e00d 	strb.w	lr, [r4, #13]
 8003292:	7323      	strb	r3, [r4, #12]
 8003294:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003296:	4042      	eors	r2, r0
 8003298:	ea81 0e03 	eor.w	lr, r1, r3
 800329c:	910b      	str	r1, [sp, #44]	; 0x2c
 800329e:	9206      	str	r2, [sp, #24]
 80032a0:	f10a 0a10 	add.w	sl, sl, #16
 80032a4:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80032a6:	9801      	ldr	r0, [sp, #4]
 80032a8:	9903      	ldr	r1, [sp, #12]
 80032aa:	464a      	mov	r2, r9
 80032ac:	f8cd e01c 	str.w	lr, [sp, #28]
 80032b0:	f7fe fe78 	bl	8001fa4 <AES_general_SW_enc>
 80032b4:	45da      	cmp	sl, fp
 80032b6:	f105 0510 	add.w	r5, r5, #16
 80032ba:	f104 0410 	add.w	r4, r4, #16
 80032be:	d181      	bne.n	80031c4 <AES_CCM_Decrypt_Append+0x6c>
 80032c0:	9b00      	ldr	r3, [sp, #0]
 80032c2:	459b      	cmp	fp, r3
 80032c4:	db04      	blt.n	80032d0 <AES_CCM_Decrypt_Append+0x178>
 80032c6:	9a00      	ldr	r2, [sp, #0]
 80032c8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80032ca:	2000      	movs	r0, #0
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	e760      	b.n	8003192 <AES_CCM_Decrypt_Append+0x3a>
 80032d0:	7933      	ldrb	r3, [r6, #4]
 80032d2:	f106 0a48 	add.w	sl, r6, #72	; 0x48
 80032d6:	f043 0304 	orr.w	r3, r3, #4
 80032da:	7133      	strb	r3, [r6, #4]
 80032dc:	4652      	mov	r2, sl
 80032de:	a908      	add	r1, sp, #32
 80032e0:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80032e2:	f106 0014 	add.w	r0, r6, #20
 80032e6:	f7fe fe5d 	bl	8001fa4 <AES_general_SW_enc>
 80032ea:	9a00      	ldr	r2, [sp, #0]
 80032ec:	ebcb 0102 	rsb	r1, fp, r2
 80032f0:	2900      	cmp	r1, #0
 80032f2:	460b      	mov	r3, r1
 80032f4:	bfb8      	it	lt
 80032f6:	1ccb      	addlt	r3, r1, #3
 80032f8:	109b      	asrs	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f340 80fc 	ble.w	80034f8 <AES_CCM_Decrypt_Append+0x3a0>
 8003300:	f10b 0503 	add.w	r5, fp, #3
 8003304:	5d7a      	ldrb	r2, [r7, r5]
 8003306:	f817 c00b 	ldrb.w	ip, [r7, fp]
 800330a:	f10b 0402 	add.w	r4, fp, #2
 800330e:	f817 e004 	ldrb.w	lr, [r7, r4]
 8003312:	f10b 0001 	add.w	r0, fp, #1
 8003316:	ea42 620c 	orr.w	r2, r2, ip, lsl #24
 800331a:	f817 c000 	ldrb.w	ip, [r7, r0]
 800331e:	ea42 2e0e 	orr.w	lr, r2, lr, lsl #8
 8003322:	9a08      	ldr	r2, [sp, #32]
 8003324:	ea4e 4e0c 	orr.w	lr, lr, ip, lsl #16
 8003328:	ea8e 0202 	eor.w	r2, lr, r2
 800332c:	f808 2005 	strb.w	r2, [r8, r5]
 8003330:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8003334:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003338:	0e15      	lsrs	r5, r2, #24
 800333a:	f808 c004 	strb.w	ip, [r8, r4]
 800333e:	f808 e000 	strb.w	lr, [r8, r0]
 8003342:	f808 500b 	strb.w	r5, [r8, fp]
 8003346:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8003348:	9208      	str	r2, [sp, #32]
 800334a:	2b01      	cmp	r3, #1
 800334c:	ea82 0200 	eor.w	r2, r2, r0
 8003350:	9204      	str	r2, [sp, #16]
 8003352:	f340 8087 	ble.w	8003464 <AES_CCM_Decrypt_Append+0x30c>
 8003356:	f10b 0004 	add.w	r0, fp, #4
 800335a:	f10b 0e07 	add.w	lr, fp, #7
 800335e:	f817 9000 	ldrb.w	r9, [r7, r0]
 8003362:	f817 200e 	ldrb.w	r2, [r7, lr]
 8003366:	f10b 0506 	add.w	r5, fp, #6
 800336a:	f817 c005 	ldrb.w	ip, [r7, r5]
 800336e:	f10b 0405 	add.w	r4, fp, #5
 8003372:	ea42 6209 	orr.w	r2, r2, r9, lsl #24
 8003376:	f817 9004 	ldrb.w	r9, [r7, r4]
 800337a:	ea42 2c0c 	orr.w	ip, r2, ip, lsl #8
 800337e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003380:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
 8003384:	ea8c 0202 	eor.w	r2, ip, r2
 8003388:	f808 200e 	strb.w	r2, [r8, lr]
 800338c:	ea4f 2912 	mov.w	r9, r2, lsr #8
 8003390:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8003394:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8003398:	f808 9005 	strb.w	r9, [r8, r5]
 800339c:	f808 c004 	strb.w	ip, [r8, r4]
 80033a0:	f808 e000 	strb.w	lr, [r8, r0]
 80033a4:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 80033a6:	9209      	str	r2, [sp, #36]	; 0x24
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	ea82 0200 	eor.w	r2, r2, r0
 80033ae:	9205      	str	r2, [sp, #20]
 80033b0:	dd58      	ble.n	8003464 <AES_CCM_Decrypt_Append+0x30c>
 80033b2:	f10b 0008 	add.w	r0, fp, #8
 80033b6:	f10b 0e0b 	add.w	lr, fp, #11
 80033ba:	f817 9000 	ldrb.w	r9, [r7, r0]
 80033be:	f817 200e 	ldrb.w	r2, [r7, lr]
 80033c2:	f10b 050a 	add.w	r5, fp, #10
 80033c6:	f817 c005 	ldrb.w	ip, [r7, r5]
 80033ca:	f10b 0409 	add.w	r4, fp, #9
 80033ce:	ea42 6209 	orr.w	r2, r2, r9, lsl #24
 80033d2:	f817 9004 	ldrb.w	r9, [r7, r4]
 80033d6:	ea42 2c0c 	orr.w	ip, r2, ip, lsl #8
 80033da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80033dc:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
 80033e0:	ea8c 0202 	eor.w	r2, ip, r2
 80033e4:	f808 200e 	strb.w	r2, [r8, lr]
 80033e8:	ea4f 2912 	mov.w	r9, r2, lsr #8
 80033ec:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80033f0:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80033f4:	f808 9005 	strb.w	r9, [r8, r5]
 80033f8:	f808 c004 	strb.w	ip, [r8, r4]
 80033fc:	f808 e000 	strb.w	lr, [r8, r0]
 8003400:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8003402:	920a      	str	r2, [sp, #40]	; 0x28
 8003404:	2b03      	cmp	r3, #3
 8003406:	ea82 0200 	eor.w	r2, r2, r0
 800340a:	9206      	str	r2, [sp, #24]
 800340c:	dd2a      	ble.n	8003464 <AES_CCM_Decrypt_Append+0x30c>
 800340e:	f10b 000c 	add.w	r0, fp, #12
 8003412:	f10b 0e0f 	add.w	lr, fp, #15
 8003416:	f817 9000 	ldrb.w	r9, [r7, r0]
 800341a:	f817 200e 	ldrb.w	r2, [r7, lr]
 800341e:	f10b 040d 	add.w	r4, fp, #13
 8003422:	f817 c004 	ldrb.w	ip, [r7, r4]
 8003426:	f10b 050e 	add.w	r5, fp, #14
 800342a:	ea42 6209 	orr.w	r2, r2, r9, lsl #24
 800342e:	f817 9005 	ldrb.w	r9, [r7, r5]
 8003432:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
 8003436:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003438:	ea4c 2c09 	orr.w	ip, ip, r9, lsl #8
 800343c:	ea8c 0202 	eor.w	r2, ip, r2
 8003440:	f808 200e 	strb.w	r2, [r8, lr]
 8003444:	ea4f 2912 	mov.w	r9, r2, lsr #8
 8003448:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800344c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8003450:	f808 9005 	strb.w	r9, [r8, r5]
 8003454:	f808 c004 	strb.w	ip, [r8, r4]
 8003458:	f808 e000 	strb.w	lr, [r8, r0]
 800345c:	6b30      	ldr	r0, [r6, #48]	; 0x30
 800345e:	920b      	str	r2, [sp, #44]	; 0x2c
 8003460:	4042      	eors	r2, r0
 8003462:	9207      	str	r2, [sp, #28]
 8003464:	ebc3 7283 	rsb	r2, r3, r3, lsl #30
 8003468:	0092      	lsls	r2, r2, #2
 800346a:	f103 0c01 	add.w	ip, r3, #1
 800346e:	eb06 0083 	add.w	r0, r6, r3, lsl #2
 8003472:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4411      	add	r1, r2
 800347a:	a80c      	add	r0, sp, #48	; 0x30
 800347c:	4418      	add	r0, r3
 800347e:	2900      	cmp	r1, #0
 8003480:	f840 ec20 	str.w	lr, [r0, #-32]
 8003484:	dd1f      	ble.n	80034c6 <AES_CCM_Decrypt_Append+0x36e>
 8003486:	eb0b 0203 	add.w	r2, fp, r3
 800348a:	f850 4c10 	ldr.w	r4, [r0, #-16]
 800348e:	4417      	add	r7, r2
 8003490:	4490      	add	r8, r2
 8003492:	2018      	movs	r0, #24
 8003494:	2200      	movs	r2, #0
 8003496:	5cbd      	ldrb	r5, [r7, r2]
 8003498:	4085      	lsls	r5, r0
 800349a:	406c      	eors	r4, r5
 800349c:	fa24 f500 	lsr.w	r5, r4, r0
 80034a0:	fa5f f985 	uxtb.w	r9, r5
 80034a4:	fa09 f900 	lsl.w	r9, r9, r0
 80034a8:	f808 5002 	strb.w	r5, [r8, r2]
 80034ac:	3201      	adds	r2, #1
 80034ae:	428a      	cmp	r2, r1
 80034b0:	ea8e 0e09 	eor.w	lr, lr, r9
 80034b4:	f1a0 0008 	sub.w	r0, r0, #8
 80034b8:	d1ed      	bne.n	8003496 <AES_CCM_Decrypt_Append+0x33e>
 80034ba:	aa0c      	add	r2, sp, #48	; 0x30
 80034bc:	4413      	add	r3, r2
 80034be:	f843 4c10 	str.w	r4, [r3, #-16]
 80034c2:	f843 ec20 	str.w	lr, [r3, #-32]
 80034c6:	f1bc 0f03 	cmp.w	ip, #3
 80034ca:	dc1a      	bgt.n	8003502 <AES_CCM_Decrypt_Append+0x3aa>
 80034cc:	ea4f 008c 	mov.w	r0, ip, lsl #2
 80034d0:	ab04      	add	r3, sp, #16
 80034d2:	f100 0124 	add.w	r1, r0, #36	; 0x24
 80034d6:	f1c0 0210 	rsb	r2, r0, #16
 80034da:	4431      	add	r1, r6
 80034dc:	4418      	add	r0, r3
 80034de:	9301      	str	r3, [sp, #4]
 80034e0:	f000 f8fe 	bl	80036e0 <memcpy>
 80034e4:	9801      	ldr	r0, [sp, #4]
 80034e6:	4652      	mov	r2, sl
 80034e8:	f106 0124 	add.w	r1, r6, #36	; 0x24
 80034ec:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80034ee:	f7fe fd59 	bl	8001fa4 <AES_general_SW_enc>
 80034f2:	e6e8      	b.n	80032c6 <AES_CCM_Decrypt_Append+0x16e>
 80034f4:	46e3      	mov	fp, ip
 80034f6:	e6e3      	b.n	80032c0 <AES_CCM_Decrypt_Append+0x168>
 80034f8:	2200      	movs	r2, #0
 80034fa:	4613      	mov	r3, r2
 80034fc:	f04f 0c01 	mov.w	ip, #1
 8003500:	e7b5      	b.n	800346e <AES_CCM_Decrypt_Append+0x316>
 8003502:	ab04      	add	r3, sp, #16
 8003504:	9301      	str	r3, [sp, #4]
 8003506:	4618      	mov	r0, r3
 8003508:	e7ed      	b.n	80034e6 <AES_CCM_Decrypt_Append+0x38e>
 800350a:	bf00      	nop

0800350c <AES_CCM_Decrypt_Finish>:
 800350c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003510:	2300      	movs	r3, #0
 8003512:	b085      	sub	sp, #20
 8003514:	4680      	mov	r8, r0
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	9301      	str	r3, [sp, #4]
 800351a:	9302      	str	r3, [sp, #8]
 800351c:	9303      	str	r3, [sp, #12]
 800351e:	2800      	cmp	r0, #0
 8003520:	f000 80b1 	beq.w	8003686 <AES_CCM_Decrypt_Finish+0x17a>
 8003524:	2a00      	cmp	r2, #0
 8003526:	f000 80ae 	beq.w	8003686 <AES_CCM_Decrypt_Finish+0x17a>
 800352a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800352c:	b111      	cbz	r1, 8003534 <AES_CCM_Decrypt_Finish+0x28>
 800352e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8003530:	2910      	cmp	r1, #16
 8003532:	d904      	bls.n	800353e <AES_CCM_Decrypt_Finish+0x32>
 8003534:	f640 401f 	movw	r0, #3103	; 0xc1f
 8003538:	b005      	add	sp, #20
 800353a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800353e:	6013      	str	r3, [r2, #0]
 8003540:	7901      	ldrb	r1, [r0, #4]
 8003542:	6902      	ldr	r2, [r0, #16]
 8003544:	f041 0102 	orr.w	r1, r1, #2
 8003548:	2a0b      	cmp	r2, #11
 800354a:	7101      	strb	r1, [r0, #4]
 800354c:	f300 8091 	bgt.w	8003672 <AES_CCM_Decrypt_Finish+0x166>
 8003550:	f8c8 3020 	str.w	r3, [r8, #32]
 8003554:	f108 0014 	add.w	r0, r8, #20
 8003558:	4669      	mov	r1, sp
 800355a:	f108 0248 	add.w	r2, r8, #72	; 0x48
 800355e:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 8003562:	f7fe fd1f 	bl	8001fa4 <AES_general_SW_enc>
 8003566:	f8d8 903c 	ldr.w	r9, [r8, #60]	; 0x3c
 800356a:	9e01      	ldr	r6, [sp, #4]
 800356c:	f1b9 0f00 	cmp.w	r9, #0
 8003570:	9c02      	ldr	r4, [sp, #8]
 8003572:	9b03      	ldr	r3, [sp, #12]
 8003574:	9800      	ldr	r0, [sp, #0]
 8003576:	46cc      	mov	ip, r9
 8003578:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
 800357c:	bfb8      	it	lt
 800357e:	f109 0c03 	addlt.w	ip, r9, #3
 8003582:	f8d8 5028 	ldr.w	r5, [r8, #40]	; 0x28
 8003586:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
 800358a:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 800358e:	ea4f 0cac 	mov.w	ip, ip, asr #2
 8003592:	4047      	eors	r7, r0
 8003594:	4075      	eors	r5, r6
 8003596:	4061      	eors	r1, r4
 8003598:	4053      	eors	r3, r2
 800359a:	f1bc 0f00 	cmp.w	ip, #0
 800359e:	9700      	str	r7, [sp, #0]
 80035a0:	9501      	str	r5, [sp, #4]
 80035a2:	9102      	str	r1, [sp, #8]
 80035a4:	9303      	str	r3, [sp, #12]
 80035a6:	dd73      	ble.n	8003690 <AES_CCM_Decrypt_Finish+0x184>
 80035a8:	f8d8 0038 	ldr.w	r0, [r8, #56]	; 0x38
 80035ac:	f1bc 0f01 	cmp.w	ip, #1
 80035b0:	7804      	ldrb	r4, [r0, #0]
 80035b2:	78c2      	ldrb	r2, [r0, #3]
 80035b4:	7886      	ldrb	r6, [r0, #2]
 80035b6:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 80035ba:	7844      	ldrb	r4, [r0, #1]
 80035bc:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
 80035c0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80035c4:	ea82 0707 	eor.w	r7, r2, r7
 80035c8:	dd2b      	ble.n	8003622 <AES_CCM_Decrypt_Finish+0x116>
 80035ca:	79c2      	ldrb	r2, [r0, #7]
 80035cc:	7906      	ldrb	r6, [r0, #4]
 80035ce:	7984      	ldrb	r4, [r0, #6]
 80035d0:	ea42 6606 	orr.w	r6, r2, r6, lsl #24
 80035d4:	7942      	ldrb	r2, [r0, #5]
 80035d6:	ea46 2604 	orr.w	r6, r6, r4, lsl #8
 80035da:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 80035de:	4075      	eors	r5, r6
 80035e0:	f1bc 0f02 	cmp.w	ip, #2
 80035e4:	ea47 0705 	orr.w	r7, r7, r5
 80035e8:	dd1b      	ble.n	8003622 <AES_CCM_Decrypt_Finish+0x116>
 80035ea:	7ac2      	ldrb	r2, [r0, #11]
 80035ec:	7a04      	ldrb	r4, [r0, #8]
 80035ee:	7a85      	ldrb	r5, [r0, #10]
 80035f0:	ea42 6404 	orr.w	r4, r2, r4, lsl #24
 80035f4:	7a42      	ldrb	r2, [r0, #9]
 80035f6:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 80035fa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80035fe:	4061      	eors	r1, r4
 8003600:	f1bc 0f03 	cmp.w	ip, #3
 8003604:	ea47 0701 	orr.w	r7, r7, r1
 8003608:	dd0b      	ble.n	8003622 <AES_CCM_Decrypt_Finish+0x116>
 800360a:	7b01      	ldrb	r1, [r0, #12]
 800360c:	7bc2      	ldrb	r2, [r0, #15]
 800360e:	7b44      	ldrb	r4, [r0, #13]
 8003610:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003614:	7b81      	ldrb	r1, [r0, #14]
 8003616:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800361a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800361e:	4053      	eors	r3, r2
 8003620:	431f      	orrs	r7, r3
 8003622:	ebcc 748c 	rsb	r4, ip, ip, lsl #30
 8003626:	00a4      	lsls	r4, r4, #2
 8003628:	44a1      	add	r9, r4
 800362a:	f1b9 0f00 	cmp.w	r9, #0
 800362e:	dd17      	ble.n	8003660 <AES_CCM_Decrypt_Finish+0x154>
 8003630:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003634:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
 8003638:	ab04      	add	r3, sp, #16
 800363a:	4463      	add	r3, ip
 800363c:	44e1      	add	r9, ip
 800363e:	f853 5c10 	ldr.w	r5, [r3, #-16]
 8003642:	eb02 0409 	add.w	r4, r2, r9
 8003646:	2318      	movs	r3, #24
 8003648:	4462      	add	r2, ip
 800364a:	fa25 f103 	lsr.w	r1, r5, r3
 800364e:	f812 0b01 	ldrb.w	r0, [r2], #1
 8003652:	3b08      	subs	r3, #8
 8003654:	4041      	eors	r1, r0
 8003656:	b2c9      	uxtb	r1, r1
 8003658:	42a2      	cmp	r2, r4
 800365a:	ea47 0701 	orr.w	r7, r7, r1
 800365e:	d1f4      	bne.n	800364a <AES_CCM_Decrypt_Finish+0x13e>
 8003660:	2f00      	cmp	r7, #0
 8003662:	f240 30eb 	movw	r0, #1003	; 0x3eb
 8003666:	bf18      	it	ne
 8003668:	f44f 707b 	movne.w	r0, #1004	; 0x3ec
 800366c:	b005      	add	sp, #20
 800366e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003672:	f1c2 020f 	rsb	r2, r2, #15
 8003676:	f04f 33ff 	mov.w	r3, #4294967295
 800367a:	00d2      	lsls	r2, r2, #3
 800367c:	fa03 f202 	lsl.w	r2, r3, r2
 8003680:	6a03      	ldr	r3, [r0, #32]
 8003682:	4013      	ands	r3, r2
 8003684:	e764      	b.n	8003550 <AES_CCM_Decrypt_Finish+0x44>
 8003686:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 800368a:	b005      	add	sp, #20
 800368c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003690:	2400      	movs	r4, #0
 8003692:	4627      	mov	r7, r4
 8003694:	46a4      	mov	ip, r4
 8003696:	e7c7      	b.n	8003628 <AES_CCM_Decrypt_Finish+0x11c>

08003698 <__libc_init_array>:
 8003698:	b570      	push	{r4, r5, r6, lr}
 800369a:	2600      	movs	r6, #0
 800369c:	4d0c      	ldr	r5, [pc, #48]	; (80036d0 <__libc_init_array+0x38>)
 800369e:	4c0d      	ldr	r4, [pc, #52]	; (80036d4 <__libc_init_array+0x3c>)
 80036a0:	1b64      	subs	r4, r4, r5
 80036a2:	10a4      	asrs	r4, r4, #2
 80036a4:	42a6      	cmp	r6, r4
 80036a6:	d109      	bne.n	80036bc <__libc_init_array+0x24>
 80036a8:	f000 f830 	bl	800370c <_init>
 80036ac:	2600      	movs	r6, #0
 80036ae:	4d0a      	ldr	r5, [pc, #40]	; (80036d8 <__libc_init_array+0x40>)
 80036b0:	4c0a      	ldr	r4, [pc, #40]	; (80036dc <__libc_init_array+0x44>)
 80036b2:	1b64      	subs	r4, r4, r5
 80036b4:	10a4      	asrs	r4, r4, #2
 80036b6:	42a6      	cmp	r6, r4
 80036b8:	d105      	bne.n	80036c6 <__libc_init_array+0x2e>
 80036ba:	bd70      	pop	{r4, r5, r6, pc}
 80036bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80036c0:	4798      	blx	r3
 80036c2:	3601      	adds	r6, #1
 80036c4:	e7ee      	b.n	80036a4 <__libc_init_array+0xc>
 80036c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80036ca:	4798      	blx	r3
 80036cc:	3601      	adds	r6, #1
 80036ce:	e7f2      	b.n	80036b6 <__libc_init_array+0x1e>
 80036d0:	08003c80 	.word	0x08003c80
 80036d4:	08003c80 	.word	0x08003c80
 80036d8:	08003c80 	.word	0x08003c80
 80036dc:	08003c84 	.word	0x08003c84

080036e0 <memcpy>:
 80036e0:	440a      	add	r2, r1
 80036e2:	4291      	cmp	r1, r2
 80036e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80036e8:	d100      	bne.n	80036ec <memcpy+0xc>
 80036ea:	4770      	bx	lr
 80036ec:	b510      	push	{r4, lr}
 80036ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036f2:	4291      	cmp	r1, r2
 80036f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80036f8:	d1f9      	bne.n	80036ee <memcpy+0xe>
 80036fa:	bd10      	pop	{r4, pc}

080036fc <memset>:
 80036fc:	4603      	mov	r3, r0
 80036fe:	4402      	add	r2, r0
 8003700:	4293      	cmp	r3, r2
 8003702:	d100      	bne.n	8003706 <memset+0xa>
 8003704:	4770      	bx	lr
 8003706:	f803 1b01 	strb.w	r1, [r3], #1
 800370a:	e7f9      	b.n	8003700 <memset+0x4>

0800370c <_init>:
 800370c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800370e:	bf00      	nop
 8003710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003712:	bc08      	pop	{r3}
 8003714:	469e      	mov	lr, r3
 8003716:	4770      	bx	lr

08003718 <_fini>:
 8003718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800371a:	bf00      	nop
 800371c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800371e:	bc08      	pop	{r3}
 8003720:	469e      	mov	lr, r3
 8003722:	4770      	bx	lr
