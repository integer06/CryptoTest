
CryptoTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000360c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  08003718  08003718  00013718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c74  08003c74  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08003c74  08003c74  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c74  08003c74  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c74  08003c74  00013c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c78  08003c78  00013c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08003c7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  2000002c  08003ca8  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08003ca8  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000097d4  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017d7  00000000  00000000  00029829  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b0  00000000  00000000  0002b000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f8  00000000  00000000  0002b9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001792d  00000000  00000000  0002c2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b049  00000000  00000000  00043bd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089b2a  00000000  00000000  0004ec1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000d5  00000000  00000000  000d8748  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002804  00000000  00000000  000d8820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000002c 	.word	0x2000002c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003700 	.word	0x08003700

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000030 	.word	0x20000030
 8000148:	08003700 	.word	0x08003700

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
	int32_t status = AES_SUCCESS;
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000156:	f000 fb61 	bl	800081c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800015a:	f000 f875 	bl	8000248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015e:	f000 f91d 	bl	800039c <MX_GPIO_Init>
  MX_CRC_Init();
 8000162:	f000 f8b7 	bl	80002d4 <MX_CRC_Init>
  MX_TIM1_Init();
 8000166:	f000 f8c9 	bl	80002fc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  /* Encrypt DATA with AES in CCM mode and generate authentication TAG */
  /* Шифруем блок */

  status = STM32_AES_CCM_Encrypt( (uint8_t *) HeaderMessage, HeaderLength , (uint8_t *) Plaintext,
 800016a:	4b2a      	ldr	r3, [pc, #168]	; (8000214 <main+0xc8>)
 800016c:	6819      	ldr	r1, [r3, #0]
 800016e:	4b2a      	ldr	r3, [pc, #168]	; (8000218 <main+0xcc>)
 8000170:	681b      	ldr	r3, [r3, #0]
 8000172:	4a2a      	ldr	r2, [pc, #168]	; (800021c <main+0xd0>)
 8000174:	9205      	str	r2, [sp, #20]
 8000176:	4a2a      	ldr	r2, [pc, #168]	; (8000220 <main+0xd4>)
 8000178:	9204      	str	r2, [sp, #16]
 800017a:	4a2a      	ldr	r2, [pc, #168]	; (8000224 <main+0xd8>)
 800017c:	9203      	str	r2, [sp, #12]
 800017e:	2207      	movs	r2, #7
 8000180:	9202      	str	r2, [sp, #8]
 8000182:	4a29      	ldr	r2, [pc, #164]	; (8000228 <main+0xdc>)
 8000184:	9201      	str	r2, [sp, #4]
 8000186:	4a29      	ldr	r2, [pc, #164]	; (800022c <main+0xe0>)
 8000188:	9200      	str	r2, [sp, #0]
 800018a:	4a29      	ldr	r2, [pc, #164]	; (8000230 <main+0xe4>)
 800018c:	4829      	ldr	r0, [pc, #164]	; (8000234 <main+0xe8>)
 800018e:	f000 f951 	bl	8000434 <STM32_AES_CCM_Encrypt>
 8000192:	6078      	str	r0, [r7, #4]
                                  InputLength, Key, IV, sizeof(IV), encrypt_OutputMessage,
                                  &encrypt_OutputMessageLength, &AuthenticationTAGLength);
  if (status == AES_SUCCESS)
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	2b00      	cmp	r3, #0
 8000198:	d10a      	bne.n	80001b0 <main+0x64>
  {

    if (Buffercmp(Expected_Ciphertext, encrypt_OutputMessage, CIPHER_TEXT_LENGTH) == PASSED)
 800019a:	2208      	movs	r2, #8
 800019c:	4921      	ldr	r1, [pc, #132]	; (8000224 <main+0xd8>)
 800019e:	4826      	ldr	r0, [pc, #152]	; (8000238 <main+0xec>)
 80001a0:	f000 fa41 	bl	8000626 <Buffercmp>
 80001a4:	4603      	mov	r3, r0
 80001a6:	2b01      	cmp	r3, #1
 80001a8:	d004      	beq.n	80001b4 <main+0x68>

    }
    else
    {

      Error_Handler();
 80001aa:	f000 fa5d 	bl	8000668 <Error_Handler>
 80001ae:	e001      	b.n	80001b4 <main+0x68>

    /* In case of encryption/decryption not success possible values of status:
    * AES_ERR_BAD_OPERATION, AES_ERR_BAD_CONTEXT, AES_ERR_BAD_PARAMETER
    */

    Error_Handler();
 80001b0:	f000 fa5a 	bl	8000668 <Error_Handler>
  /* Запускаем отсчте таймера */


  /* Расшифровываем блок */
  /* Decrypt DATA with AES in CCM mode and check the authentication TAG */
  status = STM32_AES_CCM_Decrypt( (uint8_t *) HeaderMessage, sizeof(HeaderMessage), (uint8_t *) encrypt_OutputMessage,
 80001b4:	4b1a      	ldr	r3, [pc, #104]	; (8000220 <main+0xd4>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	461a      	mov	r2, r3
 80001ba:	4b18      	ldr	r3, [pc, #96]	; (800021c <main+0xd0>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	9305      	str	r3, [sp, #20]
 80001c0:	4b1e      	ldr	r3, [pc, #120]	; (800023c <main+0xf0>)
 80001c2:	9304      	str	r3, [sp, #16]
 80001c4:	4b1e      	ldr	r3, [pc, #120]	; (8000240 <main+0xf4>)
 80001c6:	9303      	str	r3, [sp, #12]
 80001c8:	2307      	movs	r3, #7
 80001ca:	9302      	str	r3, [sp, #8]
 80001cc:	4b16      	ldr	r3, [pc, #88]	; (8000228 <main+0xdc>)
 80001ce:	9301      	str	r3, [sp, #4]
 80001d0:	4b16      	ldr	r3, [pc, #88]	; (800022c <main+0xe0>)
 80001d2:	9300      	str	r3, [sp, #0]
 80001d4:	4613      	mov	r3, r2
 80001d6:	4a13      	ldr	r2, [pc, #76]	; (8000224 <main+0xd8>)
 80001d8:	2108      	movs	r1, #8
 80001da:	4816      	ldr	r0, [pc, #88]	; (8000234 <main+0xe8>)
 80001dc:	f000 f9a3 	bl	8000526 <STM32_AES_CCM_Decrypt>
 80001e0:	6078      	str	r0, [r7, #4]
                                  encrypt_OutputMessageLength, Key, IV, sizeof(IV), decrypt_OutputMessage,
                                  &decrypt_OutputMessageLength, AuthenticationTAGLength);
  if (status == AUTHENTICATION_SUCCESSFUL)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80001e8:	4293      	cmp	r3, r2
 80001ea:	d10a      	bne.n	8000202 <main+0xb6>
  {

    if (Buffercmp(Plaintext, decrypt_OutputMessage, PLAINTEXT_LENGTH) == PASSED)
 80001ec:	2204      	movs	r2, #4
 80001ee:	4914      	ldr	r1, [pc, #80]	; (8000240 <main+0xf4>)
 80001f0:	480f      	ldr	r0, [pc, #60]	; (8000230 <main+0xe4>)
 80001f2:	f000 fa18 	bl	8000626 <Buffercmp>
 80001f6:	4603      	mov	r3, r0
 80001f8:	2b01      	cmp	r3, #1
 80001fa:	d004      	beq.n	8000206 <main+0xba>

    }
    else
    {

      Error_Handler();
 80001fc:	f000 fa34 	bl	8000668 <Error_Handler>
 8000200:	e001      	b.n	8000206 <main+0xba>
      *  of status:
      * AES_ERR_BAD_OPERATION, AES_ERR_BAD_CONTEXT, AES_ERR_BAD_PARAMETER,
      * AUTHENTICATION_FAILED
      */

    Error_Handler();
 8000202:	f000 fa31 	bl	8000668 <Error_Handler>

  /* Отправляем расшифрованный блок и потраченное на расшифровку время */


  /* Turn on the green led in an infinite loop in case of AES CCM operations are succssfuls*/
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000206:	2200      	movs	r2, #0
 8000208:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800020c:	480d      	ldr	r0, [pc, #52]	; (8000244 <main+0xf8>)
 800020e:	f000 fe15 	bl	8000e3c <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000212:	e7fe      	b.n	8000212 <main+0xc6>
 8000214:	20000000 	.word	0x20000000
 8000218:	20000004 	.word	0x20000004
 800021c:	20000050 	.word	0x20000050
 8000220:	20000048 	.word	0x20000048
 8000224:	20000054 	.word	0x20000054
 8000228:	20000018 	.word	0x20000018
 800022c:	20000008 	.word	0x20000008
 8000230:	08003730 	.word	0x08003730
 8000234:	08003728 	.word	0x08003728
 8000238:	08003734 	.word	0x08003734
 800023c:	2000004c 	.word	0x2000004c
 8000240:	20000124 	.word	0x20000124
 8000244:	40011000 	.word	0x40011000

08000248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b090      	sub	sp, #64	; 0x40
 800024c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024e:	f107 0318 	add.w	r3, r7, #24
 8000252:	2228      	movs	r2, #40	; 0x28
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f003 fa4a 	bl	80036f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]
 8000268:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800026a:	2301      	movs	r3, #1
 800026c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800026e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000272:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000274:	2300      	movs	r3, #0
 8000276:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000278:	2301      	movs	r3, #1
 800027a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800027c:	2302      	movs	r3, #2
 800027e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000280:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000284:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000286:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800028a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028c:	f107 0318 	add.w	r3, r7, #24
 8000290:	4618      	mov	r0, r3
 8000292:	f000 fdeb 	bl	8000e6c <HAL_RCC_OscConfig>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800029c:	f000 f9e4 	bl	8000668 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a0:	230f      	movs	r3, #15
 80002a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a4:	2302      	movs	r3, #2
 80002a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b2:	2300      	movs	r3, #0
 80002b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	2102      	movs	r1, #2
 80002ba:	4618      	mov	r0, r3
 80002bc:	f001 f856 	bl	800136c <HAL_RCC_ClockConfig>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002c6:	f000 f9cf 	bl	8000668 <Error_Handler>
  }
}
 80002ca:	bf00      	nop
 80002cc:	3740      	adds	r7, #64	; 0x40
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
	...

080002d4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80002d8:	4b06      	ldr	r3, [pc, #24]	; (80002f4 <MX_CRC_Init+0x20>)
 80002da:	4a07      	ldr	r2, [pc, #28]	; (80002f8 <MX_CRC_Init+0x24>)
 80002dc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80002de:	4805      	ldr	r0, [pc, #20]	; (80002f4 <MX_CRC_Init+0x20>)
 80002e0:	f000 fc0b 	bl	8000afa <HAL_CRC_Init>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80002ea:	f000 f9bd 	bl	8000668 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80002ee:	bf00      	nop
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	20000094 	.word	0x20000094
 80002f8:	40023000 	.word	0x40023000

080002fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b086      	sub	sp, #24
 8000300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000302:	f107 0308 	add.w	r3, r7, #8
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
 800030a:	605a      	str	r2, [r3, #4]
 800030c:	609a      	str	r2, [r3, #8]
 800030e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000310:	463b      	mov	r3, r7
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000318:	4b1e      	ldr	r3, [pc, #120]	; (8000394 <MX_TIM1_Init+0x98>)
 800031a:	4a1f      	ldr	r2, [pc, #124]	; (8000398 <MX_TIM1_Init+0x9c>)
 800031c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800031e:	4b1d      	ldr	r3, [pc, #116]	; (8000394 <MX_TIM1_Init+0x98>)
 8000320:	2200      	movs	r2, #0
 8000322:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000324:	4b1b      	ldr	r3, [pc, #108]	; (8000394 <MX_TIM1_Init+0x98>)
 8000326:	2200      	movs	r2, #0
 8000328:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800032a:	4b1a      	ldr	r3, [pc, #104]	; (8000394 <MX_TIM1_Init+0x98>)
 800032c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000330:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000332:	4b18      	ldr	r3, [pc, #96]	; (8000394 <MX_TIM1_Init+0x98>)
 8000334:	2200      	movs	r2, #0
 8000336:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000338:	4b16      	ldr	r3, [pc, #88]	; (8000394 <MX_TIM1_Init+0x98>)
 800033a:	2200      	movs	r2, #0
 800033c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800033e:	4b15      	ldr	r3, [pc, #84]	; (8000394 <MX_TIM1_Init+0x98>)
 8000340:	2200      	movs	r2, #0
 8000342:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000344:	4813      	ldr	r0, [pc, #76]	; (8000394 <MX_TIM1_Init+0x98>)
 8000346:	f001 f979 	bl	800163c <HAL_TIM_Base_Init>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000350:	f000 f98a 	bl	8000668 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000358:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800035a:	f107 0308 	add.w	r3, r7, #8
 800035e:	4619      	mov	r1, r3
 8000360:	480c      	ldr	r0, [pc, #48]	; (8000394 <MX_TIM1_Init+0x98>)
 8000362:	f001 fac2 	bl	80018ea <HAL_TIM_ConfigClockSource>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800036c:	f000 f97c 	bl	8000668 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000370:	2300      	movs	r3, #0
 8000372:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000374:	2300      	movs	r3, #0
 8000376:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000378:	463b      	mov	r3, r7
 800037a:	4619      	mov	r1, r3
 800037c:	4805      	ldr	r0, [pc, #20]	; (8000394 <MX_TIM1_Init+0x98>)
 800037e:	f001 fc9d 	bl	8001cbc <HAL_TIMEx_MasterConfigSynchronization>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000388:	f000 f96e 	bl	8000668 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800038c:	bf00      	nop
 800038e:	3718      	adds	r7, #24
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	200000dc 	.word	0x200000dc
 8000398:	40012c00 	.word	0x40012c00

0800039c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b088      	sub	sp, #32
 80003a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003a2:	f107 0310 	add.w	r3, r7, #16
 80003a6:	2200      	movs	r2, #0
 80003a8:	601a      	str	r2, [r3, #0]
 80003aa:	605a      	str	r2, [r3, #4]
 80003ac:	609a      	str	r2, [r3, #8]
 80003ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003b0:	4b1e      	ldr	r3, [pc, #120]	; (800042c <MX_GPIO_Init+0x90>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	4a1d      	ldr	r2, [pc, #116]	; (800042c <MX_GPIO_Init+0x90>)
 80003b6:	f043 0310 	orr.w	r3, r3, #16
 80003ba:	6193      	str	r3, [r2, #24]
 80003bc:	4b1b      	ldr	r3, [pc, #108]	; (800042c <MX_GPIO_Init+0x90>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	f003 0310 	and.w	r3, r3, #16
 80003c4:	60fb      	str	r3, [r7, #12]
 80003c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003c8:	4b18      	ldr	r3, [pc, #96]	; (800042c <MX_GPIO_Init+0x90>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	4a17      	ldr	r2, [pc, #92]	; (800042c <MX_GPIO_Init+0x90>)
 80003ce:	f043 0320 	orr.w	r3, r3, #32
 80003d2:	6193      	str	r3, [r2, #24]
 80003d4:	4b15      	ldr	r3, [pc, #84]	; (800042c <MX_GPIO_Init+0x90>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	f003 0320 	and.w	r3, r3, #32
 80003dc:	60bb      	str	r3, [r7, #8]
 80003de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e0:	4b12      	ldr	r3, [pc, #72]	; (800042c <MX_GPIO_Init+0x90>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	4a11      	ldr	r2, [pc, #68]	; (800042c <MX_GPIO_Init+0x90>)
 80003e6:	f043 0304 	orr.w	r3, r3, #4
 80003ea:	6193      	str	r3, [r2, #24]
 80003ec:	4b0f      	ldr	r3, [pc, #60]	; (800042c <MX_GPIO_Init+0x90>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	f003 0304 	and.w	r3, r3, #4
 80003f4:	607b      	str	r3, [r7, #4]
 80003f6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80003f8:	2200      	movs	r2, #0
 80003fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003fe:	480c      	ldr	r0, [pc, #48]	; (8000430 <MX_GPIO_Init+0x94>)
 8000400:	f000 fd1c 	bl	8000e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000404:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000408:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800040a:	2301      	movs	r3, #1
 800040c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040e:	2300      	movs	r3, #0
 8000410:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000412:	2302      	movs	r3, #2
 8000414:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000416:	f107 0310 	add.w	r3, r7, #16
 800041a:	4619      	mov	r1, r3
 800041c:	4804      	ldr	r0, [pc, #16]	; (8000430 <MX_GPIO_Init+0x94>)
 800041e:	f000 fb89 	bl	8000b34 <HAL_GPIO_Init>

}
 8000422:	bf00      	nop
 8000424:	3720      	adds	r7, #32
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	40021000 	.word	0x40021000
 8000430:	40011000 	.word	0x40011000

08000434 <STM32_AES_CCM_Encrypt>:
                              uint32_t  IvLength,
                              uint8_t  *OutputMessage,
                              int32_t *OutputMessageLength,
                              int32_t *AuthenticationTAGLength
                             )
{
 8000434:	b590      	push	{r4, r7, lr}
 8000436:	b0db      	sub	sp, #364	; 0x16c
 8000438:	af02      	add	r7, sp, #8
 800043a:	f107 040c 	add.w	r4, r7, #12
 800043e:	6020      	str	r0, [r4, #0]
 8000440:	f107 0008 	add.w	r0, r7, #8
 8000444:	6001      	str	r1, [r0, #0]
 8000446:	1d39      	adds	r1, r7, #4
 8000448:	600a      	str	r2, [r1, #0]
 800044a:	463a      	mov	r2, r7
 800044c:	6013      	str	r3, [r2, #0]
  AESCCMctx_stt AESctx;

  uint32_t error_status = AES_SUCCESS;
 800044e:	2300      	movs	r3, #0
 8000450:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

  /* Set flag field to default value */
  AESctx.mFlags = E_SK_DEFAULT;
 8000454:	f107 0310 	add.w	r3, r7, #16
 8000458:	2200      	movs	r2, #0
 800045a:	711a      	strb	r2, [r3, #4]

  /* Set key size to 16 (corresponding to AES-128) */
  AESctx.mKeySize = 16;
 800045c:	f107 0310 	add.w	r3, r7, #16
 8000460:	2210      	movs	r2, #16
 8000462:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set nonce size field to IvLength, note that valid values are 7,8,9,10,11,12,13*/
  AESctx.mNonceSize = IvLength;
 8000464:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000468:	f107 0310 	add.w	r3, r7, #16
 800046c:	611a      	str	r2, [r3, #16]

  /* Size of returned authentication TAG */
  AESctx.mTagSize = 4;
 800046e:	f107 0310 	add.w	r3, r7, #16
 8000472:	2204      	movs	r2, #4
 8000474:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the size of the header */
  AESctx.mAssDataSize = HeaderMessageLength;
 8000476:	f107 0308 	add.w	r3, r7, #8
 800047a:	681a      	ldr	r2, [r3, #0]
 800047c:	f107 0310 	add.w	r3, r7, #16
 8000480:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of thepayload */
  AESctx.mPayloadSize = PlaintextLength;
 8000482:	463b      	mov	r3, r7
 8000484:	681a      	ldr	r2, [r3, #0]
 8000486:	f107 0310 	add.w	r3, r7, #16
 800048a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the operation, by passing the key and IV */
  error_status = AES_CCM_Encrypt_Init(&AESctx, AES128_Key, InitializationVector );
 800048c:	f107 0310 	add.w	r3, r7, #16
 8000490:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000494:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000498:	4618      	mov	r0, r3
 800049a:	f001 ff09 	bl	80022b0 <AES_CCM_Encrypt_Init>
 800049e:	4603      	mov	r3, r0
 80004a0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

  /* check for initialization errors */
  if (error_status == AES_SUCCESS)
 80004a4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d135      	bne.n	8000518 <STM32_AES_CCM_Encrypt+0xe4>
  {
    /* Process Header */
    error_status = AES_CCM_Header_Append(&AESctx,
 80004ac:	f107 0308 	add.w	r3, r7, #8
 80004b0:	681a      	ldr	r2, [r3, #0]
 80004b2:	f107 030c 	add.w	r3, r7, #12
 80004b6:	f107 0010 	add.w	r0, r7, #16
 80004ba:	6819      	ldr	r1, [r3, #0]
 80004bc:	f001 ffe6 	bl	800248c <AES_CCM_Header_Append>
 80004c0:	4603      	mov	r3, r0
 80004c2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
                                         HeaderMessage,
                                         HeaderMessageLength);
    if (error_status == AES_SUCCESS)
 80004c6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d124      	bne.n	8000518 <STM32_AES_CCM_Encrypt+0xe4>
    {
      /* Encrypt Data */
      error_status = AES_CCM_Encrypt_Append(&AESctx,
 80004ce:	463b      	mov	r3, r7
 80004d0:	681a      	ldr	r2, [r3, #0]
 80004d2:	1d39      	adds	r1, r7, #4
 80004d4:	f107 0010 	add.w	r0, r7, #16
 80004d8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80004dc:	9300      	str	r3, [sp, #0]
 80004de:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80004e2:	6809      	ldr	r1, [r1, #0]
 80004e4:	f002 f952 	bl	800278c <AES_CCM_Encrypt_Append>
 80004e8:	4603      	mov	r3, r0
 80004ea:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
                                            Plaintext,
                                            PlaintextLength,
                                            OutputMessage,
                                            OutputMessageLength);

      if (error_status == AES_SUCCESS)
 80004ee:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d110      	bne.n	8000518 <STM32_AES_CCM_Encrypt+0xe4>
      {
        /* Do the Finalization, write the TAG at the end of the encrypted message */
        error_status = AES_CCM_Encrypt_Finish(&AESctx, OutputMessage + *OutputMessageLength, AuthenticationTAGLength);
 80004f6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	461a      	mov	r2, r3
 80004fe:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8000502:	1899      	adds	r1, r3, r2
 8000504:	f107 0310 	add.w	r3, r7, #16
 8000508:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 800050c:	4618      	mov	r0, r3
 800050e:	f002 fcd1 	bl	8002eb4 <AES_CCM_Encrypt_Finish>
 8000512:	4603      	mov	r3, r0
 8000514:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
      }
    }
  }

  return error_status;
 8000518:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
}
 800051c:	4618      	mov	r0, r3
 800051e:	f507 77b2 	add.w	r7, r7, #356	; 0x164
 8000522:	46bd      	mov	sp, r7
 8000524:	bd90      	pop	{r4, r7, pc}

08000526 <STM32_AES_CCM_Decrypt>:
                              uint32_t  IvLength,
                              uint8_t  *OutputMessage,
                              int32_t *OutputMessageLength,
                              int32_t  AuthenticationTAGLength
                             )
{
 8000526:	b590      	push	{r4, r7, lr}
 8000528:	b0db      	sub	sp, #364	; 0x16c
 800052a:	af02      	add	r7, sp, #8
 800052c:	f107 040c 	add.w	r4, r7, #12
 8000530:	6020      	str	r0, [r4, #0]
 8000532:	f107 0008 	add.w	r0, r7, #8
 8000536:	6001      	str	r1, [r0, #0]
 8000538:	1d39      	adds	r1, r7, #4
 800053a:	600a      	str	r2, [r1, #0]
 800053c:	463a      	mov	r2, r7
 800053e:	6013      	str	r3, [r2, #0]
  AESCCMctx_stt AESctx;

  uint32_t error_status = AES_SUCCESS;
 8000540:	2300      	movs	r3, #0
 8000542:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

  /* Set flag field to default value */
  AESctx.mFlags = E_SK_DEFAULT;
 8000546:	f107 0310 	add.w	r3, r7, #16
 800054a:	2200      	movs	r2, #0
 800054c:	711a      	strb	r2, [r3, #4]

  /* Set key size to 16 (corresponding to AES-128) */
  AESctx.mKeySize = 16;
 800054e:	f107 0310 	add.w	r3, r7, #16
 8000552:	2210      	movs	r2, #16
 8000554:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set nonce size field to IvLength, note that valid values are 7,8,9,10,11,12,13*/
  AESctx.mNonceSize = IvLength;
 8000556:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800055a:	f107 0310 	add.w	r3, r7, #16
 800055e:	611a      	str	r2, [r3, #16]

  /* Size of returned authentication TAG */
  AESctx.mTagSize = 4;
 8000560:	f107 0310 	add.w	r3, r7, #16
 8000564:	2204      	movs	r2, #4
 8000566:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the size of the header */
  AESctx.mAssDataSize = HeaderMessageLength;
 8000568:	f107 0308 	add.w	r3, r7, #8
 800056c:	681a      	ldr	r2, [r3, #0]
 800056e:	f107 0310 	add.w	r3, r7, #16
 8000572:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of thepayload */
  AESctx.mPayloadSize = PlaintextLength;
 8000574:	463b      	mov	r3, r7
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	f107 0310 	add.w	r3, r7, #16
 800057c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the pointer to the TAG to be checked */
  AESctx.pmTag = Plaintext + PlaintextLength;
 800057e:	1d3a      	adds	r2, r7, #4
 8000580:	463b      	mov	r3, r7
 8000582:	6812      	ldr	r2, [r2, #0]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	441a      	add	r2, r3
 8000588:	f107 0310 	add.w	r3, r7, #16
 800058c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Size of returned authentication TAG */
  AESctx.mTagSize = AuthenticationTAGLength;
 800058e:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8000592:	f107 0310 	add.w	r3, r7, #16
 8000596:	63da      	str	r2, [r3, #60]	; 0x3c


  /* Initialize the operation, by passing the key and IV */
  error_status = AES_CCM_Decrypt_Init(&AESctx, AES128_Key, InitializationVector );
 8000598:	f107 0310 	add.w	r3, r7, #16
 800059c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80005a0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80005a4:	4618      	mov	r0, r3
 80005a6:	f002 fce3 	bl	8002f70 <AES_CCM_Decrypt_Init>
 80005aa:	4603      	mov	r3, r0
 80005ac:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

  /* check for initialization errors */
  if (error_status == AES_SUCCESS)
 80005b0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d12f      	bne.n	8000618 <STM32_AES_CCM_Decrypt+0xf2>
  {
    /* Process Header */
    error_status = AES_CCM_Header_Append(&AESctx,
 80005b8:	f107 0308 	add.w	r3, r7, #8
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	f107 030c 	add.w	r3, r7, #12
 80005c2:	f107 0010 	add.w	r0, r7, #16
 80005c6:	6819      	ldr	r1, [r3, #0]
 80005c8:	f001 ff60 	bl	800248c <AES_CCM_Header_Append>
 80005cc:	4603      	mov	r3, r0
 80005ce:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
                                         HeaderMessage,
                                         HeaderMessageLength);
    if (error_status == AES_SUCCESS)
 80005d2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d11e      	bne.n	8000618 <STM32_AES_CCM_Decrypt+0xf2>
    {
      /* Decrypt Data */
      error_status = AES_CCM_Decrypt_Append(&AESctx,
 80005da:	463b      	mov	r3, r7
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	1d39      	adds	r1, r7, #4
 80005e0:	f107 0010 	add.w	r0, r7, #16
 80005e4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80005ee:	6809      	ldr	r1, [r1, #0]
 80005f0:	f002 fdac 	bl	800314c <AES_CCM_Decrypt_Append>
 80005f4:	4603      	mov	r3, r0
 80005f6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
                                            Plaintext,
                                            PlaintextLength,
                                            OutputMessage,
                                            OutputMessageLength);

      if (error_status == AES_SUCCESS)
 80005fa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d10a      	bne.n	8000618 <STM32_AES_CCM_Decrypt+0xf2>
      {
        /* Do the Finalization, check the authentication TAG*/
        error_status = AES_CCM_Decrypt_Finish(&AESctx, NULL, &AuthenticationTAGLength);
 8000602:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 8000606:	f107 0310 	add.w	r3, r7, #16
 800060a:	2100      	movs	r1, #0
 800060c:	4618      	mov	r0, r3
 800060e:	f002 ff77 	bl	8003500 <AES_CCM_Decrypt_Finish>
 8000612:	4603      	mov	r3, r0
 8000614:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
      }
    }
  }

  return error_status;
 8000618:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
}
 800061c:	4618      	mov	r0, r3
 800061e:	f507 77b2 	add.w	r7, r7, #356	; 0x164
 8000622:	46bd      	mov	sp, r7
 8000624:	bd90      	pop	{r4, r7, pc}

08000626 <Buffercmp>:
  * @retval PASSED: pBuffer identical to pBuffer1
  *         FAILED: pBuffer differs from pBuffer1
  */

TestStatus Buffercmp(const uint8_t* pBuffer, uint8_t* pBuffer1, uint16_t BufferLength)
{
 8000626:	b480      	push	{r7}
 8000628:	b085      	sub	sp, #20
 800062a:	af00      	add	r7, sp, #0
 800062c:	60f8      	str	r0, [r7, #12]
 800062e:	60b9      	str	r1, [r7, #8]
 8000630:	4613      	mov	r3, r2
 8000632:	80fb      	strh	r3, [r7, #6]
  while (BufferLength--)
 8000634:	e00d      	b.n	8000652 <Buffercmp+0x2c>
  {
    if (*pBuffer != *pBuffer1)
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	781a      	ldrb	r2, [r3, #0]
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	429a      	cmp	r2, r3
 8000640:	d001      	beq.n	8000646 <Buffercmp+0x20>
    {
      return FAILED;
 8000642:	2300      	movs	r3, #0
 8000644:	e00b      	b.n	800065e <Buffercmp+0x38>
    }

    pBuffer++;
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	3301      	adds	r3, #1
 800064a:	60fb      	str	r3, [r7, #12]
    pBuffer1++;
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	3301      	adds	r3, #1
 8000650:	60bb      	str	r3, [r7, #8]
  while (BufferLength--)
 8000652:	88fb      	ldrh	r3, [r7, #6]
 8000654:	1e5a      	subs	r2, r3, #1
 8000656:	80fa      	strh	r2, [r7, #6]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d1ec      	bne.n	8000636 <Buffercmp+0x10>
  }

  return PASSED;
 800065c:	2301      	movs	r3, #1
}
 800065e:	4618      	mov	r0, r3
 8000660:	3714      	adds	r7, #20
 8000662:	46bd      	mov	sp, r7
 8000664:	bc80      	pop	{r7}
 8000666:	4770      	bx	lr

08000668 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800066c:	b672      	cpsid	i
}
 800066e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000670:	e7fe      	b.n	8000670 <Error_Handler+0x8>
	...

08000674 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000674:	b480      	push	{r7}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800067a:	4b15      	ldr	r3, [pc, #84]	; (80006d0 <HAL_MspInit+0x5c>)
 800067c:	699b      	ldr	r3, [r3, #24]
 800067e:	4a14      	ldr	r2, [pc, #80]	; (80006d0 <HAL_MspInit+0x5c>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	6193      	str	r3, [r2, #24]
 8000686:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <HAL_MspInit+0x5c>)
 8000688:	699b      	ldr	r3, [r3, #24]
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000692:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <HAL_MspInit+0x5c>)
 8000694:	69db      	ldr	r3, [r3, #28]
 8000696:	4a0e      	ldr	r2, [pc, #56]	; (80006d0 <HAL_MspInit+0x5c>)
 8000698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069c:	61d3      	str	r3, [r2, #28]
 800069e:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <HAL_MspInit+0x5c>)
 80006a0:	69db      	ldr	r3, [r3, #28]
 80006a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006aa:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <HAL_MspInit+0x60>)
 80006ac:	685b      	ldr	r3, [r3, #4]
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	4a04      	ldr	r2, [pc, #16]	; (80006d4 <HAL_MspInit+0x60>)
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006c6:	bf00      	nop
 80006c8:	3714      	adds	r7, #20
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bc80      	pop	{r7}
 80006ce:	4770      	bx	lr
 80006d0:	40021000 	.word	0x40021000
 80006d4:	40010000 	.word	0x40010000

080006d8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a09      	ldr	r2, [pc, #36]	; (800070c <HAL_CRC_MspInit+0x34>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d10b      	bne.n	8000702 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80006ea:	4b09      	ldr	r3, [pc, #36]	; (8000710 <HAL_CRC_MspInit+0x38>)
 80006ec:	695b      	ldr	r3, [r3, #20]
 80006ee:	4a08      	ldr	r2, [pc, #32]	; (8000710 <HAL_CRC_MspInit+0x38>)
 80006f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006f4:	6153      	str	r3, [r2, #20]
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <HAL_CRC_MspInit+0x38>)
 80006f8:	695b      	ldr	r3, [r3, #20]
 80006fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000702:	bf00      	nop
 8000704:	3714      	adds	r7, #20
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr
 800070c:	40023000 	.word	0x40023000
 8000710:	40021000 	.word	0x40021000

08000714 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a0d      	ldr	r2, [pc, #52]	; (8000758 <HAL_TIM_Base_MspInit+0x44>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d113      	bne.n	800074e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <HAL_TIM_Base_MspInit+0x48>)
 8000728:	699b      	ldr	r3, [r3, #24]
 800072a:	4a0c      	ldr	r2, [pc, #48]	; (800075c <HAL_TIM_Base_MspInit+0x48>)
 800072c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000730:	6193      	str	r3, [r2, #24]
 8000732:	4b0a      	ldr	r3, [pc, #40]	; (800075c <HAL_TIM_Base_MspInit+0x48>)
 8000734:	699b      	ldr	r3, [r3, #24]
 8000736:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	2100      	movs	r1, #0
 8000742:	2019      	movs	r0, #25
 8000744:	f000 f9a3 	bl	8000a8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000748:	2019      	movs	r0, #25
 800074a:	f000 f9bc 	bl	8000ac6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800074e:	bf00      	nop
 8000750:	3710      	adds	r7, #16
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40012c00 	.word	0x40012c00
 800075c:	40021000 	.word	0x40021000

08000760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000764:	e7fe      	b.n	8000764 <NMI_Handler+0x4>

08000766 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800076a:	e7fe      	b.n	800076a <HardFault_Handler+0x4>

0800076c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <MemManage_Handler+0x4>

08000772 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000776:	e7fe      	b.n	8000776 <BusFault_Handler+0x4>

08000778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800077c:	e7fe      	b.n	800077c <UsageFault_Handler+0x4>

0800077e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	bc80      	pop	{r7}
 8000788:	4770      	bx	lr

0800078a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr

08000796 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	46bd      	mov	sp, r7
 800079e:	bc80      	pop	{r7}
 80007a0:	4770      	bx	lr

080007a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007a6:	f000 f87f 	bl	80008a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
	...

080007b0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80007b4:	4802      	ldr	r0, [pc, #8]	; (80007c0 <TIM1_UP_IRQHandler+0x10>)
 80007b6:	f000 ff90 	bl	80016da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	200000dc 	.word	0x200000dc

080007c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr

080007d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007d0:	480c      	ldr	r0, [pc, #48]	; (8000804 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007d2:	490d      	ldr	r1, [pc, #52]	; (8000808 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007d4:	4a0d      	ldr	r2, [pc, #52]	; (800080c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007d8:	e002      	b.n	80007e0 <LoopCopyDataInit>

080007da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007de:	3304      	adds	r3, #4

080007e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007e4:	d3f9      	bcc.n	80007da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007e6:	4a0a      	ldr	r2, [pc, #40]	; (8000810 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007e8:	4c0a      	ldr	r4, [pc, #40]	; (8000814 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007ec:	e001      	b.n	80007f2 <LoopFillZerobss>

080007ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007f0:	3204      	adds	r2, #4

080007f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007f4:	d3fb      	bcc.n	80007ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007f6:	f7ff ffe5 	bl	80007c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007fa:	f002 ff47 	bl	800368c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007fe:	f7ff fca5 	bl	800014c <main>
  bx lr
 8000802:	4770      	bx	lr
  ldr r0, =_sdata
 8000804:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000808:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 800080c:	08003c7c 	.word	0x08003c7c
  ldr r2, =_sbss
 8000810:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000814:	20000168 	.word	0x20000168

08000818 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000818:	e7fe      	b.n	8000818 <ADC1_2_IRQHandler>
	...

0800081c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000820:	4b08      	ldr	r3, [pc, #32]	; (8000844 <HAL_Init+0x28>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a07      	ldr	r2, [pc, #28]	; (8000844 <HAL_Init+0x28>)
 8000826:	f043 0310 	orr.w	r3, r3, #16
 800082a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800082c:	2003      	movs	r0, #3
 800082e:	f000 f923 	bl	8000a78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000832:	200f      	movs	r0, #15
 8000834:	f000 f808 	bl	8000848 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000838:	f7ff ff1c 	bl	8000674 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40022000 	.word	0x40022000

08000848 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <HAL_InitTick+0x54>)
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <HAL_InitTick+0x58>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	4619      	mov	r1, r3
 800085a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800085e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000862:	fbb2 f3f3 	udiv	r3, r2, r3
 8000866:	4618      	mov	r0, r3
 8000868:	f000 f93b 	bl	8000ae2 <HAL_SYSTICK_Config>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000872:	2301      	movs	r3, #1
 8000874:	e00e      	b.n	8000894 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2b0f      	cmp	r3, #15
 800087a:	d80a      	bhi.n	8000892 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800087c:	2200      	movs	r2, #0
 800087e:	6879      	ldr	r1, [r7, #4]
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	f000 f903 	bl	8000a8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000888:	4a06      	ldr	r2, [pc, #24]	; (80008a4 <HAL_InitTick+0x5c>)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800088e:	2300      	movs	r3, #0
 8000890:	e000      	b.n	8000894 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000892:	2301      	movs	r3, #1
}
 8000894:	4618      	mov	r0, r3
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000020 	.word	0x20000020
 80008a0:	20000028 	.word	0x20000028
 80008a4:	20000024 	.word	0x20000024

080008a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008ac:	4b05      	ldr	r3, [pc, #20]	; (80008c4 <HAL_IncTick+0x1c>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	461a      	mov	r2, r3
 80008b2:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <HAL_IncTick+0x20>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4413      	add	r3, r2
 80008b8:	4a03      	ldr	r2, [pc, #12]	; (80008c8 <HAL_IncTick+0x20>)
 80008ba:	6013      	str	r3, [r2, #0]
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr
 80008c4:	20000028 	.word	0x20000028
 80008c8:	20000164 	.word	0x20000164

080008cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  return uwTick;
 80008d0:	4b02      	ldr	r3, [pc, #8]	; (80008dc <HAL_GetTick+0x10>)
 80008d2:	681b      	ldr	r3, [r3, #0]
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr
 80008dc:	20000164 	.word	0x20000164

080008e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	f003 0307 	and.w	r3, r3, #7
 80008ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <__NVIC_SetPriorityGrouping+0x44>)
 80008f2:	68db      	ldr	r3, [r3, #12]
 80008f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008f6:	68ba      	ldr	r2, [r7, #8]
 80008f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008fc:	4013      	ands	r3, r2
 80008fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000908:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800090c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000910:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000912:	4a04      	ldr	r2, [pc, #16]	; (8000924 <__NVIC_SetPriorityGrouping+0x44>)
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	60d3      	str	r3, [r2, #12]
}
 8000918:	bf00      	nop
 800091a:	3714      	adds	r7, #20
 800091c:	46bd      	mov	sp, r7
 800091e:	bc80      	pop	{r7}
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800092c:	4b04      	ldr	r3, [pc, #16]	; (8000940 <__NVIC_GetPriorityGrouping+0x18>)
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	0a1b      	lsrs	r3, r3, #8
 8000932:	f003 0307 	and.w	r3, r3, #7
}
 8000936:	4618      	mov	r0, r3
 8000938:	46bd      	mov	sp, r7
 800093a:	bc80      	pop	{r7}
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800094e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000952:	2b00      	cmp	r3, #0
 8000954:	db0b      	blt.n	800096e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	f003 021f 	and.w	r2, r3, #31
 800095c:	4906      	ldr	r1, [pc, #24]	; (8000978 <__NVIC_EnableIRQ+0x34>)
 800095e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000962:	095b      	lsrs	r3, r3, #5
 8000964:	2001      	movs	r0, #1
 8000966:	fa00 f202 	lsl.w	r2, r0, r2
 800096a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800096e:	bf00      	nop
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr
 8000978:	e000e100 	.word	0xe000e100

0800097c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	6039      	str	r1, [r7, #0]
 8000986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098c:	2b00      	cmp	r3, #0
 800098e:	db0a      	blt.n	80009a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	b2da      	uxtb	r2, r3
 8000994:	490c      	ldr	r1, [pc, #48]	; (80009c8 <__NVIC_SetPriority+0x4c>)
 8000996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099a:	0112      	lsls	r2, r2, #4
 800099c:	b2d2      	uxtb	r2, r2
 800099e:	440b      	add	r3, r1
 80009a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009a4:	e00a      	b.n	80009bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	b2da      	uxtb	r2, r3
 80009aa:	4908      	ldr	r1, [pc, #32]	; (80009cc <__NVIC_SetPriority+0x50>)
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	f003 030f 	and.w	r3, r3, #15
 80009b2:	3b04      	subs	r3, #4
 80009b4:	0112      	lsls	r2, r2, #4
 80009b6:	b2d2      	uxtb	r2, r2
 80009b8:	440b      	add	r3, r1
 80009ba:	761a      	strb	r2, [r3, #24]
}
 80009bc:	bf00      	nop
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	e000e100 	.word	0xe000e100
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b089      	sub	sp, #36	; 0x24
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	60f8      	str	r0, [r7, #12]
 80009d8:	60b9      	str	r1, [r7, #8]
 80009da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	f003 0307 	and.w	r3, r3, #7
 80009e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009e4:	69fb      	ldr	r3, [r7, #28]
 80009e6:	f1c3 0307 	rsb	r3, r3, #7
 80009ea:	2b04      	cmp	r3, #4
 80009ec:	bf28      	it	cs
 80009ee:	2304      	movcs	r3, #4
 80009f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	3304      	adds	r3, #4
 80009f6:	2b06      	cmp	r3, #6
 80009f8:	d902      	bls.n	8000a00 <NVIC_EncodePriority+0x30>
 80009fa:	69fb      	ldr	r3, [r7, #28]
 80009fc:	3b03      	subs	r3, #3
 80009fe:	e000      	b.n	8000a02 <NVIC_EncodePriority+0x32>
 8000a00:	2300      	movs	r3, #0
 8000a02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a04:	f04f 32ff 	mov.w	r2, #4294967295
 8000a08:	69bb      	ldr	r3, [r7, #24]
 8000a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0e:	43da      	mvns	r2, r3
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	401a      	ands	r2, r3
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a18:	f04f 31ff 	mov.w	r1, #4294967295
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a22:	43d9      	mvns	r1, r3
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a28:	4313      	orrs	r3, r2
         );
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3724      	adds	r7, #36	; 0x24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr

08000a34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	3b01      	subs	r3, #1
 8000a40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a44:	d301      	bcc.n	8000a4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a46:	2301      	movs	r3, #1
 8000a48:	e00f      	b.n	8000a6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a4a:	4a0a      	ldr	r2, [pc, #40]	; (8000a74 <SysTick_Config+0x40>)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a52:	210f      	movs	r1, #15
 8000a54:	f04f 30ff 	mov.w	r0, #4294967295
 8000a58:	f7ff ff90 	bl	800097c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a5c:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <SysTick_Config+0x40>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a62:	4b04      	ldr	r3, [pc, #16]	; (8000a74 <SysTick_Config+0x40>)
 8000a64:	2207      	movs	r2, #7
 8000a66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a68:	2300      	movs	r3, #0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	e000e010 	.word	0xe000e010

08000a78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f7ff ff2d 	bl	80008e0 <__NVIC_SetPriorityGrouping>
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b086      	sub	sp, #24
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	4603      	mov	r3, r0
 8000a96:	60b9      	str	r1, [r7, #8]
 8000a98:	607a      	str	r2, [r7, #4]
 8000a9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000aa0:	f7ff ff42 	bl	8000928 <__NVIC_GetPriorityGrouping>
 8000aa4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	68b9      	ldr	r1, [r7, #8]
 8000aaa:	6978      	ldr	r0, [r7, #20]
 8000aac:	f7ff ff90 	bl	80009d0 <NVIC_EncodePriority>
 8000ab0:	4602      	mov	r2, r0
 8000ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ab6:	4611      	mov	r1, r2
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff ff5f 	bl	800097c <__NVIC_SetPriority>
}
 8000abe:	bf00      	nop
 8000ac0:	3718      	adds	r7, #24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b082      	sub	sp, #8
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	4603      	mov	r3, r0
 8000ace:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff ff35 	bl	8000944 <__NVIC_EnableIRQ>
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b082      	sub	sp, #8
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f7ff ffa2 	bl	8000a34 <SysTick_Config>
 8000af0:	4603      	mov	r3, r0
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b082      	sub	sp, #8
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d101      	bne.n	8000b0c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	e00e      	b.n	8000b2a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	795b      	ldrb	r3, [r3, #5]
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d105      	bne.n	8000b22 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2200      	movs	r2, #0
 8000b1a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f7ff fddb 	bl	80006d8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2201      	movs	r2, #1
 8000b26:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b08b      	sub	sp, #44	; 0x2c
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b42:	2300      	movs	r3, #0
 8000b44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b46:	e169      	b.n	8000e1c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b48:	2201      	movs	r2, #1
 8000b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	69fa      	ldr	r2, [r7, #28]
 8000b58:	4013      	ands	r3, r2
 8000b5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b5c:	69ba      	ldr	r2, [r7, #24]
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	f040 8158 	bne.w	8000e16 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	4a9a      	ldr	r2, [pc, #616]	; (8000dd4 <HAL_GPIO_Init+0x2a0>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d05e      	beq.n	8000c2e <HAL_GPIO_Init+0xfa>
 8000b70:	4a98      	ldr	r2, [pc, #608]	; (8000dd4 <HAL_GPIO_Init+0x2a0>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d875      	bhi.n	8000c62 <HAL_GPIO_Init+0x12e>
 8000b76:	4a98      	ldr	r2, [pc, #608]	; (8000dd8 <HAL_GPIO_Init+0x2a4>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d058      	beq.n	8000c2e <HAL_GPIO_Init+0xfa>
 8000b7c:	4a96      	ldr	r2, [pc, #600]	; (8000dd8 <HAL_GPIO_Init+0x2a4>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d86f      	bhi.n	8000c62 <HAL_GPIO_Init+0x12e>
 8000b82:	4a96      	ldr	r2, [pc, #600]	; (8000ddc <HAL_GPIO_Init+0x2a8>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d052      	beq.n	8000c2e <HAL_GPIO_Init+0xfa>
 8000b88:	4a94      	ldr	r2, [pc, #592]	; (8000ddc <HAL_GPIO_Init+0x2a8>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d869      	bhi.n	8000c62 <HAL_GPIO_Init+0x12e>
 8000b8e:	4a94      	ldr	r2, [pc, #592]	; (8000de0 <HAL_GPIO_Init+0x2ac>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d04c      	beq.n	8000c2e <HAL_GPIO_Init+0xfa>
 8000b94:	4a92      	ldr	r2, [pc, #584]	; (8000de0 <HAL_GPIO_Init+0x2ac>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d863      	bhi.n	8000c62 <HAL_GPIO_Init+0x12e>
 8000b9a:	4a92      	ldr	r2, [pc, #584]	; (8000de4 <HAL_GPIO_Init+0x2b0>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d046      	beq.n	8000c2e <HAL_GPIO_Init+0xfa>
 8000ba0:	4a90      	ldr	r2, [pc, #576]	; (8000de4 <HAL_GPIO_Init+0x2b0>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d85d      	bhi.n	8000c62 <HAL_GPIO_Init+0x12e>
 8000ba6:	2b12      	cmp	r3, #18
 8000ba8:	d82a      	bhi.n	8000c00 <HAL_GPIO_Init+0xcc>
 8000baa:	2b12      	cmp	r3, #18
 8000bac:	d859      	bhi.n	8000c62 <HAL_GPIO_Init+0x12e>
 8000bae:	a201      	add	r2, pc, #4	; (adr r2, 8000bb4 <HAL_GPIO_Init+0x80>)
 8000bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bb4:	08000c2f 	.word	0x08000c2f
 8000bb8:	08000c09 	.word	0x08000c09
 8000bbc:	08000c1b 	.word	0x08000c1b
 8000bc0:	08000c5d 	.word	0x08000c5d
 8000bc4:	08000c63 	.word	0x08000c63
 8000bc8:	08000c63 	.word	0x08000c63
 8000bcc:	08000c63 	.word	0x08000c63
 8000bd0:	08000c63 	.word	0x08000c63
 8000bd4:	08000c63 	.word	0x08000c63
 8000bd8:	08000c63 	.word	0x08000c63
 8000bdc:	08000c63 	.word	0x08000c63
 8000be0:	08000c63 	.word	0x08000c63
 8000be4:	08000c63 	.word	0x08000c63
 8000be8:	08000c63 	.word	0x08000c63
 8000bec:	08000c63 	.word	0x08000c63
 8000bf0:	08000c63 	.word	0x08000c63
 8000bf4:	08000c63 	.word	0x08000c63
 8000bf8:	08000c11 	.word	0x08000c11
 8000bfc:	08000c25 	.word	0x08000c25
 8000c00:	4a79      	ldr	r2, [pc, #484]	; (8000de8 <HAL_GPIO_Init+0x2b4>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d013      	beq.n	8000c2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c06:	e02c      	b.n	8000c62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	623b      	str	r3, [r7, #32]
          break;
 8000c0e:	e029      	b.n	8000c64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	3304      	adds	r3, #4
 8000c16:	623b      	str	r3, [r7, #32]
          break;
 8000c18:	e024      	b.n	8000c64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	68db      	ldr	r3, [r3, #12]
 8000c1e:	3308      	adds	r3, #8
 8000c20:	623b      	str	r3, [r7, #32]
          break;
 8000c22:	e01f      	b.n	8000c64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	330c      	adds	r3, #12
 8000c2a:	623b      	str	r3, [r7, #32]
          break;
 8000c2c:	e01a      	b.n	8000c64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d102      	bne.n	8000c3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c36:	2304      	movs	r3, #4
 8000c38:	623b      	str	r3, [r7, #32]
          break;
 8000c3a:	e013      	b.n	8000c64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d105      	bne.n	8000c50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c44:	2308      	movs	r3, #8
 8000c46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	69fa      	ldr	r2, [r7, #28]
 8000c4c:	611a      	str	r2, [r3, #16]
          break;
 8000c4e:	e009      	b.n	8000c64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c50:	2308      	movs	r3, #8
 8000c52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	69fa      	ldr	r2, [r7, #28]
 8000c58:	615a      	str	r2, [r3, #20]
          break;
 8000c5a:	e003      	b.n	8000c64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	623b      	str	r3, [r7, #32]
          break;
 8000c60:	e000      	b.n	8000c64 <HAL_GPIO_Init+0x130>
          break;
 8000c62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	2bff      	cmp	r3, #255	; 0xff
 8000c68:	d801      	bhi.n	8000c6e <HAL_GPIO_Init+0x13a>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	e001      	b.n	8000c72 <HAL_GPIO_Init+0x13e>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	3304      	adds	r3, #4
 8000c72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	2bff      	cmp	r3, #255	; 0xff
 8000c78:	d802      	bhi.n	8000c80 <HAL_GPIO_Init+0x14c>
 8000c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	e002      	b.n	8000c86 <HAL_GPIO_Init+0x152>
 8000c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c82:	3b08      	subs	r3, #8
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	210f      	movs	r1, #15
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	fa01 f303 	lsl.w	r3, r1, r3
 8000c94:	43db      	mvns	r3, r3
 8000c96:	401a      	ands	r2, r3
 8000c98:	6a39      	ldr	r1, [r7, #32]
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca0:	431a      	orrs	r2, r3
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	f000 80b1 	beq.w	8000e16 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cb4:	4b4d      	ldr	r3, [pc, #308]	; (8000dec <HAL_GPIO_Init+0x2b8>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	4a4c      	ldr	r2, [pc, #304]	; (8000dec <HAL_GPIO_Init+0x2b8>)
 8000cba:	f043 0301 	orr.w	r3, r3, #1
 8000cbe:	6193      	str	r3, [r2, #24]
 8000cc0:	4b4a      	ldr	r3, [pc, #296]	; (8000dec <HAL_GPIO_Init+0x2b8>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	f003 0301 	and.w	r3, r3, #1
 8000cc8:	60bb      	str	r3, [r7, #8]
 8000cca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ccc:	4a48      	ldr	r2, [pc, #288]	; (8000df0 <HAL_GPIO_Init+0x2bc>)
 8000cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd0:	089b      	lsrs	r3, r3, #2
 8000cd2:	3302      	adds	r3, #2
 8000cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cdc:	f003 0303 	and.w	r3, r3, #3
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	220f      	movs	r2, #15
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	68fa      	ldr	r2, [r7, #12]
 8000cec:	4013      	ands	r3, r2
 8000cee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4a40      	ldr	r2, [pc, #256]	; (8000df4 <HAL_GPIO_Init+0x2c0>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d013      	beq.n	8000d20 <HAL_GPIO_Init+0x1ec>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4a3f      	ldr	r2, [pc, #252]	; (8000df8 <HAL_GPIO_Init+0x2c4>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d00d      	beq.n	8000d1c <HAL_GPIO_Init+0x1e8>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4a3e      	ldr	r2, [pc, #248]	; (8000dfc <HAL_GPIO_Init+0x2c8>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d007      	beq.n	8000d18 <HAL_GPIO_Init+0x1e4>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4a3d      	ldr	r2, [pc, #244]	; (8000e00 <HAL_GPIO_Init+0x2cc>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d101      	bne.n	8000d14 <HAL_GPIO_Init+0x1e0>
 8000d10:	2303      	movs	r3, #3
 8000d12:	e006      	b.n	8000d22 <HAL_GPIO_Init+0x1ee>
 8000d14:	2304      	movs	r3, #4
 8000d16:	e004      	b.n	8000d22 <HAL_GPIO_Init+0x1ee>
 8000d18:	2302      	movs	r3, #2
 8000d1a:	e002      	b.n	8000d22 <HAL_GPIO_Init+0x1ee>
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	e000      	b.n	8000d22 <HAL_GPIO_Init+0x1ee>
 8000d20:	2300      	movs	r3, #0
 8000d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d24:	f002 0203 	and.w	r2, r2, #3
 8000d28:	0092      	lsls	r2, r2, #2
 8000d2a:	4093      	lsls	r3, r2
 8000d2c:	68fa      	ldr	r2, [r7, #12]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d32:	492f      	ldr	r1, [pc, #188]	; (8000df0 <HAL_GPIO_Init+0x2bc>)
 8000d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d36:	089b      	lsrs	r3, r3, #2
 8000d38:	3302      	adds	r3, #2
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d006      	beq.n	8000d5a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d4c:	4b2d      	ldr	r3, [pc, #180]	; (8000e04 <HAL_GPIO_Init+0x2d0>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	492c      	ldr	r1, [pc, #176]	; (8000e04 <HAL_GPIO_Init+0x2d0>)
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	600b      	str	r3, [r1, #0]
 8000d58:	e006      	b.n	8000d68 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d5a:	4b2a      	ldr	r3, [pc, #168]	; (8000e04 <HAL_GPIO_Init+0x2d0>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	43db      	mvns	r3, r3
 8000d62:	4928      	ldr	r1, [pc, #160]	; (8000e04 <HAL_GPIO_Init+0x2d0>)
 8000d64:	4013      	ands	r3, r2
 8000d66:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d006      	beq.n	8000d82 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d74:	4b23      	ldr	r3, [pc, #140]	; (8000e04 <HAL_GPIO_Init+0x2d0>)
 8000d76:	685a      	ldr	r2, [r3, #4]
 8000d78:	4922      	ldr	r1, [pc, #136]	; (8000e04 <HAL_GPIO_Init+0x2d0>)
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	604b      	str	r3, [r1, #4]
 8000d80:	e006      	b.n	8000d90 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d82:	4b20      	ldr	r3, [pc, #128]	; (8000e04 <HAL_GPIO_Init+0x2d0>)
 8000d84:	685a      	ldr	r2, [r3, #4]
 8000d86:	69bb      	ldr	r3, [r7, #24]
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	491e      	ldr	r1, [pc, #120]	; (8000e04 <HAL_GPIO_Init+0x2d0>)
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d006      	beq.n	8000daa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d9c:	4b19      	ldr	r3, [pc, #100]	; (8000e04 <HAL_GPIO_Init+0x2d0>)
 8000d9e:	689a      	ldr	r2, [r3, #8]
 8000da0:	4918      	ldr	r1, [pc, #96]	; (8000e04 <HAL_GPIO_Init+0x2d0>)
 8000da2:	69bb      	ldr	r3, [r7, #24]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	608b      	str	r3, [r1, #8]
 8000da8:	e006      	b.n	8000db8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000daa:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <HAL_GPIO_Init+0x2d0>)
 8000dac:	689a      	ldr	r2, [r3, #8]
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	43db      	mvns	r3, r3
 8000db2:	4914      	ldr	r1, [pc, #80]	; (8000e04 <HAL_GPIO_Init+0x2d0>)
 8000db4:	4013      	ands	r3, r2
 8000db6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d021      	beq.n	8000e08 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000dc4:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <HAL_GPIO_Init+0x2d0>)
 8000dc6:	68da      	ldr	r2, [r3, #12]
 8000dc8:	490e      	ldr	r1, [pc, #56]	; (8000e04 <HAL_GPIO_Init+0x2d0>)
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	60cb      	str	r3, [r1, #12]
 8000dd0:	e021      	b.n	8000e16 <HAL_GPIO_Init+0x2e2>
 8000dd2:	bf00      	nop
 8000dd4:	10320000 	.word	0x10320000
 8000dd8:	10310000 	.word	0x10310000
 8000ddc:	10220000 	.word	0x10220000
 8000de0:	10210000 	.word	0x10210000
 8000de4:	10120000 	.word	0x10120000
 8000de8:	10110000 	.word	0x10110000
 8000dec:	40021000 	.word	0x40021000
 8000df0:	40010000 	.word	0x40010000
 8000df4:	40010800 	.word	0x40010800
 8000df8:	40010c00 	.word	0x40010c00
 8000dfc:	40011000 	.word	0x40011000
 8000e00:	40011400 	.word	0x40011400
 8000e04:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e08:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <HAL_GPIO_Init+0x304>)
 8000e0a:	68da      	ldr	r2, [r3, #12]
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	4909      	ldr	r1, [pc, #36]	; (8000e38 <HAL_GPIO_Init+0x304>)
 8000e12:	4013      	ands	r3, r2
 8000e14:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e18:	3301      	adds	r3, #1
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e22:	fa22 f303 	lsr.w	r3, r2, r3
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	f47f ae8e 	bne.w	8000b48 <HAL_GPIO_Init+0x14>
  }
}
 8000e2c:	bf00      	nop
 8000e2e:	bf00      	nop
 8000e30:	372c      	adds	r7, #44	; 0x2c
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr
 8000e38:	40010400 	.word	0x40010400

08000e3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	460b      	mov	r3, r1
 8000e46:	807b      	strh	r3, [r7, #2]
 8000e48:	4613      	mov	r3, r2
 8000e4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e4c:	787b      	ldrb	r3, [r7, #1]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d003      	beq.n	8000e5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e52:	887a      	ldrh	r2, [r7, #2]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e58:	e003      	b.n	8000e62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e5a:	887b      	ldrh	r3, [r7, #2]
 8000e5c:	041a      	lsls	r2, r3, #16
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	611a      	str	r2, [r3, #16]
}
 8000e62:	bf00      	nop
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr

08000e6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d101      	bne.n	8000e7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e26c      	b.n	8001358 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	f000 8087 	beq.w	8000f9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e8c:	4b92      	ldr	r3, [pc, #584]	; (80010d8 <HAL_RCC_OscConfig+0x26c>)
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f003 030c 	and.w	r3, r3, #12
 8000e94:	2b04      	cmp	r3, #4
 8000e96:	d00c      	beq.n	8000eb2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e98:	4b8f      	ldr	r3, [pc, #572]	; (80010d8 <HAL_RCC_OscConfig+0x26c>)
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 030c 	and.w	r3, r3, #12
 8000ea0:	2b08      	cmp	r3, #8
 8000ea2:	d112      	bne.n	8000eca <HAL_RCC_OscConfig+0x5e>
 8000ea4:	4b8c      	ldr	r3, [pc, #560]	; (80010d8 <HAL_RCC_OscConfig+0x26c>)
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eb0:	d10b      	bne.n	8000eca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eb2:	4b89      	ldr	r3, [pc, #548]	; (80010d8 <HAL_RCC_OscConfig+0x26c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d06c      	beq.n	8000f98 <HAL_RCC_OscConfig+0x12c>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d168      	bne.n	8000f98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e246      	b.n	8001358 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ed2:	d106      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x76>
 8000ed4:	4b80      	ldr	r3, [pc, #512]	; (80010d8 <HAL_RCC_OscConfig+0x26c>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a7f      	ldr	r2, [pc, #508]	; (80010d8 <HAL_RCC_OscConfig+0x26c>)
 8000eda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ede:	6013      	str	r3, [r2, #0]
 8000ee0:	e02e      	b.n	8000f40 <HAL_RCC_OscConfig+0xd4>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d10c      	bne.n	8000f04 <HAL_RCC_OscConfig+0x98>
 8000eea:	4b7b      	ldr	r3, [pc, #492]	; (80010d8 <HAL_RCC_OscConfig+0x26c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a7a      	ldr	r2, [pc, #488]	; (80010d8 <HAL_RCC_OscConfig+0x26c>)
 8000ef0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ef4:	6013      	str	r3, [r2, #0]
 8000ef6:	4b78      	ldr	r3, [pc, #480]	; (80010d8 <HAL_RCC_OscConfig+0x26c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a77      	ldr	r2, [pc, #476]	; (80010d8 <HAL_RCC_OscConfig+0x26c>)
 8000efc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f00:	6013      	str	r3, [r2, #0]
 8000f02:	e01d      	b.n	8000f40 <HAL_RCC_OscConfig+0xd4>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f0c:	d10c      	bne.n	8000f28 <HAL_RCC_OscConfig+0xbc>
 8000f0e:	4b72      	ldr	r3, [pc, #456]	; (80010d8 <HAL_RCC_OscConfig+0x26c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a71      	ldr	r2, [pc, #452]	; (80010d8 <HAL_RCC_OscConfig+0x26c>)
 8000f14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f18:	6013      	str	r3, [r2, #0]
 8000f1a:	4b6f      	ldr	r3, [pc, #444]	; (80010d8 <HAL_RCC_OscConfig+0x26c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a6e      	ldr	r2, [pc, #440]	; (80010d8 <HAL_RCC_OscConfig+0x26c>)
 8000f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f24:	6013      	str	r3, [r2, #0]
 8000f26:	e00b      	b.n	8000f40 <HAL_RCC_OscConfig+0xd4>
 8000f28:	4b6b      	ldr	r3, [pc, #428]	; (80010d8 <HAL_RCC_OscConfig+0x26c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a6a      	ldr	r2, [pc, #424]	; (80010d8 <HAL_RCC_OscConfig+0x26c>)
 8000f2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f32:	6013      	str	r3, [r2, #0]
 8000f34:	4b68      	ldr	r3, [pc, #416]	; (80010d8 <HAL_RCC_OscConfig+0x26c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a67      	ldr	r2, [pc, #412]	; (80010d8 <HAL_RCC_OscConfig+0x26c>)
 8000f3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d013      	beq.n	8000f70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f48:	f7ff fcc0 	bl	80008cc <HAL_GetTick>
 8000f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f4e:	e008      	b.n	8000f62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f50:	f7ff fcbc 	bl	80008cc <HAL_GetTick>
 8000f54:	4602      	mov	r2, r0
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	2b64      	cmp	r3, #100	; 0x64
 8000f5c:	d901      	bls.n	8000f62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e1fa      	b.n	8001358 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f62:	4b5d      	ldr	r3, [pc, #372]	; (80010d8 <HAL_RCC_OscConfig+0x26c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d0f0      	beq.n	8000f50 <HAL_RCC_OscConfig+0xe4>
 8000f6e:	e014      	b.n	8000f9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f70:	f7ff fcac 	bl	80008cc <HAL_GetTick>
 8000f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f76:	e008      	b.n	8000f8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f78:	f7ff fca8 	bl	80008cc <HAL_GetTick>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	2b64      	cmp	r3, #100	; 0x64
 8000f84:	d901      	bls.n	8000f8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f86:	2303      	movs	r3, #3
 8000f88:	e1e6      	b.n	8001358 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f8a:	4b53      	ldr	r3, [pc, #332]	; (80010d8 <HAL_RCC_OscConfig+0x26c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d1f0      	bne.n	8000f78 <HAL_RCC_OscConfig+0x10c>
 8000f96:	e000      	b.n	8000f9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d063      	beq.n	800106e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fa6:	4b4c      	ldr	r3, [pc, #304]	; (80010d8 <HAL_RCC_OscConfig+0x26c>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f003 030c 	and.w	r3, r3, #12
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d00b      	beq.n	8000fca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fb2:	4b49      	ldr	r3, [pc, #292]	; (80010d8 <HAL_RCC_OscConfig+0x26c>)
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f003 030c 	and.w	r3, r3, #12
 8000fba:	2b08      	cmp	r3, #8
 8000fbc:	d11c      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x18c>
 8000fbe:	4b46      	ldr	r3, [pc, #280]	; (80010d8 <HAL_RCC_OscConfig+0x26c>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d116      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fca:	4b43      	ldr	r3, [pc, #268]	; (80010d8 <HAL_RCC_OscConfig+0x26c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f003 0302 	and.w	r3, r3, #2
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d005      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x176>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	691b      	ldr	r3, [r3, #16]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d001      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e1ba      	b.n	8001358 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fe2:	4b3d      	ldr	r3, [pc, #244]	; (80010d8 <HAL_RCC_OscConfig+0x26c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	00db      	lsls	r3, r3, #3
 8000ff0:	4939      	ldr	r1, [pc, #228]	; (80010d8 <HAL_RCC_OscConfig+0x26c>)
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ff6:	e03a      	b.n	800106e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	691b      	ldr	r3, [r3, #16]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d020      	beq.n	8001042 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001000:	4b36      	ldr	r3, [pc, #216]	; (80010dc <HAL_RCC_OscConfig+0x270>)
 8001002:	2201      	movs	r2, #1
 8001004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001006:	f7ff fc61 	bl	80008cc <HAL_GetTick>
 800100a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800100c:	e008      	b.n	8001020 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800100e:	f7ff fc5d 	bl	80008cc <HAL_GetTick>
 8001012:	4602      	mov	r2, r0
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	2b02      	cmp	r3, #2
 800101a:	d901      	bls.n	8001020 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800101c:	2303      	movs	r3, #3
 800101e:	e19b      	b.n	8001358 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001020:	4b2d      	ldr	r3, [pc, #180]	; (80010d8 <HAL_RCC_OscConfig+0x26c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f003 0302 	and.w	r3, r3, #2
 8001028:	2b00      	cmp	r3, #0
 800102a:	d0f0      	beq.n	800100e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800102c:	4b2a      	ldr	r3, [pc, #168]	; (80010d8 <HAL_RCC_OscConfig+0x26c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	695b      	ldr	r3, [r3, #20]
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	4927      	ldr	r1, [pc, #156]	; (80010d8 <HAL_RCC_OscConfig+0x26c>)
 800103c:	4313      	orrs	r3, r2
 800103e:	600b      	str	r3, [r1, #0]
 8001040:	e015      	b.n	800106e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001042:	4b26      	ldr	r3, [pc, #152]	; (80010dc <HAL_RCC_OscConfig+0x270>)
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001048:	f7ff fc40 	bl	80008cc <HAL_GetTick>
 800104c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800104e:	e008      	b.n	8001062 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001050:	f7ff fc3c 	bl	80008cc <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b02      	cmp	r3, #2
 800105c:	d901      	bls.n	8001062 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800105e:	2303      	movs	r3, #3
 8001060:	e17a      	b.n	8001358 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001062:	4b1d      	ldr	r3, [pc, #116]	; (80010d8 <HAL_RCC_OscConfig+0x26c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	2b00      	cmp	r3, #0
 800106c:	d1f0      	bne.n	8001050 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 0308 	and.w	r3, r3, #8
 8001076:	2b00      	cmp	r3, #0
 8001078:	d03a      	beq.n	80010f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	699b      	ldr	r3, [r3, #24]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d019      	beq.n	80010b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001082:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <HAL_RCC_OscConfig+0x274>)
 8001084:	2201      	movs	r2, #1
 8001086:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001088:	f7ff fc20 	bl	80008cc <HAL_GetTick>
 800108c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800108e:	e008      	b.n	80010a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001090:	f7ff fc1c 	bl	80008cc <HAL_GetTick>
 8001094:	4602      	mov	r2, r0
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	2b02      	cmp	r3, #2
 800109c:	d901      	bls.n	80010a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800109e:	2303      	movs	r3, #3
 80010a0:	e15a      	b.n	8001358 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010a2:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <HAL_RCC_OscConfig+0x26c>)
 80010a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d0f0      	beq.n	8001090 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010ae:	2001      	movs	r0, #1
 80010b0:	f000 faa6 	bl	8001600 <RCC_Delay>
 80010b4:	e01c      	b.n	80010f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010b6:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <HAL_RCC_OscConfig+0x274>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010bc:	f7ff fc06 	bl	80008cc <HAL_GetTick>
 80010c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010c2:	e00f      	b.n	80010e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010c4:	f7ff fc02 	bl	80008cc <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d908      	bls.n	80010e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e140      	b.n	8001358 <HAL_RCC_OscConfig+0x4ec>
 80010d6:	bf00      	nop
 80010d8:	40021000 	.word	0x40021000
 80010dc:	42420000 	.word	0x42420000
 80010e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010e4:	4b9e      	ldr	r3, [pc, #632]	; (8001360 <HAL_RCC_OscConfig+0x4f4>)
 80010e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d1e9      	bne.n	80010c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 0304 	and.w	r3, r3, #4
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	f000 80a6 	beq.w	800124a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010fe:	2300      	movs	r3, #0
 8001100:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001102:	4b97      	ldr	r3, [pc, #604]	; (8001360 <HAL_RCC_OscConfig+0x4f4>)
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d10d      	bne.n	800112a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800110e:	4b94      	ldr	r3, [pc, #592]	; (8001360 <HAL_RCC_OscConfig+0x4f4>)
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	4a93      	ldr	r2, [pc, #588]	; (8001360 <HAL_RCC_OscConfig+0x4f4>)
 8001114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001118:	61d3      	str	r3, [r2, #28]
 800111a:	4b91      	ldr	r3, [pc, #580]	; (8001360 <HAL_RCC_OscConfig+0x4f4>)
 800111c:	69db      	ldr	r3, [r3, #28]
 800111e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001122:	60bb      	str	r3, [r7, #8]
 8001124:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001126:	2301      	movs	r3, #1
 8001128:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800112a:	4b8e      	ldr	r3, [pc, #568]	; (8001364 <HAL_RCC_OscConfig+0x4f8>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001132:	2b00      	cmp	r3, #0
 8001134:	d118      	bne.n	8001168 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001136:	4b8b      	ldr	r3, [pc, #556]	; (8001364 <HAL_RCC_OscConfig+0x4f8>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a8a      	ldr	r2, [pc, #552]	; (8001364 <HAL_RCC_OscConfig+0x4f8>)
 800113c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001140:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001142:	f7ff fbc3 	bl	80008cc <HAL_GetTick>
 8001146:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001148:	e008      	b.n	800115c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800114a:	f7ff fbbf 	bl	80008cc <HAL_GetTick>
 800114e:	4602      	mov	r2, r0
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	2b64      	cmp	r3, #100	; 0x64
 8001156:	d901      	bls.n	800115c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001158:	2303      	movs	r3, #3
 800115a:	e0fd      	b.n	8001358 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800115c:	4b81      	ldr	r3, [pc, #516]	; (8001364 <HAL_RCC_OscConfig+0x4f8>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001164:	2b00      	cmp	r3, #0
 8001166:	d0f0      	beq.n	800114a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	2b01      	cmp	r3, #1
 800116e:	d106      	bne.n	800117e <HAL_RCC_OscConfig+0x312>
 8001170:	4b7b      	ldr	r3, [pc, #492]	; (8001360 <HAL_RCC_OscConfig+0x4f4>)
 8001172:	6a1b      	ldr	r3, [r3, #32]
 8001174:	4a7a      	ldr	r2, [pc, #488]	; (8001360 <HAL_RCC_OscConfig+0x4f4>)
 8001176:	f043 0301 	orr.w	r3, r3, #1
 800117a:	6213      	str	r3, [r2, #32]
 800117c:	e02d      	b.n	80011da <HAL_RCC_OscConfig+0x36e>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d10c      	bne.n	80011a0 <HAL_RCC_OscConfig+0x334>
 8001186:	4b76      	ldr	r3, [pc, #472]	; (8001360 <HAL_RCC_OscConfig+0x4f4>)
 8001188:	6a1b      	ldr	r3, [r3, #32]
 800118a:	4a75      	ldr	r2, [pc, #468]	; (8001360 <HAL_RCC_OscConfig+0x4f4>)
 800118c:	f023 0301 	bic.w	r3, r3, #1
 8001190:	6213      	str	r3, [r2, #32]
 8001192:	4b73      	ldr	r3, [pc, #460]	; (8001360 <HAL_RCC_OscConfig+0x4f4>)
 8001194:	6a1b      	ldr	r3, [r3, #32]
 8001196:	4a72      	ldr	r2, [pc, #456]	; (8001360 <HAL_RCC_OscConfig+0x4f4>)
 8001198:	f023 0304 	bic.w	r3, r3, #4
 800119c:	6213      	str	r3, [r2, #32]
 800119e:	e01c      	b.n	80011da <HAL_RCC_OscConfig+0x36e>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	2b05      	cmp	r3, #5
 80011a6:	d10c      	bne.n	80011c2 <HAL_RCC_OscConfig+0x356>
 80011a8:	4b6d      	ldr	r3, [pc, #436]	; (8001360 <HAL_RCC_OscConfig+0x4f4>)
 80011aa:	6a1b      	ldr	r3, [r3, #32]
 80011ac:	4a6c      	ldr	r2, [pc, #432]	; (8001360 <HAL_RCC_OscConfig+0x4f4>)
 80011ae:	f043 0304 	orr.w	r3, r3, #4
 80011b2:	6213      	str	r3, [r2, #32]
 80011b4:	4b6a      	ldr	r3, [pc, #424]	; (8001360 <HAL_RCC_OscConfig+0x4f4>)
 80011b6:	6a1b      	ldr	r3, [r3, #32]
 80011b8:	4a69      	ldr	r2, [pc, #420]	; (8001360 <HAL_RCC_OscConfig+0x4f4>)
 80011ba:	f043 0301 	orr.w	r3, r3, #1
 80011be:	6213      	str	r3, [r2, #32]
 80011c0:	e00b      	b.n	80011da <HAL_RCC_OscConfig+0x36e>
 80011c2:	4b67      	ldr	r3, [pc, #412]	; (8001360 <HAL_RCC_OscConfig+0x4f4>)
 80011c4:	6a1b      	ldr	r3, [r3, #32]
 80011c6:	4a66      	ldr	r2, [pc, #408]	; (8001360 <HAL_RCC_OscConfig+0x4f4>)
 80011c8:	f023 0301 	bic.w	r3, r3, #1
 80011cc:	6213      	str	r3, [r2, #32]
 80011ce:	4b64      	ldr	r3, [pc, #400]	; (8001360 <HAL_RCC_OscConfig+0x4f4>)
 80011d0:	6a1b      	ldr	r3, [r3, #32]
 80011d2:	4a63      	ldr	r2, [pc, #396]	; (8001360 <HAL_RCC_OscConfig+0x4f4>)
 80011d4:	f023 0304 	bic.w	r3, r3, #4
 80011d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d015      	beq.n	800120e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011e2:	f7ff fb73 	bl	80008cc <HAL_GetTick>
 80011e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011e8:	e00a      	b.n	8001200 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011ea:	f7ff fb6f 	bl	80008cc <HAL_GetTick>
 80011ee:	4602      	mov	r2, r0
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d901      	bls.n	8001200 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e0ab      	b.n	8001358 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001200:	4b57      	ldr	r3, [pc, #348]	; (8001360 <HAL_RCC_OscConfig+0x4f4>)
 8001202:	6a1b      	ldr	r3, [r3, #32]
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	2b00      	cmp	r3, #0
 800120a:	d0ee      	beq.n	80011ea <HAL_RCC_OscConfig+0x37e>
 800120c:	e014      	b.n	8001238 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800120e:	f7ff fb5d 	bl	80008cc <HAL_GetTick>
 8001212:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001214:	e00a      	b.n	800122c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001216:	f7ff fb59 	bl	80008cc <HAL_GetTick>
 800121a:	4602      	mov	r2, r0
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	f241 3288 	movw	r2, #5000	; 0x1388
 8001224:	4293      	cmp	r3, r2
 8001226:	d901      	bls.n	800122c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e095      	b.n	8001358 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800122c:	4b4c      	ldr	r3, [pc, #304]	; (8001360 <HAL_RCC_OscConfig+0x4f4>)
 800122e:	6a1b      	ldr	r3, [r3, #32]
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	2b00      	cmp	r3, #0
 8001236:	d1ee      	bne.n	8001216 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001238:	7dfb      	ldrb	r3, [r7, #23]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d105      	bne.n	800124a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800123e:	4b48      	ldr	r3, [pc, #288]	; (8001360 <HAL_RCC_OscConfig+0x4f4>)
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	4a47      	ldr	r2, [pc, #284]	; (8001360 <HAL_RCC_OscConfig+0x4f4>)
 8001244:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001248:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	69db      	ldr	r3, [r3, #28]
 800124e:	2b00      	cmp	r3, #0
 8001250:	f000 8081 	beq.w	8001356 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001254:	4b42      	ldr	r3, [pc, #264]	; (8001360 <HAL_RCC_OscConfig+0x4f4>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 030c 	and.w	r3, r3, #12
 800125c:	2b08      	cmp	r3, #8
 800125e:	d061      	beq.n	8001324 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	69db      	ldr	r3, [r3, #28]
 8001264:	2b02      	cmp	r3, #2
 8001266:	d146      	bne.n	80012f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001268:	4b3f      	ldr	r3, [pc, #252]	; (8001368 <HAL_RCC_OscConfig+0x4fc>)
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126e:	f7ff fb2d 	bl	80008cc <HAL_GetTick>
 8001272:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001274:	e008      	b.n	8001288 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001276:	f7ff fb29 	bl	80008cc <HAL_GetTick>
 800127a:	4602      	mov	r2, r0
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	2b02      	cmp	r3, #2
 8001282:	d901      	bls.n	8001288 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001284:	2303      	movs	r3, #3
 8001286:	e067      	b.n	8001358 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001288:	4b35      	ldr	r3, [pc, #212]	; (8001360 <HAL_RCC_OscConfig+0x4f4>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d1f0      	bne.n	8001276 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6a1b      	ldr	r3, [r3, #32]
 8001298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800129c:	d108      	bne.n	80012b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800129e:	4b30      	ldr	r3, [pc, #192]	; (8001360 <HAL_RCC_OscConfig+0x4f4>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	492d      	ldr	r1, [pc, #180]	; (8001360 <HAL_RCC_OscConfig+0x4f4>)
 80012ac:	4313      	orrs	r3, r2
 80012ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012b0:	4b2b      	ldr	r3, [pc, #172]	; (8001360 <HAL_RCC_OscConfig+0x4f4>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6a19      	ldr	r1, [r3, #32]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c0:	430b      	orrs	r3, r1
 80012c2:	4927      	ldr	r1, [pc, #156]	; (8001360 <HAL_RCC_OscConfig+0x4f4>)
 80012c4:	4313      	orrs	r3, r2
 80012c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012c8:	4b27      	ldr	r3, [pc, #156]	; (8001368 <HAL_RCC_OscConfig+0x4fc>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ce:	f7ff fafd 	bl	80008cc <HAL_GetTick>
 80012d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012d4:	e008      	b.n	80012e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012d6:	f7ff faf9 	bl	80008cc <HAL_GetTick>
 80012da:	4602      	mov	r2, r0
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d901      	bls.n	80012e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80012e4:	2303      	movs	r3, #3
 80012e6:	e037      	b.n	8001358 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012e8:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <HAL_RCC_OscConfig+0x4f4>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d0f0      	beq.n	80012d6 <HAL_RCC_OscConfig+0x46a>
 80012f4:	e02f      	b.n	8001356 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012f6:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <HAL_RCC_OscConfig+0x4fc>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fc:	f7ff fae6 	bl	80008cc <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001302:	e008      	b.n	8001316 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001304:	f7ff fae2 	bl	80008cc <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b02      	cmp	r3, #2
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e020      	b.n	8001358 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001316:	4b12      	ldr	r3, [pc, #72]	; (8001360 <HAL_RCC_OscConfig+0x4f4>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1f0      	bne.n	8001304 <HAL_RCC_OscConfig+0x498>
 8001322:	e018      	b.n	8001356 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	69db      	ldr	r3, [r3, #28]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d101      	bne.n	8001330 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e013      	b.n	8001358 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001330:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <HAL_RCC_OscConfig+0x4f4>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a1b      	ldr	r3, [r3, #32]
 8001340:	429a      	cmp	r2, r3
 8001342:	d106      	bne.n	8001352 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800134e:	429a      	cmp	r2, r3
 8001350:	d001      	beq.n	8001356 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e000      	b.n	8001358 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001356:	2300      	movs	r3, #0
}
 8001358:	4618      	mov	r0, r3
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40021000 	.word	0x40021000
 8001364:	40007000 	.word	0x40007000
 8001368:	42420060 	.word	0x42420060

0800136c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d101      	bne.n	8001380 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e0d0      	b.n	8001522 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001380:	4b6a      	ldr	r3, [pc, #424]	; (800152c <HAL_RCC_ClockConfig+0x1c0>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0307 	and.w	r3, r3, #7
 8001388:	683a      	ldr	r2, [r7, #0]
 800138a:	429a      	cmp	r2, r3
 800138c:	d910      	bls.n	80013b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800138e:	4b67      	ldr	r3, [pc, #412]	; (800152c <HAL_RCC_ClockConfig+0x1c0>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f023 0207 	bic.w	r2, r3, #7
 8001396:	4965      	ldr	r1, [pc, #404]	; (800152c <HAL_RCC_ClockConfig+0x1c0>)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	4313      	orrs	r3, r2
 800139c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800139e:	4b63      	ldr	r3, [pc, #396]	; (800152c <HAL_RCC_ClockConfig+0x1c0>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	683a      	ldr	r2, [r7, #0]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d001      	beq.n	80013b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e0b8      	b.n	8001522 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d020      	beq.n	80013fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d005      	beq.n	80013d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013c8:	4b59      	ldr	r3, [pc, #356]	; (8001530 <HAL_RCC_ClockConfig+0x1c4>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	4a58      	ldr	r2, [pc, #352]	; (8001530 <HAL_RCC_ClockConfig+0x1c4>)
 80013ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80013d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0308 	and.w	r3, r3, #8
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d005      	beq.n	80013ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013e0:	4b53      	ldr	r3, [pc, #332]	; (8001530 <HAL_RCC_ClockConfig+0x1c4>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	4a52      	ldr	r2, [pc, #328]	; (8001530 <HAL_RCC_ClockConfig+0x1c4>)
 80013e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80013ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013ec:	4b50      	ldr	r3, [pc, #320]	; (8001530 <HAL_RCC_ClockConfig+0x1c4>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	494d      	ldr	r1, [pc, #308]	; (8001530 <HAL_RCC_ClockConfig+0x1c4>)
 80013fa:	4313      	orrs	r3, r2
 80013fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	2b00      	cmp	r3, #0
 8001408:	d040      	beq.n	800148c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d107      	bne.n	8001422 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001412:	4b47      	ldr	r3, [pc, #284]	; (8001530 <HAL_RCC_ClockConfig+0x1c4>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d115      	bne.n	800144a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e07f      	b.n	8001522 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	2b02      	cmp	r3, #2
 8001428:	d107      	bne.n	800143a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800142a:	4b41      	ldr	r3, [pc, #260]	; (8001530 <HAL_RCC_ClockConfig+0x1c4>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d109      	bne.n	800144a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e073      	b.n	8001522 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800143a:	4b3d      	ldr	r3, [pc, #244]	; (8001530 <HAL_RCC_ClockConfig+0x1c4>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e06b      	b.n	8001522 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800144a:	4b39      	ldr	r3, [pc, #228]	; (8001530 <HAL_RCC_ClockConfig+0x1c4>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f023 0203 	bic.w	r2, r3, #3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	4936      	ldr	r1, [pc, #216]	; (8001530 <HAL_RCC_ClockConfig+0x1c4>)
 8001458:	4313      	orrs	r3, r2
 800145a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800145c:	f7ff fa36 	bl	80008cc <HAL_GetTick>
 8001460:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001462:	e00a      	b.n	800147a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001464:	f7ff fa32 	bl	80008cc <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001472:	4293      	cmp	r3, r2
 8001474:	d901      	bls.n	800147a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e053      	b.n	8001522 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800147a:	4b2d      	ldr	r3, [pc, #180]	; (8001530 <HAL_RCC_ClockConfig+0x1c4>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f003 020c 	and.w	r2, r3, #12
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	429a      	cmp	r2, r3
 800148a:	d1eb      	bne.n	8001464 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800148c:	4b27      	ldr	r3, [pc, #156]	; (800152c <HAL_RCC_ClockConfig+0x1c0>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0307 	and.w	r3, r3, #7
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	429a      	cmp	r2, r3
 8001498:	d210      	bcs.n	80014bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800149a:	4b24      	ldr	r3, [pc, #144]	; (800152c <HAL_RCC_ClockConfig+0x1c0>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f023 0207 	bic.w	r2, r3, #7
 80014a2:	4922      	ldr	r1, [pc, #136]	; (800152c <HAL_RCC_ClockConfig+0x1c0>)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014aa:	4b20      	ldr	r3, [pc, #128]	; (800152c <HAL_RCC_ClockConfig+0x1c0>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	683a      	ldr	r2, [r7, #0]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d001      	beq.n	80014bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e032      	b.n	8001522 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0304 	and.w	r3, r3, #4
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d008      	beq.n	80014da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014c8:	4b19      	ldr	r3, [pc, #100]	; (8001530 <HAL_RCC_ClockConfig+0x1c4>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	4916      	ldr	r1, [pc, #88]	; (8001530 <HAL_RCC_ClockConfig+0x1c4>)
 80014d6:	4313      	orrs	r3, r2
 80014d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0308 	and.w	r3, r3, #8
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d009      	beq.n	80014fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014e6:	4b12      	ldr	r3, [pc, #72]	; (8001530 <HAL_RCC_ClockConfig+0x1c4>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	00db      	lsls	r3, r3, #3
 80014f4:	490e      	ldr	r1, [pc, #56]	; (8001530 <HAL_RCC_ClockConfig+0x1c4>)
 80014f6:	4313      	orrs	r3, r2
 80014f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014fa:	f000 f821 	bl	8001540 <HAL_RCC_GetSysClockFreq>
 80014fe:	4602      	mov	r2, r0
 8001500:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <HAL_RCC_ClockConfig+0x1c4>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	091b      	lsrs	r3, r3, #4
 8001506:	f003 030f 	and.w	r3, r3, #15
 800150a:	490a      	ldr	r1, [pc, #40]	; (8001534 <HAL_RCC_ClockConfig+0x1c8>)
 800150c:	5ccb      	ldrb	r3, [r1, r3]
 800150e:	fa22 f303 	lsr.w	r3, r2, r3
 8001512:	4a09      	ldr	r2, [pc, #36]	; (8001538 <HAL_RCC_ClockConfig+0x1cc>)
 8001514:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <HAL_RCC_ClockConfig+0x1d0>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff f994 	bl	8000848 <HAL_InitTick>

  return HAL_OK;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40022000 	.word	0x40022000
 8001530:	40021000 	.word	0x40021000
 8001534:	0800373c 	.word	0x0800373c
 8001538:	20000020 	.word	0x20000020
 800153c:	20000024 	.word	0x20000024

08001540 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001540:	b490      	push	{r4, r7}
 8001542:	b08a      	sub	sp, #40	; 0x28
 8001544:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001546:	4b2a      	ldr	r3, [pc, #168]	; (80015f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001548:	1d3c      	adds	r4, r7, #4
 800154a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800154c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001550:	f240 2301 	movw	r3, #513	; 0x201
 8001554:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001556:	2300      	movs	r3, #0
 8001558:	61fb      	str	r3, [r7, #28]
 800155a:	2300      	movs	r3, #0
 800155c:	61bb      	str	r3, [r7, #24]
 800155e:	2300      	movs	r3, #0
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001566:	2300      	movs	r3, #0
 8001568:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800156a:	4b22      	ldr	r3, [pc, #136]	; (80015f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	f003 030c 	and.w	r3, r3, #12
 8001576:	2b04      	cmp	r3, #4
 8001578:	d002      	beq.n	8001580 <HAL_RCC_GetSysClockFreq+0x40>
 800157a:	2b08      	cmp	r3, #8
 800157c:	d003      	beq.n	8001586 <HAL_RCC_GetSysClockFreq+0x46>
 800157e:	e02d      	b.n	80015dc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001580:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001582:	623b      	str	r3, [r7, #32]
      break;
 8001584:	e02d      	b.n	80015e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	0c9b      	lsrs	r3, r3, #18
 800158a:	f003 030f 	and.w	r3, r3, #15
 800158e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001592:	4413      	add	r3, r2
 8001594:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001598:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d013      	beq.n	80015cc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015a4:	4b13      	ldr	r3, [pc, #76]	; (80015f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	0c5b      	lsrs	r3, r3, #17
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015b2:	4413      	add	r3, r2
 80015b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80015b8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	4a0e      	ldr	r2, [pc, #56]	; (80015f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015be:	fb02 f203 	mul.w	r2, r2, r3
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
 80015ca:	e004      	b.n	80015d6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	4a0b      	ldr	r2, [pc, #44]	; (80015fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80015d0:	fb02 f303 	mul.w	r3, r2, r3
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80015d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d8:	623b      	str	r3, [r7, #32]
      break;
 80015da:	e002      	b.n	80015e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015de:	623b      	str	r3, [r7, #32]
      break;
 80015e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015e2:	6a3b      	ldr	r3, [r7, #32]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3728      	adds	r7, #40	; 0x28
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc90      	pop	{r4, r7}
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	08003718 	.word	0x08003718
 80015f4:	40021000 	.word	0x40021000
 80015f8:	007a1200 	.word	0x007a1200
 80015fc:	003d0900 	.word	0x003d0900

08001600 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001608:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <RCC_Delay+0x34>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a0a      	ldr	r2, [pc, #40]	; (8001638 <RCC_Delay+0x38>)
 800160e:	fba2 2303 	umull	r2, r3, r2, r3
 8001612:	0a5b      	lsrs	r3, r3, #9
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	fb02 f303 	mul.w	r3, r2, r3
 800161a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800161c:	bf00      	nop
  }
  while (Delay --);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	1e5a      	subs	r2, r3, #1
 8001622:	60fa      	str	r2, [r7, #12]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1f9      	bne.n	800161c <RCC_Delay+0x1c>
}
 8001628:	bf00      	nop
 800162a:	bf00      	nop
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr
 8001634:	20000020 	.word	0x20000020
 8001638:	10624dd3 	.word	0x10624dd3

0800163c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d101      	bne.n	800164e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e041      	b.n	80016d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	d106      	bne.n	8001668 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff f856 	bl	8000714 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2202      	movs	r2, #2
 800166c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3304      	adds	r3, #4
 8001678:	4619      	mov	r1, r3
 800167a:	4610      	mov	r0, r2
 800167c:	f000 fa26 	bl	8001acc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2201      	movs	r2, #1
 800168c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2201      	movs	r2, #1
 800169c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2201      	movs	r2, #1
 80016a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2201      	movs	r2, #1
 80016ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2201      	movs	r2, #1
 80016b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2201      	movs	r2, #1
 80016bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d122      	bne.n	8001736 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d11b      	bne.n	8001736 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f06f 0202 	mvn.w	r2, #2
 8001706:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2201      	movs	r2, #1
 800170c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	f003 0303 	and.w	r3, r3, #3
 8001718:	2b00      	cmp	r3, #0
 800171a:	d003      	beq.n	8001724 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f000 f9ba 	bl	8001a96 <HAL_TIM_IC_CaptureCallback>
 8001722:	e005      	b.n	8001730 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f000 f9ad 	bl	8001a84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 f9bc 	bl	8001aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	691b      	ldr	r3, [r3, #16]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b04      	cmp	r3, #4
 8001742:	d122      	bne.n	800178a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	f003 0304 	and.w	r3, r3, #4
 800174e:	2b04      	cmp	r3, #4
 8001750:	d11b      	bne.n	800178a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f06f 0204 	mvn.w	r2, #4
 800175a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2202      	movs	r2, #2
 8001760:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800176c:	2b00      	cmp	r3, #0
 800176e:	d003      	beq.n	8001778 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f000 f990 	bl	8001a96 <HAL_TIM_IC_CaptureCallback>
 8001776:	e005      	b.n	8001784 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f000 f983 	bl	8001a84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f000 f992 	bl	8001aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	f003 0308 	and.w	r3, r3, #8
 8001794:	2b08      	cmp	r3, #8
 8001796:	d122      	bne.n	80017de <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	f003 0308 	and.w	r3, r3, #8
 80017a2:	2b08      	cmp	r3, #8
 80017a4:	d11b      	bne.n	80017de <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f06f 0208 	mvn.w	r2, #8
 80017ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2204      	movs	r2, #4
 80017b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	69db      	ldr	r3, [r3, #28]
 80017bc:	f003 0303 	and.w	r3, r3, #3
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d003      	beq.n	80017cc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f000 f966 	bl	8001a96 <HAL_TIM_IC_CaptureCallback>
 80017ca:	e005      	b.n	80017d8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f000 f959 	bl	8001a84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 f968 	bl	8001aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	691b      	ldr	r3, [r3, #16]
 80017e4:	f003 0310 	and.w	r3, r3, #16
 80017e8:	2b10      	cmp	r3, #16
 80017ea:	d122      	bne.n	8001832 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	f003 0310 	and.w	r3, r3, #16
 80017f6:	2b10      	cmp	r3, #16
 80017f8:	d11b      	bne.n	8001832 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f06f 0210 	mvn.w	r2, #16
 8001802:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2208      	movs	r2, #8
 8001808:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	69db      	ldr	r3, [r3, #28]
 8001810:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001814:	2b00      	cmp	r3, #0
 8001816:	d003      	beq.n	8001820 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 f93c 	bl	8001a96 <HAL_TIM_IC_CaptureCallback>
 800181e:	e005      	b.n	800182c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f000 f92f 	bl	8001a84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 f93e 	bl	8001aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	2b01      	cmp	r3, #1
 800183e:	d10e      	bne.n	800185e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	2b01      	cmp	r3, #1
 800184c:	d107      	bne.n	800185e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f06f 0201 	mvn.w	r2, #1
 8001856:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f000 f90a 	bl	8001a72 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001868:	2b80      	cmp	r3, #128	; 0x80
 800186a:	d10e      	bne.n	800188a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001876:	2b80      	cmp	r3, #128	; 0x80
 8001878:	d107      	bne.n	800188a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f000 fa80 	bl	8001d8a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	691b      	ldr	r3, [r3, #16]
 8001890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001894:	2b40      	cmp	r3, #64	; 0x40
 8001896:	d10e      	bne.n	80018b6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018a2:	2b40      	cmp	r3, #64	; 0x40
 80018a4:	d107      	bne.n	80018b6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80018ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f000 f902 	bl	8001aba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	f003 0320 	and.w	r3, r3, #32
 80018c0:	2b20      	cmp	r3, #32
 80018c2:	d10e      	bne.n	80018e2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	f003 0320 	and.w	r3, r3, #32
 80018ce:	2b20      	cmp	r3, #32
 80018d0:	d107      	bne.n	80018e2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f06f 0220 	mvn.w	r2, #32
 80018da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f000 fa4b 	bl	8001d78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b084      	sub	sp, #16
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
 80018f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d101      	bne.n	8001902 <HAL_TIM_ConfigClockSource+0x18>
 80018fe:	2302      	movs	r3, #2
 8001900:	e0b3      	b.n	8001a6a <HAL_TIM_ConfigClockSource+0x180>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2201      	movs	r2, #1
 8001906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2202      	movs	r2, #2
 800190e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001920:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001928:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800193a:	d03e      	beq.n	80019ba <HAL_TIM_ConfigClockSource+0xd0>
 800193c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001940:	f200 8087 	bhi.w	8001a52 <HAL_TIM_ConfigClockSource+0x168>
 8001944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001948:	f000 8085 	beq.w	8001a56 <HAL_TIM_ConfigClockSource+0x16c>
 800194c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001950:	d87f      	bhi.n	8001a52 <HAL_TIM_ConfigClockSource+0x168>
 8001952:	2b70      	cmp	r3, #112	; 0x70
 8001954:	d01a      	beq.n	800198c <HAL_TIM_ConfigClockSource+0xa2>
 8001956:	2b70      	cmp	r3, #112	; 0x70
 8001958:	d87b      	bhi.n	8001a52 <HAL_TIM_ConfigClockSource+0x168>
 800195a:	2b60      	cmp	r3, #96	; 0x60
 800195c:	d050      	beq.n	8001a00 <HAL_TIM_ConfigClockSource+0x116>
 800195e:	2b60      	cmp	r3, #96	; 0x60
 8001960:	d877      	bhi.n	8001a52 <HAL_TIM_ConfigClockSource+0x168>
 8001962:	2b50      	cmp	r3, #80	; 0x50
 8001964:	d03c      	beq.n	80019e0 <HAL_TIM_ConfigClockSource+0xf6>
 8001966:	2b50      	cmp	r3, #80	; 0x50
 8001968:	d873      	bhi.n	8001a52 <HAL_TIM_ConfigClockSource+0x168>
 800196a:	2b40      	cmp	r3, #64	; 0x40
 800196c:	d058      	beq.n	8001a20 <HAL_TIM_ConfigClockSource+0x136>
 800196e:	2b40      	cmp	r3, #64	; 0x40
 8001970:	d86f      	bhi.n	8001a52 <HAL_TIM_ConfigClockSource+0x168>
 8001972:	2b30      	cmp	r3, #48	; 0x30
 8001974:	d064      	beq.n	8001a40 <HAL_TIM_ConfigClockSource+0x156>
 8001976:	2b30      	cmp	r3, #48	; 0x30
 8001978:	d86b      	bhi.n	8001a52 <HAL_TIM_ConfigClockSource+0x168>
 800197a:	2b20      	cmp	r3, #32
 800197c:	d060      	beq.n	8001a40 <HAL_TIM_ConfigClockSource+0x156>
 800197e:	2b20      	cmp	r3, #32
 8001980:	d867      	bhi.n	8001a52 <HAL_TIM_ConfigClockSource+0x168>
 8001982:	2b00      	cmp	r3, #0
 8001984:	d05c      	beq.n	8001a40 <HAL_TIM_ConfigClockSource+0x156>
 8001986:	2b10      	cmp	r3, #16
 8001988:	d05a      	beq.n	8001a40 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800198a:	e062      	b.n	8001a52 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6818      	ldr	r0, [r3, #0]
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	6899      	ldr	r1, [r3, #8]
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	f000 f96f 	bl	8001c7e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80019ae:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	68fa      	ldr	r2, [r7, #12]
 80019b6:	609a      	str	r2, [r3, #8]
      break;
 80019b8:	e04e      	b.n	8001a58 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6818      	ldr	r0, [r3, #0]
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	6899      	ldr	r1, [r3, #8]
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685a      	ldr	r2, [r3, #4]
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	f000 f958 	bl	8001c7e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019dc:	609a      	str	r2, [r3, #8]
      break;
 80019de:	e03b      	b.n	8001a58 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6818      	ldr	r0, [r3, #0]
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	6859      	ldr	r1, [r3, #4]
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	461a      	mov	r2, r3
 80019ee:	f000 f8cf 	bl	8001b90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2150      	movs	r1, #80	; 0x50
 80019f8:	4618      	mov	r0, r3
 80019fa:	f000 f926 	bl	8001c4a <TIM_ITRx_SetConfig>
      break;
 80019fe:	e02b      	b.n	8001a58 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6818      	ldr	r0, [r3, #0]
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	6859      	ldr	r1, [r3, #4]
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	f000 f8ed 	bl	8001bec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2160      	movs	r1, #96	; 0x60
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f000 f916 	bl	8001c4a <TIM_ITRx_SetConfig>
      break;
 8001a1e:	e01b      	b.n	8001a58 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6818      	ldr	r0, [r3, #0]
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	6859      	ldr	r1, [r3, #4]
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	f000 f8af 	bl	8001b90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2140      	movs	r1, #64	; 0x40
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f000 f906 	bl	8001c4a <TIM_ITRx_SetConfig>
      break;
 8001a3e:	e00b      	b.n	8001a58 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4610      	mov	r0, r2
 8001a4c:	f000 f8fd 	bl	8001c4a <TIM_ITRx_SetConfig>
        break;
 8001a50:	e002      	b.n	8001a58 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001a52:	bf00      	nop
 8001a54:	e000      	b.n	8001a58 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001a56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr

08001a84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bc80      	pop	{r7}
 8001a94:	4770      	bx	lr

08001a96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bc80      	pop	{r7}
 8001aa6:	4770      	bx	lr

08001aa8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bc80      	pop	{r7}
 8001ab8:	4770      	bx	lr

08001aba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b083      	sub	sp, #12
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr

08001acc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a29      	ldr	r2, [pc, #164]	; (8001b84 <TIM_Base_SetConfig+0xb8>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d00b      	beq.n	8001afc <TIM_Base_SetConfig+0x30>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aea:	d007      	beq.n	8001afc <TIM_Base_SetConfig+0x30>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4a26      	ldr	r2, [pc, #152]	; (8001b88 <TIM_Base_SetConfig+0xbc>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d003      	beq.n	8001afc <TIM_Base_SetConfig+0x30>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4a25      	ldr	r2, [pc, #148]	; (8001b8c <TIM_Base_SetConfig+0xc0>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d108      	bne.n	8001b0e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	68fa      	ldr	r2, [r7, #12]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a1c      	ldr	r2, [pc, #112]	; (8001b84 <TIM_Base_SetConfig+0xb8>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d00b      	beq.n	8001b2e <TIM_Base_SetConfig+0x62>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b1c:	d007      	beq.n	8001b2e <TIM_Base_SetConfig+0x62>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a19      	ldr	r2, [pc, #100]	; (8001b88 <TIM_Base_SetConfig+0xbc>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d003      	beq.n	8001b2e <TIM_Base_SetConfig+0x62>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a18      	ldr	r2, [pc, #96]	; (8001b8c <TIM_Base_SetConfig+0xc0>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d108      	bne.n	8001b40 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68fa      	ldr	r2, [r7, #12]
 8001b52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a07      	ldr	r2, [pc, #28]	; (8001b84 <TIM_Base_SetConfig+0xb8>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d103      	bne.n	8001b74 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	691a      	ldr	r2, [r3, #16]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	615a      	str	r2, [r3, #20]
}
 8001b7a:	bf00      	nop
 8001b7c:	3714      	adds	r7, #20
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr
 8001b84:	40012c00 	.word	0x40012c00
 8001b88:	40000400 	.word	0x40000400
 8001b8c:	40000800 	.word	0x40000800

08001b90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b087      	sub	sp, #28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6a1b      	ldr	r3, [r3, #32]
 8001ba6:	f023 0201 	bic.w	r2, r3, #1
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	011b      	lsls	r3, r3, #4
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f023 030a 	bic.w	r3, r3, #10
 8001bcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001bce:	697a      	ldr	r2, [r7, #20]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	621a      	str	r2, [r3, #32]
}
 8001be2:	bf00      	nop
 8001be4:	371c      	adds	r7, #28
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr

08001bec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b087      	sub	sp, #28
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6a1b      	ldr	r3, [r3, #32]
 8001bfc:	f023 0210 	bic.w	r2, r3, #16
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6a1b      	ldr	r3, [r3, #32]
 8001c0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001c16:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	031b      	lsls	r3, r3, #12
 8001c1c:	697a      	ldr	r2, [r7, #20]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001c28:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	011b      	lsls	r3, r3, #4
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	621a      	str	r2, [r3, #32]
}
 8001c40:	bf00      	nop
 8001c42:	371c      	adds	r7, #28
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bc80      	pop	{r7}
 8001c48:	4770      	bx	lr

08001c4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b085      	sub	sp, #20
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
 8001c52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001c62:	683a      	ldr	r2, [r7, #0]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	f043 0307 	orr.w	r3, r3, #7
 8001c6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	609a      	str	r2, [r3, #8]
}
 8001c74:	bf00      	nop
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr

08001c7e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b087      	sub	sp, #28
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	60f8      	str	r0, [r7, #12]
 8001c86:	60b9      	str	r1, [r7, #8]
 8001c88:	607a      	str	r2, [r7, #4]
 8001c8a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001c98:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	021a      	lsls	r2, r3, #8
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	697a      	ldr	r2, [r7, #20]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	609a      	str	r2, [r3, #8]
}
 8001cb2:	bf00      	nop
 8001cb4:	371c      	adds	r7, #28
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr

08001cbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d101      	bne.n	8001cd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	e046      	b.n	8001d62 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2202      	movs	r2, #2
 8001ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a16      	ldr	r2, [pc, #88]	; (8001d6c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d00e      	beq.n	8001d36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d20:	d009      	beq.n	8001d36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a12      	ldr	r2, [pc, #72]	; (8001d70 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d004      	beq.n	8001d36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a10      	ldr	r2, [pc, #64]	; (8001d74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d10c      	bne.n	8001d50 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68ba      	ldr	r2, [r7, #8]
 8001d4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr
 8001d6c:	40012c00 	.word	0x40012c00
 8001d70:	40000400 	.word	0x40000400
 8001d74:	40000800 	.word	0x40000800

08001d78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc80      	pop	{r7}
 8001d88:	4770      	bx	lr

08001d8a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr

08001d9c <AES_keyschedule_enc_LL>:
 8001d9c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001da0:	1092      	asrs	r2, r2, #2
 8001da2:	2a00      	cmp	r2, #0
 8001da4:	b082      	sub	sp, #8
 8001da6:	dd06      	ble.n	8001db6 <AES_keyschedule_enc_LL+0x1a>
 8001da8:	0095      	lsls	r5, r2, #2
 8001daa:	2300      	movs	r3, #0
 8001dac:	58c4      	ldr	r4, [r0, r3]
 8001dae:	50cc      	str	r4, [r1, r3]
 8001db0:	3304      	adds	r3, #4
 8001db2:	42ab      	cmp	r3, r5
 8001db4:	d1fa      	bne.n	8001dac <AES_keyschedule_enc_LL+0x10>
 8001db6:	2a06      	cmp	r2, #6
 8001db8:	d007      	beq.n	8001dca <AES_keyschedule_enc_LL+0x2e>
 8001dba:	2a08      	cmp	r2, #8
 8001dbc:	d06c      	beq.n	8001e98 <AES_keyschedule_enc_LL+0xfc>
 8001dbe:	2a04      	cmp	r2, #4
 8001dc0:	d03a      	beq.n	8001e38 <AES_keyschedule_enc_LL+0x9c>
 8001dc2:	b002      	add	sp, #8
 8001dc4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001dc8:	4770      	bx	lr
 8001dca:	f8df c18c 	ldr.w	ip, [pc, #396]	; 8001f58 <AES_keyschedule_enc_LL+0x1bc>
 8001dce:	684c      	ldr	r4, [r1, #4]
 8001dd0:	688d      	ldr	r5, [r1, #8]
 8001dd2:	68c8      	ldr	r0, [r1, #12]
 8001dd4:	680e      	ldr	r6, [r1, #0]
 8001dd6:	4b5f      	ldr	r3, [pc, #380]	; (8001f54 <AES_keyschedule_enc_LL+0x1b8>)
 8001dd8:	f101 08a8 	add.w	r8, r1, #168	; 0xa8
 8001ddc:	e005      	b.n	8001dea <AES_keyschedule_enc_LL+0x4e>
 8001dde:	690f      	ldr	r7, [r1, #16]
 8001de0:	3118      	adds	r1, #24
 8001de2:	4047      	eors	r7, r0
 8001de4:	407a      	eors	r2, r7
 8001de6:	614a      	str	r2, [r1, #20]
 8001de8:	610f      	str	r7, [r1, #16]
 8001dea:	694a      	ldr	r2, [r1, #20]
 8001dec:	f85c 9f04 	ldr.w	r9, [ip, #4]!
 8001df0:	fa5f fa82 	uxtb.w	sl, r2
 8001df4:	0e17      	lsrs	r7, r2, #24
 8001df6:	f813 a00a 	ldrb.w	sl, [r3, sl]
 8001dfa:	5ddf      	ldrb	r7, [r3, r7]
 8001dfc:	f3c2 4b07 	ubfx	fp, r2, #16, #8
 8001e00:	ea47 270a 	orr.w	r7, r7, sl, lsl #8
 8001e04:	f813 b00b 	ldrb.w	fp, [r3, fp]
 8001e08:	f3c2 2a07 	ubfx	sl, r2, #8, #8
 8001e0c:	f813 a00a 	ldrb.w	sl, [r3, sl]
 8001e10:	ea47 670b 	orr.w	r7, r7, fp, lsl #24
 8001e14:	ea47 470a 	orr.w	r7, r7, sl, lsl #16
 8001e18:	ea86 0609 	eor.w	r6, r6, r9
 8001e1c:	407e      	eors	r6, r7
 8001e1e:	4074      	eors	r4, r6
 8001e20:	4065      	eors	r5, r4
 8001e22:	4068      	eors	r0, r5
 8001e24:	4541      	cmp	r1, r8
 8001e26:	6248      	str	r0, [r1, #36]	; 0x24
 8001e28:	620d      	str	r5, [r1, #32]
 8001e2a:	61cc      	str	r4, [r1, #28]
 8001e2c:	618e      	str	r6, [r1, #24]
 8001e2e:	d1d6      	bne.n	8001dde <AES_keyschedule_enc_LL+0x42>
 8001e30:	b002      	add	sp, #8
 8001e32:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001e36:	4770      	bx	lr
 8001e38:	4608      	mov	r0, r1
 8001e3a:	f850 4b90 	ldr.w	r4, [r0], #144
 8001e3e:	4f46      	ldr	r7, [pc, #280]	; (8001f58 <AES_keyschedule_enc_LL+0x1bc>)
 8001e40:	68ca      	ldr	r2, [r1, #12]
 8001e42:	684d      	ldr	r5, [r1, #4]
 8001e44:	688e      	ldr	r6, [r1, #8]
 8001e46:	4b43      	ldr	r3, [pc, #268]	; (8001f54 <AES_keyschedule_enc_LL+0x1b8>)
 8001e48:	e000      	b.n	8001e4c <AES_keyschedule_enc_LL+0xb0>
 8001e4a:	3110      	adds	r1, #16
 8001e4c:	fa5f f882 	uxtb.w	r8, r2
 8001e50:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8001e54:	f813 9008 	ldrb.w	r9, [r3, r8]
 8001e58:	f813 c00c 	ldrb.w	ip, [r3, ip]
 8001e5c:	f3c2 4807 	ubfx	r8, r2, #16, #8
 8001e60:	f813 a008 	ldrb.w	sl, [r3, r8]
 8001e64:	f3c2 2807 	ubfx	r8, r2, #8, #8
 8001e68:	ea4c 2c09 	orr.w	ip, ip, r9, lsl #8
 8001e6c:	f813 9008 	ldrb.w	r9, [r3, r8]
 8001e70:	f857 8f04 	ldr.w	r8, [r7, #4]!
 8001e74:	ea4c 6c0a 	orr.w	ip, ip, sl, lsl #24
 8001e78:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
 8001e7c:	ea84 0408 	eor.w	r4, r4, r8
 8001e80:	ea84 040c 	eor.w	r4, r4, ip
 8001e84:	4065      	eors	r5, r4
 8001e86:	406e      	eors	r6, r5
 8001e88:	4072      	eors	r2, r6
 8001e8a:	4281      	cmp	r1, r0
 8001e8c:	61ca      	str	r2, [r1, #28]
 8001e8e:	618e      	str	r6, [r1, #24]
 8001e90:	614d      	str	r5, [r1, #20]
 8001e92:	610c      	str	r4, [r1, #16]
 8001e94:	d1d9      	bne.n	8001e4a <AES_keyschedule_enc_LL+0xae>
 8001e96:	e794      	b.n	8001dc2 <AES_keyschedule_enc_LL+0x26>
 8001e98:	4b2e      	ldr	r3, [pc, #184]	; (8001f54 <AES_keyschedule_enc_LL+0x1b8>)
 8001e9a:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8001f58 <AES_keyschedule_enc_LL+0x1bc>
 8001e9e:	f101 00c0 	add.w	r0, r1, #192	; 0xc0
 8001ea2:	68ca      	ldr	r2, [r1, #12]
 8001ea4:	688d      	ldr	r5, [r1, #8]
 8001ea6:	684e      	ldr	r6, [r1, #4]
 8001ea8:	f8d1 c000 	ldr.w	ip, [r1]
 8001eac:	461c      	mov	r4, r3
 8001eae:	9001      	str	r0, [sp, #4]
 8001eb0:	46c2      	mov	sl, r8
 8001eb2:	e026      	b.n	8001f02 <AES_keyschedule_enc_LL+0x166>
 8001eb4:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8001eb8:	b2d7      	uxtb	r7, r2
 8001eba:	f814 9008 	ldrb.w	r9, [r4, r8]
 8001ebe:	5de7      	ldrb	r7, [r4, r7]
 8001ec0:	f3c2 4807 	ubfx	r8, r2, #16, #8
 8001ec4:	ea47 6709 	orr.w	r7, r7, r9, lsl #24
 8001ec8:	f814 8008 	ldrb.w	r8, [r4, r8]
 8001ecc:	f3c2 2907 	ubfx	r9, r2, #8, #8
 8001ed0:	f814 9009 	ldrb.w	r9, [r4, r9]
 8001ed4:	ea47 4808 	orr.w	r8, r7, r8, lsl #16
 8001ed8:	690f      	ldr	r7, [r1, #16]
 8001eda:	ea48 2909 	orr.w	r9, r8, r9, lsl #8
 8001ede:	ea89 0907 	eor.w	r9, r9, r7
 8001ee2:	694f      	ldr	r7, [r1, #20]
 8001ee4:	f8c1 9030 	str.w	r9, [r1, #48]	; 0x30
 8001ee8:	ea89 0807 	eor.w	r8, r9, r7
 8001eec:	698f      	ldr	r7, [r1, #24]
 8001eee:	f8c1 8034 	str.w	r8, [r1, #52]	; 0x34
 8001ef2:	ea88 0b07 	eor.w	fp, r8, r7
 8001ef6:	ea8b 0000 	eor.w	r0, fp, r0
 8001efa:	63c8      	str	r0, [r1, #60]	; 0x3c
 8001efc:	f8c1 b038 	str.w	fp, [r1, #56]	; 0x38
 8001f00:	3120      	adds	r1, #32
 8001f02:	69c8      	ldr	r0, [r1, #28]
 8001f04:	f85a 9f04 	ldr.w	r9, [sl, #4]!
 8001f08:	fa5f f880 	uxtb.w	r8, r0
 8001f0c:	0e07      	lsrs	r7, r0, #24
 8001f0e:	f813 b008 	ldrb.w	fp, [r3, r8]
 8001f12:	5ddf      	ldrb	r7, [r3, r7]
 8001f14:	f3c0 4807 	ubfx	r8, r0, #16, #8
 8001f18:	f813 8008 	ldrb.w	r8, [r3, r8]
 8001f1c:	ea47 270b 	orr.w	r7, r7, fp, lsl #8
 8001f20:	ea47 6708 	orr.w	r7, r7, r8, lsl #24
 8001f24:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8001f28:	f813 8008 	ldrb.w	r8, [r3, r8]
 8001f2c:	ea8c 0c09 	eor.w	ip, ip, r9
 8001f30:	ea47 4708 	orr.w	r7, r7, r8, lsl #16
 8001f34:	ea8c 0c07 	eor.w	ip, ip, r7
 8001f38:	ea8c 0606 	eor.w	r6, ip, r6
 8001f3c:	9f01      	ldr	r7, [sp, #4]
 8001f3e:	4075      	eors	r5, r6
 8001f40:	406a      	eors	r2, r5
 8001f42:	42b9      	cmp	r1, r7
 8001f44:	62ca      	str	r2, [r1, #44]	; 0x2c
 8001f46:	628d      	str	r5, [r1, #40]	; 0x28
 8001f48:	624e      	str	r6, [r1, #36]	; 0x24
 8001f4a:	f8c1 c020 	str.w	ip, [r1, #32]
 8001f4e:	d1b1      	bne.n	8001eb4 <AES_keyschedule_enc_LL+0x118>
 8001f50:	e737      	b.n	8001dc2 <AES_keyschedule_enc_LL+0x26>
 8001f52:	bf00      	nop
 8001f54:	08003b74 	.word	0x08003b74
 8001f58:	08003748 	.word	0x08003748

08001f5c <AES_keyschedule_enc>:
 8001f5c:	ea4f 0ca2 	mov.w	ip, r2, asr #2
 8001f60:	f1bc 0f00 	cmp.w	ip, #0
 8001f64:	b4f0      	push	{r4, r5, r6, r7}
 8001f66:	dd12      	ble.n	8001f8e <AES_keyschedule_enc+0x32>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8001f6e:	1f0c      	subs	r4, r1, #4
 8001f70:	785d      	ldrb	r5, [r3, #1]
 8001f72:	781e      	ldrb	r6, [r3, #0]
 8001f74:	78df      	ldrb	r7, [r3, #3]
 8001f76:	042d      	lsls	r5, r5, #16
 8001f78:	ea45 6506 	orr.w	r5, r5, r6, lsl #24
 8001f7c:	789e      	ldrb	r6, [r3, #2]
 8001f7e:	433d      	orrs	r5, r7
 8001f80:	3304      	adds	r3, #4
 8001f82:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 8001f86:	4563      	cmp	r3, ip
 8001f88:	f844 5f04 	str.w	r5, [r4, #4]!
 8001f8c:	d1f0      	bne.n	8001f70 <AES_keyschedule_enc+0x14>
 8001f8e:	4608      	mov	r0, r1
 8001f90:	bcf0      	pop	{r4, r5, r6, r7}
 8001f92:	f7ff bf03 	b.w	8001d9c <AES_keyschedule_enc_LL>
 8001f96:	bf00      	nop

08001f98 <AES_general_SW_enc>:
 8001f98:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001f9c:	4cc1      	ldr	r4, [pc, #772]	; (80022a4 <AES_general_SW_enc+0x30c>)
 8001f9e:	b08a      	sub	sp, #40	; 0x28
 8001fa0:	2501      	movs	r5, #1
 8001fa2:	2600      	movs	r6, #0
 8001fa4:	9609      	str	r6, [sp, #36]	; 0x24
 8001fa6:	6025      	str	r5, [r4, #0]
 8001fa8:	6825      	ldr	r5, [r4, #0]
 8001faa:	10db      	asrs	r3, r3, #3
 8001fac:	9509      	str	r5, [sp, #36]	; 0x24
 8001fae:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8001fb2:	3303      	adds	r3, #3
 8001fb4:	9509      	str	r5, [sp, #36]	; 0x24
 8001fb6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8001fb8:	3c08      	subs	r4, #8
 8001fba:	3501      	adds	r5, #1
 8001fbc:	9305      	str	r3, [sp, #20]
 8001fbe:	9107      	str	r1, [sp, #28]
 8001fc0:	f000 8150 	beq.w	8002264 <AES_general_SW_enc+0x2cc>
 8001fc4:	e890 00a0 	ldmia.w	r0, {r5, r7}
 8001fc8:	6811      	ldr	r1, [r2, #0]
 8001fca:	6853      	ldr	r3, [r2, #4]
 8001fcc:	404d      	eors	r5, r1
 8001fce:	ea83 0c07 	eor.w	ip, r3, r7
 8001fd2:	46aa      	mov	sl, r5
 8001fd4:	462e      	mov	r6, r5
 8001fd6:	4bb4      	ldr	r3, [pc, #720]	; (80022a8 <AES_general_SW_enc+0x310>)
 8001fd8:	4664      	mov	r4, ip
 8001fda:	4619      	mov	r1, r3
 8001fdc:	e06c      	b.n	80020b8 <AES_general_SW_enc+0x120>
 8001fde:	ea4f 601b 	mov.w	r0, fp, lsr #24
 8001fe2:	ea4f 6619 	mov.w	r6, r9, lsr #24
 8001fe6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8001fea:	6814      	ldr	r4, [r2, #0]
 8001fec:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8001ff0:	ea4f 651c 	mov.w	r5, ip, lsr #24
 8001ff4:	4044      	eors	r4, r0
 8001ff6:	fa5f f089 	uxtb.w	r0, r9
 8001ffa:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 8001ffe:	9606      	str	r6, [sp, #24]
 8002000:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8002004:	6850      	ldr	r0, [r2, #4]
 8002006:	ea84 6436 	eor.w	r4, r4, r6, ror #24
 800200a:	4068      	eors	r0, r5
 800200c:	fa5f f58b 	uxtb.w	r5, fp
 8002010:	f3cc 4607 	ubfx	r6, ip, #16, #8
 8002014:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 8002018:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800201c:	ea4f 6817 	mov.w	r8, r7, lsr #24
 8002020:	ea80 6535 	eor.w	r5, r0, r5, ror #24
 8002024:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 8002028:	ea84 2636 	eor.w	r6, r4, r6, ror #8
 800202c:	fa5f f887 	uxtb.w	r8, r7
 8002030:	fa5f f48c 	uxtb.w	r4, ip
 8002034:	9504      	str	r5, [sp, #16]
 8002036:	f3c7 2007 	ubfx	r0, r7, #8, #8
 800203a:	6895      	ldr	r5, [r2, #8]
 800203c:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8002040:	9603      	str	r6, [sp, #12]
 8002042:	f851 6027 	ldr.w	r6, [r1, r7, lsl #2]
 8002046:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
 800204a:	ea8a 0505 	eor.w	r5, sl, r5
 800204e:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8002052:	ea85 6537 	eor.w	r5, r5, r7, ror #24
 8002056:	f851 702c 	ldr.w	r7, [r1, ip, lsl #2]
 800205a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800205e:	9701      	str	r7, [sp, #4]
 8002060:	f3c9 4707 	ubfx	r7, r9, #16, #8
 8002064:	f851 a027 	ldr.w	sl, [r1, r7, lsl #2]
 8002068:	9002      	str	r0, [sp, #8]
 800206a:	68d4      	ldr	r4, [r2, #12]
 800206c:	9806      	ldr	r0, [sp, #24]
 800206e:	9f04      	ldr	r7, [sp, #16]
 8002070:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 8002074:	ea80 0c04 	eor.w	ip, r0, r4
 8002078:	f3c9 2907 	ubfx	r9, r9, #8, #8
 800207c:	ea87 2636 	eor.w	r6, r7, r6, ror #8
 8002080:	f3cb 4707 	ubfx	r7, fp, #16, #8
 8002084:	ea8c 6838 	eor.w	r8, ip, r8, ror #24
 8002088:	f851 c029 	ldr.w	ip, [r1, r9, lsl #2]
 800208c:	f851 9027 	ldr.w	r9, [r1, r7, lsl #2]
 8002090:	9802      	ldr	r0, [sp, #8]
 8002092:	ea88 2839 	eor.w	r8, r8, r9, ror #8
 8002096:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800209a:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 800209e:	f851 702b 	ldr.w	r7, [r1, fp, lsl #2]
 80020a2:	ea89 4430 	eor.w	r4, r9, r0, ror #16
 80020a6:	9801      	ldr	r0, [sp, #4]
 80020a8:	ea85 253a 	eor.w	r5, r5, sl, ror #8
 80020ac:	ea86 463c 	eor.w	r6, r6, ip, ror #16
 80020b0:	ea85 4537 	eor.w	r5, r5, r7, ror #16
 80020b4:	ea88 4a30 	eor.w	sl, r8, r0, ror #16
 80020b8:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80020bc:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 80020c0:	ea4f 6c1a 	mov.w	ip, sl, lsr #24
 80020c4:	9003      	str	r0, [sp, #12]
 80020c6:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 80020ca:	ea4f 6814 	mov.w	r8, r4, lsr #24
 80020ce:	f853 b028 	ldr.w	fp, [r3, r8, lsl #2]
 80020d2:	9004      	str	r0, [sp, #16]
 80020d4:	fa5f fc8a 	uxtb.w	ip, sl
 80020d8:	6910      	ldr	r0, [r2, #16]
 80020da:	0e37      	lsrs	r7, r6, #24
 80020dc:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
 80020e0:	ea8b 0b00 	eor.w	fp, fp, r0
 80020e4:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 80020e8:	6950      	ldr	r0, [r2, #20]
 80020ea:	ea8b 683c 	eor.w	r8, fp, ip, ror #24
 80020ee:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 80020f2:	f853 b02c 	ldr.w	fp, [r3, ip, lsl #2]
 80020f6:	ea87 0c00 	eor.w	ip, r7, r0
 80020fa:	b2e7      	uxtb	r7, r4
 80020fc:	9805      	ldr	r0, [sp, #20]
 80020fe:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8002102:	3801      	subs	r0, #1
 8002104:	ea8c 6c37 	eor.w	ip, ip, r7, ror #24
 8002108:	9005      	str	r0, [sp, #20]
 800210a:	6997      	ldr	r7, [r2, #24]
 800210c:	9803      	ldr	r0, [sp, #12]
 800210e:	fa5f f985 	uxtb.w	r9, r5
 8002112:	4047      	eors	r7, r0
 8002114:	b2f0      	uxtb	r0, r6
 8002116:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800211a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 800211e:	ea87 6030 	eor.w	r0, r7, r0, ror #24
 8002122:	9006      	str	r0, [sp, #24]
 8002124:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8002128:	69d0      	ldr	r0, [r2, #28]
 800212a:	9f04      	ldr	r7, [sp, #16]
 800212c:	9602      	str	r6, [sp, #8]
 800212e:	ea87 0600 	eor.w	r6, r7, r0
 8002132:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8002136:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800213a:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
 800213e:	ea88 2b3b 	eor.w	fp, r8, fp, ror #8
 8002142:	f3ca 4807 	ubfx	r8, sl, #16, #8
 8002146:	ea86 6939 	eor.w	r9, r6, r9, ror #24
 800214a:	ea8c 2c30 	eor.w	ip, ip, r0, ror #8
 800214e:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
 8002152:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8002156:	9e06      	ldr	r6, [sp, #24]
 8002158:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800215c:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8002160:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002164:	ea86 2738 	eor.w	r7, r6, r8, ror #8
 8002168:	f3c5 2507 	ubfx	r5, r5, #8, #8
 800216c:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8002170:	ea87 4734 	eor.w	r7, r7, r4, ror #16
 8002174:	9c05      	ldr	r4, [sp, #20]
 8002176:	ea89 2930 	eor.w	r9, r9, r0, ror #8
 800217a:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 800217e:	f853 a02a 	ldr.w	sl, [r3, sl, lsl #2]
 8002182:	9802      	ldr	r0, [sp, #8]
 8002184:	2c00      	cmp	r4, #0
 8002186:	ea8b 4b35 	eor.w	fp, fp, r5, ror #16
 800218a:	ea8c 4c3a 	eor.w	ip, ip, sl, ror #16
 800218e:	ea89 4930 	eor.w	r9, r9, r0, ror #16
 8002192:	f102 0220 	add.w	r2, r2, #32
 8002196:	f73f af22 	bgt.w	8001fde <AES_general_SW_enc+0x46>
 800219a:	464b      	mov	r3, r9
 800219c:	46d9      	mov	r9, fp
 800219e:	469b      	mov	fp, r3
 80021a0:	4b42      	ldr	r3, [pc, #264]	; (80022ac <AES_general_SW_enc+0x314>)
 80021a2:	ea4f 6519 	mov.w	r5, r9, lsr #24
 80021a6:	fa5f f18b 	uxtb.w	r1, fp
 80021aa:	463c      	mov	r4, r7
 80021ac:	5c5e      	ldrb	r6, [r3, r1]
 80021ae:	5d5f      	ldrb	r7, [r3, r5]
 80021b0:	f3cc 4107 	ubfx	r1, ip, #16, #8
 80021b4:	5c59      	ldrb	r1, [r3, r1]
 80021b6:	f3c4 2507 	ubfx	r5, r4, #8, #8
 80021ba:	4660      	mov	r0, ip
 80021bc:	ea46 6707 	orr.w	r7, r6, r7, lsl #24
 80021c0:	f813 c005 	ldrb.w	ip, [r3, r5]
 80021c4:	0e06      	lsrs	r6, r0, #24
 80021c6:	fa5f f589 	uxtb.w	r5, r9
 80021ca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80021ce:	6811      	ldr	r1, [r2, #0]
 80021d0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80021d4:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
 80021d8:	f813 c006 	ldrb.w	ip, [r3, r6]
 80021dc:	5d5e      	ldrb	r6, [r3, r5]
 80021de:	f3c4 4507 	ubfx	r5, r4, #16, #8
 80021e2:	5d5d      	ldrb	r5, [r3, r5]
 80021e4:	4079      	eors	r1, r7
 80021e6:	f3cb 2707 	ubfx	r7, fp, #8, #8
 80021ea:	f8c8 1000 	str.w	r1, [r8]
 80021ee:	ea46 660c 	orr.w	r6, r6, ip, lsl #24
 80021f2:	f813 c007 	ldrb.w	ip, [r3, r7]
 80021f6:	6851      	ldr	r1, [r2, #4]
 80021f8:	0e27      	lsrs	r7, r4, #24
 80021fa:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 80021fe:	b2c5      	uxtb	r5, r0
 8002200:	ea46 260c 	orr.w	r6, r6, ip, lsl #8
 8002204:	f813 c007 	ldrb.w	ip, [r3, r7]
 8002208:	5d5f      	ldrb	r7, [r3, r5]
 800220a:	f3cb 4507 	ubfx	r5, fp, #16, #8
 800220e:	5d5d      	ldrb	r5, [r3, r5]
 8002210:	4071      	eors	r1, r6
 8002212:	f3c9 2607 	ubfx	r6, r9, #8, #8
 8002216:	f8c8 1004 	str.w	r1, [r8, #4]
 800221a:	ea47 670c 	orr.w	r7, r7, ip, lsl #24
 800221e:	f813 c006 	ldrb.w	ip, [r3, r6]
 8002222:	6891      	ldr	r1, [r2, #8]
 8002224:	b2e4      	uxtb	r4, r4
 8002226:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
 800222a:	ea4f 661b 	mov.w	r6, fp, lsr #24
 800222e:	5d1d      	ldrb	r5, [r3, r4]
 8002230:	5d9e      	ldrb	r6, [r3, r6]
 8002232:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
 8002236:	f3c9 4407 	ubfx	r4, r9, #16, #8
 800223a:	5d1c      	ldrb	r4, [r3, r4]
 800223c:	4079      	eors	r1, r7
 800223e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8002242:	5c18      	ldrb	r0, [r3, r0]
 8002244:	f8c8 1008 	str.w	r1, [r8, #8]
 8002248:	ea45 6306 	orr.w	r3, r5, r6, lsl #24
 800224c:	68d2      	ldr	r2, [r2, #12]
 800224e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8002252:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002256:	4053      	eors	r3, r2
 8002258:	f8c8 300c 	str.w	r3, [r8, #12]
 800225c:	b00a      	add	sp, #40	; 0x28
 800225e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002262:	4770      	bx	lr
 8002264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002266:	6023      	str	r3, [r4, #0]
 8002268:	6823      	ldr	r3, [r4, #0]
 800226a:	9309      	str	r3, [sp, #36]	; 0x24
 800226c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800226e:	b973      	cbnz	r3, 800228e <AES_general_SW_enc+0x2f6>
 8002270:	6803      	ldr	r3, [r0, #0]
 8002272:	6817      	ldr	r7, [r2, #0]
 8002274:	6846      	ldr	r6, [r0, #4]
 8002276:	6885      	ldr	r5, [r0, #8]
 8002278:	6854      	ldr	r4, [r2, #4]
 800227a:	68c0      	ldr	r0, [r0, #12]
 800227c:	ea87 0c03 	eor.w	ip, r7, r3
 8002280:	6891      	ldr	r1, [r2, #8]
 8002282:	68d3      	ldr	r3, [r2, #12]
 8002284:	4066      	eors	r6, r4
 8002286:	404d      	eors	r5, r1
 8002288:	ea83 0a00 	eor.w	sl, r3, r0
 800228c:	e6a3      	b.n	8001fd6 <AES_general_SW_enc+0x3e>
 800228e:	6805      	ldr	r5, [r0, #0]
 8002290:	6811      	ldr	r1, [r2, #0]
 8002292:	6840      	ldr	r0, [r0, #4]
 8002294:	6853      	ldr	r3, [r2, #4]
 8002296:	404d      	eors	r5, r1
 8002298:	ea83 0c00 	eor.w	ip, r3, r0
 800229c:	46aa      	mov	sl, r5
 800229e:	462e      	mov	r6, r5
 80022a0:	e699      	b.n	8001fd6 <AES_general_SW_enc+0x3e>
 80022a2:	bf00      	nop
 80022a4:	40023008 	.word	0x40023008
 80022a8:	08003774 	.word	0x08003774
 80022ac:	08003b74 	.word	0x08003b74

080022b0 <AES_CCM_Encrypt_Init>:
 80022b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022b2:	2300      	movs	r3, #0
 80022b4:	b085      	sub	sp, #20
 80022b6:	4604      	mov	r4, r0
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	9301      	str	r3, [sp, #4]
 80022bc:	9302      	str	r3, [sp, #8]
 80022be:	9303      	str	r3, [sp, #12]
 80022c0:	b148      	cbz	r0, 80022d6 <AES_CCM_Encrypt_Init+0x26>
 80022c2:	b141      	cbz	r1, 80022d6 <AES_CCM_Encrypt_Init+0x26>
 80022c4:	b13a      	cbz	r2, 80022d6 <AES_CCM_Encrypt_Init+0x26>
 80022c6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80022c8:	1f03      	subs	r3, r0, #4
 80022ca:	2b0c      	cmp	r3, #12
 80022cc:	d907      	bls.n	80022de <AES_CCM_Encrypt_Init+0x2e>
 80022ce:	f640 401f 	movw	r0, #3103	; 0xc1f
 80022d2:	b005      	add	sp, #20
 80022d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022d6:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 80022da:	b005      	add	sp, #20
 80022dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022de:	07c7      	lsls	r7, r0, #31
 80022e0:	d4f5      	bmi.n	80022ce <AES_CCM_Encrypt_Init+0x1e>
 80022e2:	6925      	ldr	r5, [r4, #16]
 80022e4:	1feb      	subs	r3, r5, #7
 80022e6:	2b06      	cmp	r3, #6
 80022e8:	d8f1      	bhi.n	80022ce <AES_CCM_Encrypt_Init+0x1e>
 80022ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80022ec:	f023 0608 	bic.w	r6, r3, #8
 80022f0:	2e10      	cmp	r6, #16
 80022f2:	d001      	beq.n	80022f8 <AES_CCM_Encrypt_Init+0x48>
 80022f4:	2b20      	cmp	r3, #32
 80022f6:	d1ea      	bne.n	80022ce <AES_CCM_Encrypt_Init+0x1e>
 80022f8:	7926      	ldrb	r6, [r4, #4]
 80022fa:	60e2      	str	r2, [r4, #12]
 80022fc:	f026 0716 	bic.w	r7, r6, #22
 8002300:	07f6      	lsls	r6, r6, #31
 8002302:	7127      	strb	r7, [r4, #4]
 8002304:	f104 0748 	add.w	r7, r4, #72	; 0x48
 8002308:	f140 80ad 	bpl.w	8002466 <AES_CCM_Encrypt_Init+0x1b6>
 800230c:	b2c0      	uxtb	r0, r0
 800230e:	1e86      	subs	r6, r0, #2
 8002310:	f1c5 010e 	rsb	r1, r5, #14
 8002314:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002316:	f3c6 0642 	ubfx	r6, r6, #1, #3
 800231a:	f001 0107 	and.w	r1, r1, #7
 800231e:	ea41 01c6 	orr.w	r1, r1, r6, lsl #3
 8002322:	b108      	cbz	r0, 8002328 <AES_CCM_Encrypt_Init+0x78>
 8002324:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8002328:	7856      	ldrb	r6, [r2, #1]
 800232a:	f892 e000 	ldrb.w	lr, [r2]
 800232e:	7890      	ldrb	r0, [r2, #2]
 8002330:	0236      	lsls	r6, r6, #8
 8002332:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
 8002336:	4330      	orrs	r0, r6
 8002338:	ea40 6101 	orr.w	r1, r0, r1, lsl #24
 800233c:	9100      	str	r1, [sp, #0]
 800233e:	7910      	ldrb	r0, [r2, #4]
 8002340:	78d6      	ldrb	r6, [r2, #3]
 8002342:	0400      	lsls	r0, r0, #16
 8002344:	7991      	ldrb	r1, [r2, #6]
 8002346:	ea40 6606 	orr.w	r6, r0, r6, lsl #24
 800234a:	7950      	ldrb	r0, [r2, #5]
 800234c:	4331      	orrs	r1, r6
 800234e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8002352:	2d07      	cmp	r5, #7
 8002354:	9101      	str	r1, [sp, #4]
 8002356:	dd17      	ble.n	8002388 <AES_CCM_Encrypt_Init+0xd8>
 8002358:	f1a5 0e07 	sub.w	lr, r5, #7
 800235c:	2000      	movs	r0, #0
 800235e:	1815      	adds	r5, r2, r0
 8002360:	43c1      	mvns	r1, r0
 8002362:	79ee      	ldrb	r6, [r5, #7]
 8002364:	f001 0103 	and.w	r1, r1, #3
 8002368:	00c9      	lsls	r1, r1, #3
 800236a:	fa06 f101 	lsl.w	r1, r6, r1
 800236e:	f020 0503 	bic.w	r5, r0, #3
 8002372:	ae04      	add	r6, sp, #16
 8002374:	3508      	adds	r5, #8
 8002376:	4435      	add	r5, r6
 8002378:	f855 6c10 	ldr.w	r6, [r5, #-16]
 800237c:	3001      	adds	r0, #1
 800237e:	430e      	orrs	r6, r1
 8002380:	4570      	cmp	r0, lr
 8002382:	f845 6c10 	str.w	r6, [r5, #-16]
 8002386:	d1ea      	bne.n	800235e <AES_CCM_Encrypt_Init+0xae>
 8002388:	9803      	ldr	r0, [sp, #12]
 800238a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800238c:	463a      	mov	r2, r7
 800238e:	ea40 0501 	orr.w	r5, r0, r1
 8002392:	f104 0124 	add.w	r1, r4, #36	; 0x24
 8002396:	4668      	mov	r0, sp
 8002398:	9503      	str	r5, [sp, #12]
 800239a:	f7ff fdfd 	bl	8001f98 <AES_general_SW_enc>
 800239e:	68e6      	ldr	r6, [r4, #12]
 80023a0:	6927      	ldr	r7, [r4, #16]
 80023a2:	7872      	ldrb	r2, [r6, #1]
 80023a4:	7831      	ldrb	r1, [r6, #0]
 80023a6:	78b3      	ldrb	r3, [r6, #2]
 80023a8:	0212      	lsls	r2, r2, #8
 80023aa:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 80023ae:	f1c7 020e 	rsb	r2, r7, #14
 80023b2:	430b      	orrs	r3, r1
 80023b4:	f002 0207 	and.w	r2, r2, #7
 80023b8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80023bc:	6163      	str	r3, [r4, #20]
 80023be:	7932      	ldrb	r2, [r6, #4]
 80023c0:	78f1      	ldrb	r1, [r6, #3]
 80023c2:	79b3      	ldrb	r3, [r6, #6]
 80023c4:	0412      	lsls	r2, r2, #16
 80023c6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80023ca:	7972      	ldrb	r2, [r6, #5]
 80023cc:	430b      	orrs	r3, r1
 80023ce:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80023d2:	2f07      	cmp	r7, #7
 80023d4:	f04f 0300 	mov.w	r3, #0
 80023d8:	61a2      	str	r2, [r4, #24]
 80023da:	61e3      	str	r3, [r4, #28]
 80023dc:	6223      	str	r3, [r4, #32]
 80023de:	dd1f      	ble.n	8002420 <AES_CCM_Encrypt_Init+0x170>
 80023e0:	3f07      	subs	r7, #7
 80023e2:	469c      	mov	ip, r3
 80023e4:	e007      	b.n	80023f6 <AES_CCM_Encrypt_Init+0x146>
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	bfb8      	it	lt
 80023ea:	1cda      	addlt	r2, r3, #3
 80023ec:	f022 0203 	bic.w	r2, r2, #3
 80023f0:	4422      	add	r2, r4
 80023f2:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 80023f6:	18f5      	adds	r5, r6, r3
 80023f8:	43d8      	mvns	r0, r3
 80023fa:	79e9      	ldrb	r1, [r5, #7]
 80023fc:	f000 0003 	and.w	r0, r0, #3
 8002400:	00c0      	lsls	r0, r0, #3
 8002402:	4081      	lsls	r1, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	461a      	mov	r2, r3
 8002408:	bfb8      	it	lt
 800240a:	1cda      	addlt	r2, r3, #3
 800240c:	f022 0203 	bic.w	r2, r2, #3
 8002410:	3301      	adds	r3, #1
 8002412:	4422      	add	r2, r4
 8002414:	ea4c 0101 	orr.w	r1, ip, r1
 8002418:	42bb      	cmp	r3, r7
 800241a:	61d1      	str	r1, [r2, #28]
 800241c:	461a      	mov	r2, r3
 800241e:	d1e2      	bne.n	80023e6 <AES_CCM_Encrypt_Init+0x136>
 8002420:	6a23      	ldr	r3, [r4, #32]
 8002422:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	6223      	str	r3, [r4, #32]
 800242a:	2800      	cmp	r0, #0
 800242c:	f43f af55 	beq.w	80022da <AES_CCM_Encrypt_Init+0x2a>
 8002430:	2300      	movs	r3, #0
 8002432:	f5b0 4f7f 	cmp.w	r0, #65280	; 0xff00
 8002436:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
 800243a:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
 800243e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 8002442:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
 8002446:	db19      	blt.n	800247c <AES_CCM_Encrypt_Init+0x1cc>
 8002448:	0c02      	lsrs	r2, r0, #16
 800244a:	ea6f 32c2 	mvn.w	r2, r2, lsl #15
 800244e:	0400      	lsls	r0, r0, #16
 8002450:	ea6f 32d2 	mvn.w	r2, r2, lsr #15
 8002454:	2106      	movs	r1, #6
 8002456:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
 800245a:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
 800245e:	4618      	mov	r0, r3
 8002460:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
 8002464:	e739      	b.n	80022da <AES_CCM_Encrypt_Init+0x2a>
 8002466:	4608      	mov	r0, r1
 8002468:	461a      	mov	r2, r3
 800246a:	60a1      	str	r1, [r4, #8]
 800246c:	4639      	mov	r1, r7
 800246e:	f7ff fd75 	bl	8001f5c <AES_keyschedule_enc>
 8002472:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002474:	6925      	ldr	r5, [r4, #16]
 8002476:	68e2      	ldr	r2, [r4, #12]
 8002478:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800247a:	e747      	b.n	800230c <AES_CCM_Encrypt_Init+0x5c>
 800247c:	0400      	lsls	r0, r0, #16
 800247e:	2202      	movs	r2, #2
 8002480:	f8c4 0138 	str.w	r0, [r4, #312]	; 0x138
 8002484:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
 8002488:	4618      	mov	r0, r3
 800248a:	e726      	b.n	80022da <AES_CCM_Encrypt_Init+0x2a>

0800248c <AES_CCM_Header_Append>:
 800248c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002490:	4680      	mov	r8, r0
 8002492:	468b      	mov	fp, r1
 8002494:	4692      	mov	sl, r2
 8002496:	b150      	cbz	r0, 80024ae <AES_CCM_Header_Append+0x22>
 8002498:	b149      	cbz	r1, 80024ae <AES_CCM_Header_Append+0x22>
 800249a:	f890 9004 	ldrb.w	r9, [r0, #4]
 800249e:	f019 0912 	ands.w	r9, r9, #18
 80024a2:	d009      	beq.n	80024b8 <AES_CCM_Header_Append+0x2c>
 80024a4:	f640 451e 	movw	r5, #3102	; 0xc1e
 80024a8:	4628      	mov	r0, r5
 80024aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024ae:	f44f 6542 	mov.w	r5, #3104	; 0xc20
 80024b2:	4628      	mov	r0, r5
 80024b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024b8:	2a00      	cmp	r2, #0
 80024ba:	f000 8159 	beq.w	8002770 <AES_CCM_Header_Append+0x2e4>
 80024be:	f8d0 6148 	ldr.w	r6, [r0, #328]	; 0x148
 80024c2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80024c4:	1994      	adds	r4, r2, r6
 80024c6:	2c10      	cmp	r4, #16
 80024c8:	bf28      	it	cs
 80024ca:	2410      	movcs	r4, #16
 80024cc:	1a9b      	subs	r3, r3, r2
 80024ce:	42a6      	cmp	r6, r4
 80024d0:	6403      	str	r3, [r0, #64]	; 0x40
 80024d2:	f280 8157 	bge.w	8002784 <AES_CCM_Header_Append+0x2f8>
 80024d6:	4633      	mov	r3, r6
 80024d8:	1b8d      	subs	r5, r1, r6
 80024da:	43d8      	mvns	r0, r3
 80024dc:	5ce9      	ldrb	r1, [r5, r3]
 80024de:	f000 0003 	and.w	r0, r0, #3
 80024e2:	00c0      	lsls	r0, r0, #3
 80024e4:	fa01 f000 	lsl.w	r0, r1, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	461a      	mov	r2, r3
 80024ec:	bfb8      	it	lt
 80024ee:	1cda      	addlt	r2, r3, #3
 80024f0:	f022 0203 	bic.w	r2, r2, #3
 80024f4:	4442      	add	r2, r8
 80024f6:	f8d2 1138 	ldr.w	r1, [r2, #312]	; 0x138
 80024fa:	3301      	adds	r3, #1
 80024fc:	4301      	orrs	r1, r0
 80024fe:	42a3      	cmp	r3, r4
 8002500:	f8c2 1138 	str.w	r1, [r2, #312]	; 0x138
 8002504:	d1e9      	bne.n	80024da <AES_CCM_Header_Append+0x4e>
 8002506:	ebc6 0903 	rsb	r9, r6, r3
 800250a:	f109 050f 	add.w	r5, r9, #15
 800250e:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
 8002512:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
 8002516:	f8d8 6138 	ldr.w	r6, [r8, #312]	; 0x138
 800251a:	f8d8 1140 	ldr.w	r1, [r8, #320]	; 0x140
 800251e:	ea87 0206 	eor.w	r2, r7, r6
 8002522:	4041      	eors	r1, r0
 8002524:	f8d8 6028 	ldr.w	r6, [r8, #40]	; 0x28
 8002528:	f8d8 0030 	ldr.w	r0, [r8, #48]	; 0x30
 800252c:	f8d8 413c 	ldr.w	r4, [r8, #316]	; 0x13c
 8002530:	f8d8 3144 	ldr.w	r3, [r8, #324]	; 0x144
 8002534:	4074      	eors	r4, r6
 8002536:	4043      	eors	r3, r0
 8002538:	f108 0724 	add.w	r7, r8, #36	; 0x24
 800253c:	f108 0648 	add.w	r6, r8, #72	; 0x48
 8002540:	f8c8 2024 	str.w	r2, [r8, #36]	; 0x24
 8002544:	f8c8 102c 	str.w	r1, [r8, #44]	; 0x2c
 8002548:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
 800254c:	f8c8 4028 	str.w	r4, [r8, #40]	; 0x28
 8002550:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 8002554:	4638      	mov	r0, r7
 8002556:	4639      	mov	r1, r7
 8002558:	4632      	mov	r2, r6
 800255a:	f7ff fd1d 	bl	8001f98 <AES_general_SW_enc>
 800255e:	2300      	movs	r3, #0
 8002560:	45aa      	cmp	sl, r5
 8002562:	f8c8 3148 	str.w	r3, [r8, #328]	; 0x148
 8002566:	dd4e      	ble.n	8002606 <AES_CCM_Header_Append+0x17a>
 8002568:	f109 0401 	add.w	r4, r9, #1
 800256c:	445c      	add	r4, fp
 800256e:	7822      	ldrb	r2, [r4, #0]
 8002570:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8002574:	78a3      	ldrb	r3, [r4, #2]
 8002576:	0412      	lsls	r2, r2, #16
 8002578:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800257c:	7861      	ldrb	r1, [r4, #1]
 800257e:	431a      	orrs	r2, r3
 8002580:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8002584:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002588:	4053      	eors	r3, r2
 800258a:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
 800258e:	7922      	ldrb	r2, [r4, #4]
 8002590:	78e1      	ldrb	r1, [r4, #3]
 8002592:	79a3      	ldrb	r3, [r4, #6]
 8002594:	0412      	lsls	r2, r2, #16
 8002596:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800259a:	7961      	ldrb	r1, [r4, #5]
 800259c:	431a      	orrs	r2, r3
 800259e:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 80025a2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80025a6:	4053      	eors	r3, r2
 80025a8:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
 80025ac:	7a22      	ldrb	r2, [r4, #8]
 80025ae:	79e1      	ldrb	r1, [r4, #7]
 80025b0:	7aa3      	ldrb	r3, [r4, #10]
 80025b2:	0412      	lsls	r2, r2, #16
 80025b4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80025b8:	7a61      	ldrb	r1, [r4, #9]
 80025ba:	431a      	orrs	r2, r3
 80025bc:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 80025c0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80025c4:	4053      	eors	r3, r2
 80025c6:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
 80025ca:	7b22      	ldrb	r2, [r4, #12]
 80025cc:	7ae1      	ldrb	r1, [r4, #11]
 80025ce:	7ba3      	ldrb	r3, [r4, #14]
 80025d0:	0412      	lsls	r2, r2, #16
 80025d2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80025d6:	7b61      	ldrb	r1, [r4, #13]
 80025d8:	431a      	orrs	r2, r3
 80025da:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 80025de:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80025e2:	4053      	eors	r3, r2
 80025e4:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
 80025e8:	f109 0910 	add.w	r9, r9, #16
 80025ec:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 80025f0:	4638      	mov	r0, r7
 80025f2:	4639      	mov	r1, r7
 80025f4:	4632      	mov	r2, r6
 80025f6:	f7ff fccf 	bl	8001f98 <AES_general_SW_enc>
 80025fa:	f109 030f 	add.w	r3, r9, #15
 80025fe:	459a      	cmp	sl, r3
 8002600:	f104 0410 	add.w	r4, r4, #16
 8002604:	dcb3      	bgt.n	800256e <AES_CCM_Header_Append+0xe2>
 8002606:	45ca      	cmp	sl, r9
 8002608:	f340 80b2 	ble.w	8002770 <AES_CCM_Header_Append+0x2e4>
 800260c:	ebc9 0a0a 	rsb	sl, r9, sl
 8002610:	f1ba 0f00 	cmp.w	sl, #0
 8002614:	f898 3004 	ldrb.w	r3, [r8, #4]
 8002618:	4655      	mov	r5, sl
 800261a:	bfb8      	it	lt
 800261c:	f10a 0503 	addlt.w	r5, sl, #3
 8002620:	10ad      	asrs	r5, r5, #2
 8002622:	f043 0310 	orr.w	r3, r3, #16
 8002626:	2d00      	cmp	r5, #0
 8002628:	f888 3004 	strb.w	r3, [r8, #4]
 800262c:	f340 80a4 	ble.w	8002778 <AES_CCM_Header_Append+0x2ec>
 8002630:	eb0b 0309 	add.w	r3, fp, r9
 8002634:	78da      	ldrb	r2, [r3, #3]
 8002636:	f81b 1009 	ldrb.w	r1, [fp, r9]
 800263a:	7898      	ldrb	r0, [r3, #2]
 800263c:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8002640:	785a      	ldrb	r2, [r3, #1]
 8002642:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
 8002646:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800264a:	2d01      	cmp	r5, #1
 800264c:	f8c8 3138 	str.w	r3, [r8, #312]	; 0x138
 8002650:	dd36      	ble.n	80026c0 <AES_CCM_Header_Append+0x234>
 8002652:	f109 0204 	add.w	r2, r9, #4
 8002656:	eb0b 0302 	add.w	r3, fp, r2
 800265a:	f81b 1002 	ldrb.w	r1, [fp, r2]
 800265e:	78da      	ldrb	r2, [r3, #3]
 8002660:	7898      	ldrb	r0, [r3, #2]
 8002662:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8002666:	785a      	ldrb	r2, [r3, #1]
 8002668:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
 800266c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002670:	2d02      	cmp	r5, #2
 8002672:	f8c8 313c 	str.w	r3, [r8, #316]	; 0x13c
 8002676:	dd23      	ble.n	80026c0 <AES_CCM_Header_Append+0x234>
 8002678:	f109 0208 	add.w	r2, r9, #8
 800267c:	eb0b 0302 	add.w	r3, fp, r2
 8002680:	f81b 1002 	ldrb.w	r1, [fp, r2]
 8002684:	78da      	ldrb	r2, [r3, #3]
 8002686:	7898      	ldrb	r0, [r3, #2]
 8002688:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 800268c:	785a      	ldrb	r2, [r3, #1]
 800268e:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
 8002692:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002696:	2d03      	cmp	r5, #3
 8002698:	f8c8 3140 	str.w	r3, [r8, #320]	; 0x140
 800269c:	dd10      	ble.n	80026c0 <AES_CCM_Header_Append+0x234>
 800269e:	f109 020c 	add.w	r2, r9, #12
 80026a2:	eb0b 0302 	add.w	r3, fp, r2
 80026a6:	f81b 1002 	ldrb.w	r1, [fp, r2]
 80026aa:	78da      	ldrb	r2, [r3, #3]
 80026ac:	7858      	ldrb	r0, [r3, #1]
 80026ae:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80026b2:	789a      	ldrb	r2, [r3, #2]
 80026b4:	ea41 4300 	orr.w	r3, r1, r0, lsl #16
 80026b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80026bc:	f8c8 3144 	str.w	r3, [r8, #324]	; 0x144
 80026c0:	ebc5 7485 	rsb	r4, r5, r5, lsl #30
 80026c4:	00a8      	lsls	r0, r5, #2
 80026c6:	00a4      	lsls	r4, r4, #2
 80026c8:	3501      	adds	r5, #1
 80026ca:	4684      	mov	ip, r0
 80026cc:	2200      	movs	r2, #0
 80026ce:	4454      	add	r4, sl
 80026d0:	4440      	add	r0, r8
 80026d2:	4294      	cmp	r4, r2
 80026d4:	f8c0 2138 	str.w	r2, [r0, #312]	; 0x138
 80026d8:	dd56      	ble.n	8002788 <AES_CCM_Header_Append+0x2fc>
 80026da:	44e1      	add	r9, ip
 80026dc:	eb04 0309 	add.w	r3, r4, r9
 80026e0:	eb0b 0a03 	add.w	sl, fp, r3
 80026e4:	44cb      	add	fp, r9
 80026e6:	2318      	movs	r3, #24
 80026e8:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80026ec:	4099      	lsls	r1, r3
 80026ee:	45d3      	cmp	fp, sl
 80026f0:	ea42 0201 	orr.w	r2, r2, r1
 80026f4:	f8c0 2138 	str.w	r2, [r0, #312]	; 0x138
 80026f8:	f1a3 0308 	sub.w	r3, r3, #8
 80026fc:	d1f4      	bne.n	80026e8 <AES_CCM_Header_Append+0x25c>
 80026fe:	4464      	add	r4, ip
 8002700:	2d03      	cmp	r5, #3
 8002702:	f8c8 4148 	str.w	r4, [r8, #328]	; 0x148
 8002706:	dc09      	bgt.n	800271c <AES_CCM_Header_Append+0x290>
 8002708:	00aa      	lsls	r2, r5, #2
 800270a:	eb08 0085 	add.w	r0, r8, r5, lsl #2
 800270e:	f1c2 0210 	rsb	r2, r2, #16
 8002712:	f500 709c 	add.w	r0, r0, #312	; 0x138
 8002716:	2100      	movs	r1, #0
 8002718:	f000 ffea 	bl	80036f0 <memset>
 800271c:	f8d8 5040 	ldr.w	r5, [r8, #64]	; 0x40
 8002720:	bb35      	cbnz	r5, 8002770 <AES_CCM_Header_Append+0x2e4>
 8002722:	f8d8 2138 	ldr.w	r2, [r8, #312]	; 0x138
 8002726:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800272a:	f8d8 0140 	ldr.w	r0, [r8, #320]	; 0x140
 800272e:	ea82 0e03 	eor.w	lr, r2, r3
 8002732:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
 8002736:	f8d8 213c 	ldr.w	r2, [r8, #316]	; 0x13c
 800273a:	f8d8 4028 	ldr.w	r4, [r8, #40]	; 0x28
 800273e:	4048      	eors	r0, r1
 8002740:	4054      	eors	r4, r2
 8002742:	f8d8 1144 	ldr.w	r1, [r8, #324]	; 0x144
 8002746:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 800274a:	f8c8 0140 	str.w	r0, [r8, #320]	; 0x140
 800274e:	ea81 0302 	eor.w	r3, r1, r2
 8002752:	f8c8 3144 	str.w	r3, [r8, #324]	; 0x144
 8002756:	4639      	mov	r1, r7
 8002758:	4632      	mov	r2, r6
 800275a:	f8c8 e138 	str.w	lr, [r8, #312]	; 0x138
 800275e:	f8c8 413c 	str.w	r4, [r8, #316]	; 0x13c
 8002762:	f508 709c 	add.w	r0, r8, #312	; 0x138
 8002766:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 800276a:	f7ff fc15 	bl	8001f98 <AES_general_SW_enc>
 800276e:	e69b      	b.n	80024a8 <AES_CCM_Header_Append+0x1c>
 8002770:	2500      	movs	r5, #0
 8002772:	4628      	mov	r0, r5
 8002774:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002778:	f04f 0c00 	mov.w	ip, #0
 800277c:	4664      	mov	r4, ip
 800277e:	4660      	mov	r0, ip
 8002780:	2501      	movs	r5, #1
 8002782:	e7a3      	b.n	80026cc <AES_CCM_Header_Append+0x240>
 8002784:	250f      	movs	r5, #15
 8002786:	e6c2      	b.n	800250e <AES_CCM_Header_Append+0x82>
 8002788:	4614      	mov	r4, r2
 800278a:	e7b8      	b.n	80026fe <AES_CCM_Header_Append+0x272>

0800278c <AES_CCM_Encrypt_Append>:
 800278c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002790:	4683      	mov	fp, r0
 8002792:	b095      	sub	sp, #84	; 0x54
 8002794:	2000      	movs	r0, #0
 8002796:	9101      	str	r1, [sp, #4]
 8002798:	9204      	str	r2, [sp, #16]
 800279a:	9302      	str	r3, [sp, #8]
 800279c:	9010      	str	r0, [sp, #64]	; 0x40
 800279e:	9011      	str	r0, [sp, #68]	; 0x44
 80027a0:	9012      	str	r0, [sp, #72]	; 0x48
 80027a2:	9013      	str	r0, [sp, #76]	; 0x4c
 80027a4:	900b      	str	r0, [sp, #44]	; 0x2c
 80027a6:	f1bb 0f00 	cmp.w	fp, #0
 80027aa:	d00d      	beq.n	80027c8 <AES_CCM_Encrypt_Append+0x3c>
 80027ac:	b161      	cbz	r1, 80027c8 <AES_CCM_Encrypt_Append+0x3c>
 80027ae:	b15b      	cbz	r3, 80027c8 <AES_CCM_Encrypt_Append+0x3c>
 80027b0:	981e      	ldr	r0, [sp, #120]	; 0x78
 80027b2:	b148      	cbz	r0, 80027c8 <AES_CCM_Encrypt_Append+0x3c>
 80027b4:	f89b 3004 	ldrb.w	r3, [fp, #4]
 80027b8:	f013 0f06 	tst.w	r3, #6
 80027bc:	d009      	beq.n	80027d2 <AES_CCM_Encrypt_Append+0x46>
 80027be:	f640 401e 	movw	r0, #3102	; 0xc1e
 80027c2:	b015      	add	sp, #84	; 0x54
 80027c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027c8:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 80027cc:	b015      	add	sp, #84	; 0x54
 80027ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027d2:	4bb6      	ldr	r3, [pc, #728]	; (8002aac <AES_CCM_Encrypt_Append+0x320>)
 80027d4:	2201      	movs	r2, #1
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	3b08      	subs	r3, #8
 80027dc:	920b      	str	r2, [sp, #44]	; 0x2c
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	920b      	str	r2, [sp, #44]	; 0x2c
 80027e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80027e4:	3201      	adds	r2, #1
 80027e6:	f000 81db 	beq.w	8002ba0 <AES_CCM_Encrypt_Append+0x414>
 80027ea:	9d04      	ldr	r5, [sp, #16]
 80027ec:	2d0f      	cmp	r5, #15
 80027ee:	f340 835e 	ble.w	8002eae <AES_CCM_Encrypt_Append+0x722>
 80027f2:	f1a5 0310 	sub.w	r3, r5, #16
 80027f6:	9d01      	ldr	r5, [sp, #4]
 80027f8:	091b      	lsrs	r3, r3, #4
 80027fa:	9308      	str	r3, [sp, #32]
 80027fc:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 8002800:	f10b 0548 	add.w	r5, fp, #72	; 0x48
 8002804:	9503      	str	r5, [sp, #12]
 8002806:	f10b 0514 	add.w	r5, fp, #20
 800280a:	9507      	str	r5, [sp, #28]
 800280c:	9d01      	ldr	r5, [sp, #4]
 800280e:	3311      	adds	r3, #17
 8002810:	f105 0901 	add.w	r9, r5, #1
 8002814:	f8dd a008 	ldr.w	sl, [sp, #8]
 8002818:	ad10      	add	r5, sp, #64	; 0x40
 800281a:	9305      	str	r3, [sp, #20]
 800281c:	f10b 0c24 	add.w	ip, fp, #36	; 0x24
 8002820:	9506      	str	r5, [sp, #24]
 8002822:	f899 8000 	ldrb.w	r8, [r9]
 8002826:	f819 2c01 	ldrb.w	r2, [r9, #-1]
 800282a:	f899 3002 	ldrb.w	r3, [r9, #2]
 800282e:	ea4f 4808 	mov.w	r8, r8, lsl #16
 8002832:	ea48 6802 	orr.w	r8, r8, r2, lsl #24
 8002836:	f899 2001 	ldrb.w	r2, [r9, #1]
 800283a:	ea48 0803 	orr.w	r8, r8, r3
 800283e:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 8002842:	ea48 2802 	orr.w	r8, r8, r2, lsl #8
 8002846:	ea43 0308 	orr.w	r3, r3, r8
 800284a:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
 800284e:	f899 7004 	ldrb.w	r7, [r9, #4]
 8002852:	f899 2003 	ldrb.w	r2, [r9, #3]
 8002856:	f899 3006 	ldrb.w	r3, [r9, #6]
 800285a:	043f      	lsls	r7, r7, #16
 800285c:	f899 1005 	ldrb.w	r1, [r9, #5]
 8002860:	ea47 6702 	orr.w	r7, r7, r2, lsl #24
 8002864:	431f      	orrs	r7, r3
 8002866:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
 800286a:	ea47 2701 	orr.w	r7, r7, r1, lsl #8
 800286e:	433b      	orrs	r3, r7
 8002870:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
 8002874:	f899 6008 	ldrb.w	r6, [r9, #8]
 8002878:	f899 2007 	ldrb.w	r2, [r9, #7]
 800287c:	f899 300a 	ldrb.w	r3, [r9, #10]
 8002880:	0436      	lsls	r6, r6, #16
 8002882:	f899 0009 	ldrb.w	r0, [r9, #9]
 8002886:	ea46 6602 	orr.w	r6, r6, r2, lsl #24
 800288a:	431e      	orrs	r6, r3
 800288c:	f8db 302c 	ldr.w	r3, [fp, #44]	; 0x2c
 8002890:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
 8002894:	4333      	orrs	r3, r6
 8002896:	f8cb 302c 	str.w	r3, [fp, #44]	; 0x2c
 800289a:	f899 500c 	ldrb.w	r5, [r9, #12]
 800289e:	f899 200b 	ldrb.w	r2, [r9, #11]
 80028a2:	f899 300e 	ldrb.w	r3, [r9, #14]
 80028a6:	042d      	lsls	r5, r5, #16
 80028a8:	f899 400d 	ldrb.w	r4, [r9, #13]
 80028ac:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
 80028b0:	431d      	orrs	r5, r3
 80028b2:	f8db 3030 	ldr.w	r3, [fp, #48]	; 0x30
 80028b6:	ea45 2504 	orr.w	r5, r5, r4, lsl #8
 80028ba:	432b      	orrs	r3, r5
 80028bc:	4660      	mov	r0, ip
 80028be:	4661      	mov	r1, ip
 80028c0:	f8cb 3030 	str.w	r3, [fp, #48]	; 0x30
 80028c4:	9a03      	ldr	r2, [sp, #12]
 80028c6:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 80028ca:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80028ce:	f8cd c000 	str.w	ip, [sp]
 80028d2:	970d      	str	r7, [sp, #52]	; 0x34
 80028d4:	950f      	str	r5, [sp, #60]	; 0x3c
 80028d6:	960e      	str	r6, [sp, #56]	; 0x38
 80028d8:	f7ff fb5e 	bl	8001f98 <AES_general_SW_enc>
 80028dc:	9807      	ldr	r0, [sp, #28]
 80028de:	9906      	ldr	r1, [sp, #24]
 80028e0:	9a03      	ldr	r2, [sp, #12]
 80028e2:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 80028e6:	f7ff fb57 	bl	8001f98 <AES_general_SW_enc>
 80028ea:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80028ec:	f8db 3020 	ldr.w	r3, [fp, #32]
 80028f0:	402c      	ands	r4, r5
 80028f2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80028f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80028f6:	9812      	ldr	r0, [sp, #72]	; 0x48
 80028f8:	0e25      	lsrs	r5, r4, #24
 80028fa:	3301      	adds	r3, #1
 80028fc:	f8cb 3020 	str.w	r3, [fp, #32]
 8002900:	400f      	ands	r7, r1
 8002902:	f88a 5003 	strb.w	r5, [sl, #3]
 8002906:	ea08 0802 	and.w	r8, r8, r2
 800290a:	4030      	ands	r0, r6
 800290c:	9d05      	ldr	r5, [sp, #20]
 800290e:	f109 0910 	add.w	r9, r9, #16
 8002912:	0e00      	lsrs	r0, r0, #24
 8002914:	0e3f      	lsrs	r7, r7, #24
 8002916:	ea4f 6818 	mov.w	r8, r8, lsr #24
 800291a:	0a21      	lsrs	r1, r4, #8
 800291c:	0c22      	lsrs	r2, r4, #16
 800291e:	f88a 0002 	strb.w	r0, [sl, #2]
 8002922:	f88a 4006 	strb.w	r4, [sl, #6]
 8002926:	f88a 7001 	strb.w	r7, [sl, #1]
 800292a:	f88a 8000 	strb.w	r8, [sl]
 800292e:	f88a 1005 	strb.w	r1, [sl, #5]
 8002932:	f88a 2004 	strb.w	r2, [sl, #4]
 8002936:	45a9      	cmp	r9, r5
 8002938:	f10a 0a10 	add.w	sl, sl, #16
 800293c:	f8dd c000 	ldr.w	ip, [sp]
 8002940:	f47f af6f 	bne.w	8002822 <AES_CCM_Encrypt_Append+0x96>
 8002944:	9d08      	ldr	r5, [sp, #32]
 8002946:	1c6b      	adds	r3, r5, #1
 8002948:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800294c:	9d04      	ldr	r5, [sp, #16]
 800294e:	45a8      	cmp	r8, r5
 8002950:	f280 8121 	bge.w	8002b96 <AES_CCM_Encrypt_Append+0x40a>
 8002954:	ebc8 0505 	rsb	r5, r8, r5
 8002958:	2d00      	cmp	r5, #0
 800295a:	f89b 3004 	ldrb.w	r3, [fp, #4]
 800295e:	462c      	mov	r4, r5
 8002960:	bfb8      	it	lt
 8002962:	1cec      	addlt	r4, r5, #3
 8002964:	10a4      	asrs	r4, r4, #2
 8002966:	f043 0304 	orr.w	r3, r3, #4
 800296a:	2c00      	cmp	r4, #0
 800296c:	f88b 3004 	strb.w	r3, [fp, #4]
 8002970:	f340 8299 	ble.w	8002ea6 <AES_CCM_Encrypt_Append+0x71a>
 8002974:	9b01      	ldr	r3, [sp, #4]
 8002976:	9801      	ldr	r0, [sp, #4]
 8002978:	4443      	add	r3, r8
 800297a:	f810 1008 	ldrb.w	r1, [r0, r8]
 800297e:	78da      	ldrb	r2, [r3, #3]
 8002980:	7898      	ldrb	r0, [r3, #2]
 8002982:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002986:	7859      	ldrb	r1, [r3, #1]
 8002988:	ea42 2300 	orr.w	r3, r2, r0, lsl #8
 800298c:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
 8002990:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002994:	405a      	eors	r2, r3
 8002996:	2c01      	cmp	r4, #1
 8002998:	930c      	str	r3, [sp, #48]	; 0x30
 800299a:	9210      	str	r2, [sp, #64]	; 0x40
 800299c:	dd3f      	ble.n	8002a1e <AES_CCM_Encrypt_Append+0x292>
 800299e:	9b01      	ldr	r3, [sp, #4]
 80029a0:	f108 0204 	add.w	r2, r8, #4
 80029a4:	9801      	ldr	r0, [sp, #4]
 80029a6:	4413      	add	r3, r2
 80029a8:	5c81      	ldrb	r1, [r0, r2]
 80029aa:	78da      	ldrb	r2, [r3, #3]
 80029ac:	7898      	ldrb	r0, [r3, #2]
 80029ae:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80029b2:	7859      	ldrb	r1, [r3, #1]
 80029b4:	ea42 2300 	orr.w	r3, r2, r0, lsl #8
 80029b8:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 80029bc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80029c0:	405a      	eors	r2, r3
 80029c2:	2c02      	cmp	r4, #2
 80029c4:	930d      	str	r3, [sp, #52]	; 0x34
 80029c6:	9211      	str	r2, [sp, #68]	; 0x44
 80029c8:	dd29      	ble.n	8002a1e <AES_CCM_Encrypt_Append+0x292>
 80029ca:	9b01      	ldr	r3, [sp, #4]
 80029cc:	f108 0208 	add.w	r2, r8, #8
 80029d0:	9801      	ldr	r0, [sp, #4]
 80029d2:	4413      	add	r3, r2
 80029d4:	5c81      	ldrb	r1, [r0, r2]
 80029d6:	78da      	ldrb	r2, [r3, #3]
 80029d8:	7898      	ldrb	r0, [r3, #2]
 80029da:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80029de:	7859      	ldrb	r1, [r3, #1]
 80029e0:	ea42 2300 	orr.w	r3, r2, r0, lsl #8
 80029e4:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 80029e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80029ec:	405a      	eors	r2, r3
 80029ee:	2c03      	cmp	r4, #3
 80029f0:	930e      	str	r3, [sp, #56]	; 0x38
 80029f2:	9212      	str	r2, [sp, #72]	; 0x48
 80029f4:	dd13      	ble.n	8002a1e <AES_CCM_Encrypt_Append+0x292>
 80029f6:	9b01      	ldr	r3, [sp, #4]
 80029f8:	f108 020c 	add.w	r2, r8, #12
 80029fc:	9801      	ldr	r0, [sp, #4]
 80029fe:	4413      	add	r3, r2
 8002a00:	5c81      	ldrb	r1, [r0, r2]
 8002a02:	78da      	ldrb	r2, [r3, #3]
 8002a04:	7858      	ldrb	r0, [r3, #1]
 8002a06:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002a0a:	7899      	ldrb	r1, [r3, #2]
 8002a0c:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
 8002a10:	f8db 2030 	ldr.w	r2, [fp, #48]	; 0x30
 8002a14:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002a18:	405a      	eors	r2, r3
 8002a1a:	930f      	str	r3, [sp, #60]	; 0x3c
 8002a1c:	9213      	str	r2, [sp, #76]	; 0x4c
 8002a1e:	ebc4 7384 	rsb	r3, r4, r4, lsl #30
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	1c67      	adds	r7, r4, #1
 8002a26:	46a6      	mov	lr, r4
 8002a28:	2100      	movs	r1, #0
 8002a2a:	ea4f 068e 	mov.w	r6, lr, lsl #2
 8002a2e:	442b      	add	r3, r5
 8002a30:	aa14      	add	r2, sp, #80	; 0x50
 8002a32:	4432      	add	r2, r6
 8002a34:	428b      	cmp	r3, r1
 8002a36:	f842 1c20 	str.w	r1, [r2, #-32]
 8002a3a:	dd15      	ble.n	8002a68 <AES_CCM_Encrypt_Append+0x2dc>
 8002a3c:	9a01      	ldr	r2, [sp, #4]
 8002a3e:	4413      	add	r3, r2
 8002a40:	eb08 0206 	add.w	r2, r8, r6
 8002a44:	1898      	adds	r0, r3, r2
 8002a46:	9b01      	ldr	r3, [sp, #4]
 8002a48:	441a      	add	r2, r3
 8002a4a:	2318      	movs	r3, #24
 8002a4c:	f812 cb01 	ldrb.w	ip, [r2], #1
 8002a50:	fa0c fc03 	lsl.w	ip, ip, r3
 8002a54:	4282      	cmp	r2, r0
 8002a56:	ea81 010c 	eor.w	r1, r1, ip
 8002a5a:	f1a3 0308 	sub.w	r3, r3, #8
 8002a5e:	d1f5      	bne.n	8002a4c <AES_CCM_Encrypt_Append+0x2c0>
 8002a60:	ab14      	add	r3, sp, #80	; 0x50
 8002a62:	4433      	add	r3, r6
 8002a64:	f843 1c20 	str.w	r1, [r3, #-32]
 8002a68:	eb0b 0e8e 	add.w	lr, fp, lr, lsl #2
 8002a6c:	f8de 3024 	ldr.w	r3, [lr, #36]	; 0x24
 8002a70:	a814      	add	r0, sp, #80	; 0x50
 8002a72:	4406      	add	r6, r0
 8002a74:	4059      	eors	r1, r3
 8002a76:	2f03      	cmp	r7, #3
 8002a78:	f846 1c10 	str.w	r1, [r6, #-16]
 8002a7c:	f300 820f 	bgt.w	8002e9e <AES_CCM_Encrypt_Append+0x712>
 8002a80:	00be      	lsls	r6, r7, #2
 8002a82:	f1c6 0610 	rsb	r6, r6, #16
 8002a86:	00bf      	lsls	r7, r7, #2
 8002a88:	a80c      	add	r0, sp, #48	; 0x30
 8002a8a:	4632      	mov	r2, r6
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	4438      	add	r0, r7
 8002a90:	f000 fe2e 	bl	80036f0 <memset>
 8002a94:	aa10      	add	r2, sp, #64	; 0x40
 8002a96:	9206      	str	r2, [sp, #24]
 8002a98:	9806      	ldr	r0, [sp, #24]
 8002a9a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002a9e:	4632      	mov	r2, r6
 8002aa0:	4459      	add	r1, fp
 8002aa2:	4438      	add	r0, r7
 8002aa4:	f000 fe16 	bl	80036d4 <memcpy>
 8002aa8:	9806      	ldr	r0, [sp, #24]
 8002aaa:	e001      	b.n	8002ab0 <AES_CCM_Encrypt_Append+0x324>
 8002aac:	40023008 	.word	0x40023008
 8002ab0:	f10b 0648 	add.w	r6, fp, #72	; 0x48
 8002ab4:	4632      	mov	r2, r6
 8002ab6:	f10b 0124 	add.w	r1, fp, #36	; 0x24
 8002aba:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 8002abe:	f7ff fa6b 	bl	8001f98 <AES_general_SW_enc>
 8002ac2:	4632      	mov	r2, r6
 8002ac4:	9906      	ldr	r1, [sp, #24]
 8002ac6:	f10b 0014 	add.w	r0, fp, #20
 8002aca:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 8002ace:	f7ff fa63 	bl	8001f98 <AES_general_SW_enc>
 8002ad2:	2c00      	cmp	r4, #0
 8002ad4:	f340 81e0 	ble.w	8002e98 <AES_CCM_Encrypt_Append+0x70c>
 8002ad8:	9910      	ldr	r1, [sp, #64]	; 0x40
 8002ada:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002adc:	9a02      	ldr	r2, [sp, #8]
 8002ade:	404b      	eors	r3, r1
 8002ae0:	4442      	add	r2, r8
 8002ae2:	0a1e      	lsrs	r6, r3, #8
 8002ae4:	0c18      	lsrs	r0, r3, #16
 8002ae6:	0e19      	lsrs	r1, r3, #24
 8002ae8:	70d3      	strb	r3, [r2, #3]
 8002aea:	9b02      	ldr	r3, [sp, #8]
 8002aec:	2c01      	cmp	r4, #1
 8002aee:	7096      	strb	r6, [r2, #2]
 8002af0:	7050      	strb	r0, [r2, #1]
 8002af2:	f803 1008 	strb.w	r1, [r3, r8]
 8002af6:	dd30      	ble.n	8002b5a <AES_CCM_Encrypt_Append+0x3ce>
 8002af8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002afa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002afc:	f108 0104 	add.w	r1, r8, #4
 8002b00:	4053      	eors	r3, r2
 8002b02:	9a02      	ldr	r2, [sp, #8]
 8002b04:	0a1f      	lsrs	r7, r3, #8
 8002b06:	440a      	add	r2, r1
 8002b08:	0c1e      	lsrs	r6, r3, #16
 8002b0a:	7097      	strb	r7, [r2, #2]
 8002b0c:	70d3      	strb	r3, [r2, #3]
 8002b0e:	7056      	strb	r6, [r2, #1]
 8002b10:	9a02      	ldr	r2, [sp, #8]
 8002b12:	0e18      	lsrs	r0, r3, #24
 8002b14:	2c02      	cmp	r4, #2
 8002b16:	5450      	strb	r0, [r2, r1]
 8002b18:	dd1f      	ble.n	8002b5a <AES_CCM_Encrypt_Append+0x3ce>
 8002b1a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002b1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002b1e:	f108 0108 	add.w	r1, r8, #8
 8002b22:	4053      	eors	r3, r2
 8002b24:	9a02      	ldr	r2, [sp, #8]
 8002b26:	0a1f      	lsrs	r7, r3, #8
 8002b28:	440a      	add	r2, r1
 8002b2a:	0c1e      	lsrs	r6, r3, #16
 8002b2c:	0e18      	lsrs	r0, r3, #24
 8002b2e:	70d3      	strb	r3, [r2, #3]
 8002b30:	9b02      	ldr	r3, [sp, #8]
 8002b32:	2c03      	cmp	r4, #3
 8002b34:	7097      	strb	r7, [r2, #2]
 8002b36:	7056      	strb	r6, [r2, #1]
 8002b38:	5458      	strb	r0, [r3, r1]
 8002b3a:	dd0e      	ble.n	8002b5a <AES_CCM_Encrypt_Append+0x3ce>
 8002b3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002b3e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002b40:	f108 010c 	add.w	r1, r8, #12
 8002b44:	4053      	eors	r3, r2
 8002b46:	9a02      	ldr	r2, [sp, #8]
 8002b48:	0a1f      	lsrs	r7, r3, #8
 8002b4a:	440a      	add	r2, r1
 8002b4c:	0c1e      	lsrs	r6, r3, #16
 8002b4e:	7097      	strb	r7, [r2, #2]
 8002b50:	70d3      	strb	r3, [r2, #3]
 8002b52:	7056      	strb	r6, [r2, #1]
 8002b54:	9a02      	ldr	r2, [sp, #8]
 8002b56:	0e18      	lsrs	r0, r3, #24
 8002b58:	5450      	strb	r0, [r2, r1]
 8002b5a:	ebc4 7284 	rsb	r2, r4, r4, lsl #30
 8002b5e:	0092      	lsls	r2, r2, #2
 8002b60:	00a4      	lsls	r4, r4, #2
 8002b62:	ab14      	add	r3, sp, #80	; 0x50
 8002b64:	4423      	add	r3, r4
 8002b66:	f853 0c20 	ldr.w	r0, [r3, #-32]
 8002b6a:	4415      	add	r5, r2
 8002b6c:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8002b70:	2d00      	cmp	r5, #0
 8002b72:	ea80 0003 	eor.w	r0, r0, r3
 8002b76:	dd0e      	ble.n	8002b96 <AES_CCM_Encrypt_Append+0x40a>
 8002b78:	9b02      	ldr	r3, [sp, #8]
 8002b7a:	4444      	add	r4, r8
 8002b7c:	441d      	add	r5, r3
 8002b7e:	461a      	mov	r2, r3
 8002b80:	4422      	add	r2, r4
 8002b82:	2318      	movs	r3, #24
 8002b84:	442c      	add	r4, r5
 8002b86:	fa20 f103 	lsr.w	r1, r0, r3
 8002b8a:	f802 1b01 	strb.w	r1, [r2], #1
 8002b8e:	42a2      	cmp	r2, r4
 8002b90:	f1a3 0308 	sub.w	r3, r3, #8
 8002b94:	d1f7      	bne.n	8002b86 <AES_CCM_Encrypt_Append+0x3fa>
 8002b96:	981e      	ldr	r0, [sp, #120]	; 0x78
 8002b98:	9d04      	ldr	r5, [sp, #16]
 8002b9a:	6005      	str	r5, [r0, #0]
 8002b9c:	2000      	movs	r0, #0
 8002b9e:	e615      	b.n	80027cc <AES_CCM_Encrypt_Append+0x40>
 8002ba0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002ba2:	9d04      	ldr	r5, [sp, #16]
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	930b      	str	r3, [sp, #44]	; 0x2c
 8002baa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f000 80ad 	beq.w	8002d0c <AES_CCM_Encrypt_Append+0x580>
 8002bb2:	2d0f      	cmp	r5, #15
 8002bb4:	f340 817b 	ble.w	8002eae <AES_CCM_Encrypt_Append+0x722>
 8002bb8:	f1a5 0310 	sub.w	r3, r5, #16
 8002bbc:	9d01      	ldr	r5, [sp, #4]
 8002bbe:	091b      	lsrs	r3, r3, #4
 8002bc0:	9309      	str	r3, [sp, #36]	; 0x24
 8002bc2:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 8002bc6:	f10b 0524 	add.w	r5, fp, #36	; 0x24
 8002bca:	9503      	str	r5, [sp, #12]
 8002bcc:	f10b 0548 	add.w	r5, fp, #72	; 0x48
 8002bd0:	9505      	str	r5, [sp, #20]
 8002bd2:	f10b 0514 	add.w	r5, fp, #20
 8002bd6:	9508      	str	r5, [sp, #32]
 8002bd8:	9d01      	ldr	r5, [sp, #4]
 8002bda:	3311      	adds	r3, #17
 8002bdc:	f105 0901 	add.w	r9, r5, #1
 8002be0:	f8dd a008 	ldr.w	sl, [sp, #8]
 8002be4:	ad10      	add	r5, sp, #64	; 0x40
 8002be6:	9307      	str	r3, [sp, #28]
 8002be8:	9506      	str	r5, [sp, #24]
 8002bea:	f899 2000 	ldrb.w	r2, [r9]
 8002bee:	f819 1c01 	ldrb.w	r1, [r9, #-1]
 8002bf2:	f899 3002 	ldrb.w	r3, [r9, #2]
 8002bf6:	0412      	lsls	r2, r2, #16
 8002bf8:	f899 8001 	ldrb.w	r8, [r9, #1]
 8002bfc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002c00:	431a      	orrs	r2, r3
 8002c02:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 8002c06:	ea42 2808 	orr.w	r8, r2, r8, lsl #8
 8002c0a:	ea43 0308 	orr.w	r3, r3, r8
 8002c0e:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
 8002c12:	f899 2004 	ldrb.w	r2, [r9, #4]
 8002c16:	f899 1003 	ldrb.w	r1, [r9, #3]
 8002c1a:	f899 3006 	ldrb.w	r3, [r9, #6]
 8002c1e:	0412      	lsls	r2, r2, #16
 8002c20:	f899 7005 	ldrb.w	r7, [r9, #5]
 8002c24:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
 8002c2e:	ea42 2707 	orr.w	r7, r2, r7, lsl #8
 8002c32:	433b      	orrs	r3, r7
 8002c34:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
 8002c38:	f899 2008 	ldrb.w	r2, [r9, #8]
 8002c3c:	f899 1007 	ldrb.w	r1, [r9, #7]
 8002c40:	f899 300a 	ldrb.w	r3, [r9, #10]
 8002c44:	0412      	lsls	r2, r2, #16
 8002c46:	f899 6009 	ldrb.w	r6, [r9, #9]
 8002c4a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	f8db 302c 	ldr.w	r3, [fp, #44]	; 0x2c
 8002c54:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8002c58:	4333      	orrs	r3, r6
 8002c5a:	f8cb 302c 	str.w	r3, [fp, #44]	; 0x2c
 8002c5e:	f899 200c 	ldrb.w	r2, [r9, #12]
 8002c62:	f899 100b 	ldrb.w	r1, [r9, #11]
 8002c66:	f899 300e 	ldrb.w	r3, [r9, #14]
 8002c6a:	0412      	lsls	r2, r2, #16
 8002c6c:	f899 500d 	ldrb.w	r5, [r9, #13]
 8002c70:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002c74:	431a      	orrs	r2, r3
 8002c76:	f8db 3030 	ldr.w	r3, [fp, #48]	; 0x30
 8002c7a:	ea42 2505 	orr.w	r5, r2, r5, lsl #8
 8002c7e:	9803      	ldr	r0, [sp, #12]
 8002c80:	432b      	orrs	r3, r5
 8002c82:	4601      	mov	r1, r0
 8002c84:	f8cb 3030 	str.w	r3, [fp, #48]	; 0x30
 8002c88:	9a05      	ldr	r2, [sp, #20]
 8002c8a:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 8002c8e:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8002c92:	950f      	str	r5, [sp, #60]	; 0x3c
 8002c94:	970d      	str	r7, [sp, #52]	; 0x34
 8002c96:	960e      	str	r6, [sp, #56]	; 0x38
 8002c98:	f7ff f97e 	bl	8001f98 <AES_general_SW_enc>
 8002c9c:	9808      	ldr	r0, [sp, #32]
 8002c9e:	9906      	ldr	r1, [sp, #24]
 8002ca0:	9a05      	ldr	r2, [sp, #20]
 8002ca2:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 8002ca6:	f7ff f977 	bl	8001f98 <AES_general_SW_enc>
 8002caa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8002cac:	f8db 3020 	ldr.w	r3, [fp, #32]
 8002cb0:	402c      	ands	r4, r5
 8002cb2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002cb4:	0e25      	lsrs	r5, r4, #24
 8002cb6:	9812      	ldr	r0, [sp, #72]	; 0x48
 8002cb8:	9911      	ldr	r1, [sp, #68]	; 0x44
 8002cba:	3301      	adds	r3, #1
 8002cbc:	f8cb 3020 	str.w	r3, [fp, #32]
 8002cc0:	f88a 5003 	strb.w	r5, [sl, #3]
 8002cc4:	9d07      	ldr	r5, [sp, #28]
 8002cc6:	ea08 0802 	and.w	r8, r8, r2
 8002cca:	4030      	ands	r0, r6
 8002ccc:	4039      	ands	r1, r7
 8002cce:	f109 0910 	add.w	r9, r9, #16
 8002cd2:	0e00      	lsrs	r0, r0, #24
 8002cd4:	0e09      	lsrs	r1, r1, #24
 8002cd6:	ea4f 6818 	mov.w	r8, r8, lsr #24
 8002cda:	0a22      	lsrs	r2, r4, #8
 8002cdc:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8002ce0:	45a9      	cmp	r9, r5
 8002ce2:	f88a 0002 	strb.w	r0, [sl, #2]
 8002ce6:	f88a 4006 	strb.w	r4, [sl, #6]
 8002cea:	f88a 1001 	strb.w	r1, [sl, #1]
 8002cee:	f88a 8000 	strb.w	r8, [sl]
 8002cf2:	f88a 2005 	strb.w	r2, [sl, #5]
 8002cf6:	f88a c004 	strb.w	ip, [sl, #4]
 8002cfa:	f10a 0a10 	add.w	sl, sl, #16
 8002cfe:	f47f af74 	bne.w	8002bea <AES_CCM_Encrypt_Append+0x45e>
 8002d02:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8002d04:	1c6b      	adds	r3, r5, #1
 8002d06:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002d0a:	e61f      	b.n	800294c <AES_CCM_Encrypt_Append+0x1c0>
 8002d0c:	2d0f      	cmp	r5, #15
 8002d0e:	f340 80ce 	ble.w	8002eae <AES_CCM_Encrypt_Append+0x722>
 8002d12:	f1a5 0210 	sub.w	r2, r5, #16
 8002d16:	f10b 0524 	add.w	r5, fp, #36	; 0x24
 8002d1a:	9503      	str	r5, [sp, #12]
 8002d1c:	f10b 0548 	add.w	r5, fp, #72	; 0x48
 8002d20:	f022 020f 	bic.w	r2, r2, #15
 8002d24:	9505      	str	r5, [sp, #20]
 8002d26:	f10b 0514 	add.w	r5, fp, #20
 8002d2a:	f102 0810 	add.w	r8, r2, #16
 8002d2e:	9509      	str	r5, [sp, #36]	; 0x24
 8002d30:	f8dd a004 	ldr.w	sl, [sp, #4]
 8002d34:	ad10      	add	r5, sp, #64	; 0x40
 8002d36:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8002d3a:	469c      	mov	ip, r3
 8002d3c:	9506      	str	r5, [sp, #24]
 8002d3e:	f8cd 8020 	str.w	r8, [sp, #32]
 8002d42:	9d01      	ldr	r5, [sp, #4]
 8002d44:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8002d48:	f815 100c 	ldrb.w	r1, [r5, ip]
 8002d4c:	f89a 3003 	ldrb.w	r3, [sl, #3]
 8002d50:	0412      	lsls	r2, r2, #16
 8002d52:	f89a 8002 	ldrb.w	r8, [sl, #2]
 8002d56:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 8002d60:	ea42 2408 	orr.w	r4, r2, r8, lsl #8
 8002d64:	4063      	eors	r3, r4
 8002d66:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
 8002d6a:	f89a 2005 	ldrb.w	r2, [sl, #5]
 8002d6e:	f89a 1004 	ldrb.w	r1, [sl, #4]
 8002d72:	f89a 3007 	ldrb.w	r3, [sl, #7]
 8002d76:	0412      	lsls	r2, r2, #16
 8002d78:	f89a 7006 	ldrb.w	r7, [sl, #6]
 8002d7c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002d80:	431a      	orrs	r2, r3
 8002d82:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
 8002d86:	ea42 2707 	orr.w	r7, r2, r7, lsl #8
 8002d8a:	407b      	eors	r3, r7
 8002d8c:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
 8002d90:	f89a 2009 	ldrb.w	r2, [sl, #9]
 8002d94:	f89a 1008 	ldrb.w	r1, [sl, #8]
 8002d98:	f89a 300b 	ldrb.w	r3, [sl, #11]
 8002d9c:	0412      	lsls	r2, r2, #16
 8002d9e:	f89a 600a 	ldrb.w	r6, [sl, #10]
 8002da2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002da6:	431a      	orrs	r2, r3
 8002da8:	f8db 302c 	ldr.w	r3, [fp, #44]	; 0x2c
 8002dac:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8002db0:	4073      	eors	r3, r6
 8002db2:	f8cb 302c 	str.w	r3, [fp, #44]	; 0x2c
 8002db6:	f89a 200d 	ldrb.w	r2, [sl, #13]
 8002dba:	f89a 100c 	ldrb.w	r1, [sl, #12]
 8002dbe:	f89a 300f 	ldrb.w	r3, [sl, #15]
 8002dc2:	0412      	lsls	r2, r2, #16
 8002dc4:	f89a 500e 	ldrb.w	r5, [sl, #14]
 8002dc8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	f8db 3030 	ldr.w	r3, [fp, #48]	; 0x30
 8002dd2:	ea42 2505 	orr.w	r5, r2, r5, lsl #8
 8002dd6:	9803      	ldr	r0, [sp, #12]
 8002dd8:	406b      	eors	r3, r5
 8002dda:	f8cb 3030 	str.w	r3, [fp, #48]	; 0x30
 8002dde:	4601      	mov	r1, r0
 8002de0:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 8002de4:	9a05      	ldr	r2, [sp, #20]
 8002de6:	f8cd c000 	str.w	ip, [sp]
 8002dea:	940c      	str	r4, [sp, #48]	; 0x30
 8002dec:	970d      	str	r7, [sp, #52]	; 0x34
 8002dee:	960e      	str	r6, [sp, #56]	; 0x38
 8002df0:	950f      	str	r5, [sp, #60]	; 0x3c
 8002df2:	f7ff f8d1 	bl	8001f98 <AES_general_SW_enc>
 8002df6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002df8:	9906      	ldr	r1, [sp, #24]
 8002dfa:	9a05      	ldr	r2, [sp, #20]
 8002dfc:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 8002e00:	f7ff f8ca 	bl	8001f98 <AES_general_SW_enc>
 8002e04:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8002e06:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002e08:	4068      	eors	r0, r5
 8002e0a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8002e0c:	f8db 5020 	ldr.w	r5, [fp, #32]
 8002e10:	405c      	eors	r4, r3
 8002e12:	4071      	eors	r1, r6
 8002e14:	ea4f 2814 	mov.w	r8, r4, lsr #8
 8002e18:	1c6b      	adds	r3, r5, #1
 8002e1a:	0c26      	lsrs	r6, r4, #16
 8002e1c:	f8cb 3020 	str.w	r3, [fp, #32]
 8002e20:	f889 8002 	strb.w	r8, [r9, #2]
 8002e24:	f889 4003 	strb.w	r4, [r9, #3]
 8002e28:	f889 6001 	strb.w	r6, [r9, #1]
 8002e2c:	f8dd c000 	ldr.w	ip, [sp]
 8002e30:	9b02      	ldr	r3, [sp, #8]
 8002e32:	0e25      	lsrs	r5, r4, #24
 8002e34:	f803 500c 	strb.w	r5, [r3, ip]
 8002e38:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002e3a:	0a0d      	lsrs	r5, r1, #8
 8002e3c:	f889 500a 	strb.w	r5, [r9, #10]
 8002e40:	9d08      	ldr	r5, [sp, #32]
 8002e42:	407a      	eors	r2, r7
 8002e44:	f10c 0c10 	add.w	ip, ip, #16
 8002e48:	0a07      	lsrs	r7, r0, #8
 8002e4a:	ea4f 4810 	mov.w	r8, r0, lsr #16
 8002e4e:	0e06      	lsrs	r6, r0, #24
 8002e50:	0c0c      	lsrs	r4, r1, #16
 8002e52:	0e0b      	lsrs	r3, r1, #24
 8002e54:	f889 700e 	strb.w	r7, [r9, #14]
 8002e58:	f889 000f 	strb.w	r0, [r9, #15]
 8002e5c:	f889 100b 	strb.w	r1, [r9, #11]
 8002e60:	0a17      	lsrs	r7, r2, #8
 8002e62:	0c10      	lsrs	r0, r2, #16
 8002e64:	0e11      	lsrs	r1, r2, #24
 8002e66:	45ac      	cmp	ip, r5
 8002e68:	f889 2007 	strb.w	r2, [r9, #7]
 8002e6c:	f889 800d 	strb.w	r8, [r9, #13]
 8002e70:	f889 600c 	strb.w	r6, [r9, #12]
 8002e74:	f889 4009 	strb.w	r4, [r9, #9]
 8002e78:	f889 3008 	strb.w	r3, [r9, #8]
 8002e7c:	f889 7006 	strb.w	r7, [r9, #6]
 8002e80:	f889 0005 	strb.w	r0, [r9, #5]
 8002e84:	f889 1004 	strb.w	r1, [r9, #4]
 8002e88:	f10a 0a10 	add.w	sl, sl, #16
 8002e8c:	f109 0910 	add.w	r9, r9, #16
 8002e90:	f47f af57 	bne.w	8002d42 <AES_CCM_Encrypt_Append+0x5b6>
 8002e94:	46a8      	mov	r8, r5
 8002e96:	e559      	b.n	800294c <AES_CCM_Encrypt_Append+0x1c0>
 8002e98:	2400      	movs	r4, #0
 8002e9a:	4622      	mov	r2, r4
 8002e9c:	e660      	b.n	8002b60 <AES_CCM_Encrypt_Append+0x3d4>
 8002e9e:	a910      	add	r1, sp, #64	; 0x40
 8002ea0:	9106      	str	r1, [sp, #24]
 8002ea2:	4608      	mov	r0, r1
 8002ea4:	e604      	b.n	8002ab0 <AES_CCM_Encrypt_Append+0x324>
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	469e      	mov	lr, r3
 8002eaa:	2701      	movs	r7, #1
 8002eac:	e5bc      	b.n	8002a28 <AES_CCM_Encrypt_Append+0x29c>
 8002eae:	f04f 0800 	mov.w	r8, #0
 8002eb2:	e54b      	b.n	800294c <AES_CCM_Encrypt_Append+0x1c0>

08002eb4 <AES_CCM_Encrypt_Finish>:
 8002eb4:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8002eb8:	2300      	movs	r3, #0
 8002eba:	b084      	sub	sp, #16
 8002ebc:	4606      	mov	r6, r0
 8002ebe:	4689      	mov	r9, r1
 8002ec0:	4614      	mov	r4, r2
 8002ec2:	9300      	str	r3, [sp, #0]
 8002ec4:	9301      	str	r3, [sp, #4]
 8002ec6:	9302      	str	r3, [sp, #8]
 8002ec8:	9303      	str	r3, [sp, #12]
 8002eca:	2800      	cmp	r0, #0
 8002ecc:	d040      	beq.n	8002f50 <AES_CCM_Encrypt_Finish+0x9c>
 8002ece:	2900      	cmp	r1, #0
 8002ed0:	d03e      	beq.n	8002f50 <AES_CCM_Encrypt_Finish+0x9c>
 8002ed2:	2a00      	cmp	r2, #0
 8002ed4:	d03c      	beq.n	8002f50 <AES_CCM_Encrypt_Finish+0x9c>
 8002ed6:	7901      	ldrb	r1, [r0, #4]
 8002ed8:	6902      	ldr	r2, [r0, #16]
 8002eda:	f041 0102 	orr.w	r1, r1, #2
 8002ede:	2a0b      	cmp	r2, #11
 8002ee0:	7101      	strb	r1, [r0, #4]
 8002ee2:	dc3a      	bgt.n	8002f5a <AES_CCM_Encrypt_Finish+0xa6>
 8002ee4:	6233      	str	r3, [r6, #32]
 8002ee6:	f106 0014 	add.w	r0, r6, #20
 8002eea:	4669      	mov	r1, sp
 8002eec:	f106 0248 	add.w	r2, r6, #72	; 0x48
 8002ef0:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8002ef2:	f7ff f851 	bl	8001f98 <AES_general_SW_enc>
 8002ef6:	9a00      	ldr	r2, [sp, #0]
 8002ef8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8002efa:	9b02      	ldr	r3, [sp, #8]
 8002efc:	4057      	eors	r7, r2
 8002efe:	6ab5      	ldr	r5, [r6, #40]	; 0x28
 8002f00:	9a01      	ldr	r2, [sp, #4]
 8002f02:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8002f04:	4055      	eors	r5, r2
 8002f06:	4059      	eors	r1, r3
 8002f08:	9a03      	ldr	r2, [sp, #12]
 8002f0a:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8002f0c:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002f0e:	2800      	cmp	r0, #0
 8002f10:	ea82 0c03 	eor.w	ip, r2, r3
 8002f14:	9700      	str	r7, [sp, #0]
 8002f16:	9501      	str	r5, [sp, #4]
 8002f18:	9102      	str	r1, [sp, #8]
 8002f1a:	f8cd c00c 	str.w	ip, [sp, #12]
 8002f1e:	dd12      	ble.n	8002f46 <AES_CCM_Encrypt_Finish+0x92>
 8002f20:	2300      	movs	r3, #0
 8002f22:	f023 0203 	bic.w	r2, r3, #3
 8002f26:	a904      	add	r1, sp, #16
 8002f28:	43d8      	mvns	r0, r3
 8002f2a:	440a      	add	r2, r1
 8002f2c:	f852 1c10 	ldr.w	r1, [r2, #-16]
 8002f30:	f000 0203 	and.w	r2, r0, #3
 8002f34:	00d2      	lsls	r2, r2, #3
 8002f36:	fa21 f202 	lsr.w	r2, r1, r2
 8002f3a:	f809 2003 	strb.w	r2, [r9, r3]
 8002f3e:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8002f40:	3301      	adds	r3, #1
 8002f42:	4298      	cmp	r0, r3
 8002f44:	dced      	bgt.n	8002f22 <AES_CCM_Encrypt_Finish+0x6e>
 8002f46:	6020      	str	r0, [r4, #0]
 8002f48:	2000      	movs	r0, #0
 8002f4a:	b004      	add	sp, #16
 8002f4c:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 8002f50:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 8002f54:	b004      	add	sp, #16
 8002f56:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 8002f5a:	f1c2 020f 	rsb	r2, r2, #15
 8002f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f62:	00d2      	lsls	r2, r2, #3
 8002f64:	fa03 f202 	lsl.w	r2, r3, r2
 8002f68:	6a03      	ldr	r3, [r0, #32]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	e7ba      	b.n	8002ee4 <AES_CCM_Encrypt_Finish+0x30>
 8002f6e:	bf00      	nop

08002f70 <AES_CCM_Decrypt_Init>:
 8002f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f72:	2300      	movs	r3, #0
 8002f74:	b085      	sub	sp, #20
 8002f76:	4604      	mov	r4, r0
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	9301      	str	r3, [sp, #4]
 8002f7c:	9302      	str	r3, [sp, #8]
 8002f7e:	9303      	str	r3, [sp, #12]
 8002f80:	b148      	cbz	r0, 8002f96 <AES_CCM_Decrypt_Init+0x26>
 8002f82:	b141      	cbz	r1, 8002f96 <AES_CCM_Decrypt_Init+0x26>
 8002f84:	b13a      	cbz	r2, 8002f96 <AES_CCM_Decrypt_Init+0x26>
 8002f86:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8002f88:	1f03      	subs	r3, r0, #4
 8002f8a:	2b0c      	cmp	r3, #12
 8002f8c:	d907      	bls.n	8002f9e <AES_CCM_Decrypt_Init+0x2e>
 8002f8e:	f640 401f 	movw	r0, #3103	; 0xc1f
 8002f92:	b005      	add	sp, #20
 8002f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f96:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 8002f9a:	b005      	add	sp, #20
 8002f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f9e:	07c7      	lsls	r7, r0, #31
 8002fa0:	d4f5      	bmi.n	8002f8e <AES_CCM_Decrypt_Init+0x1e>
 8002fa2:	6925      	ldr	r5, [r4, #16]
 8002fa4:	1feb      	subs	r3, r5, #7
 8002fa6:	2b06      	cmp	r3, #6
 8002fa8:	d8f1      	bhi.n	8002f8e <AES_CCM_Decrypt_Init+0x1e>
 8002faa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002fac:	f023 0608 	bic.w	r6, r3, #8
 8002fb0:	2e10      	cmp	r6, #16
 8002fb2:	d001      	beq.n	8002fb8 <AES_CCM_Decrypt_Init+0x48>
 8002fb4:	2b20      	cmp	r3, #32
 8002fb6:	d1ea      	bne.n	8002f8e <AES_CCM_Decrypt_Init+0x1e>
 8002fb8:	7926      	ldrb	r6, [r4, #4]
 8002fba:	60e2      	str	r2, [r4, #12]
 8002fbc:	f026 0716 	bic.w	r7, r6, #22
 8002fc0:	07f6      	lsls	r6, r6, #31
 8002fc2:	7127      	strb	r7, [r4, #4]
 8002fc4:	f104 0748 	add.w	r7, r4, #72	; 0x48
 8002fc8:	f140 80ad 	bpl.w	8003126 <AES_CCM_Decrypt_Init+0x1b6>
 8002fcc:	b2c0      	uxtb	r0, r0
 8002fce:	1e86      	subs	r6, r0, #2
 8002fd0:	f1c5 010e 	rsb	r1, r5, #14
 8002fd4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002fd6:	f3c6 0642 	ubfx	r6, r6, #1, #3
 8002fda:	f001 0107 	and.w	r1, r1, #7
 8002fde:	ea41 01c6 	orr.w	r1, r1, r6, lsl #3
 8002fe2:	b108      	cbz	r0, 8002fe8 <AES_CCM_Decrypt_Init+0x78>
 8002fe4:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8002fe8:	7856      	ldrb	r6, [r2, #1]
 8002fea:	f892 e000 	ldrb.w	lr, [r2]
 8002fee:	7890      	ldrb	r0, [r2, #2]
 8002ff0:	0236      	lsls	r6, r6, #8
 8002ff2:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
 8002ff6:	4330      	orrs	r0, r6
 8002ff8:	ea40 6101 	orr.w	r1, r0, r1, lsl #24
 8002ffc:	9100      	str	r1, [sp, #0]
 8002ffe:	7910      	ldrb	r0, [r2, #4]
 8003000:	78d6      	ldrb	r6, [r2, #3]
 8003002:	0400      	lsls	r0, r0, #16
 8003004:	7991      	ldrb	r1, [r2, #6]
 8003006:	ea40 6606 	orr.w	r6, r0, r6, lsl #24
 800300a:	7950      	ldrb	r0, [r2, #5]
 800300c:	4331      	orrs	r1, r6
 800300e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8003012:	2d07      	cmp	r5, #7
 8003014:	9101      	str	r1, [sp, #4]
 8003016:	dd17      	ble.n	8003048 <AES_CCM_Decrypt_Init+0xd8>
 8003018:	f1a5 0e07 	sub.w	lr, r5, #7
 800301c:	2000      	movs	r0, #0
 800301e:	1815      	adds	r5, r2, r0
 8003020:	43c1      	mvns	r1, r0
 8003022:	79ee      	ldrb	r6, [r5, #7]
 8003024:	f001 0103 	and.w	r1, r1, #3
 8003028:	00c9      	lsls	r1, r1, #3
 800302a:	fa06 f101 	lsl.w	r1, r6, r1
 800302e:	f020 0503 	bic.w	r5, r0, #3
 8003032:	ae04      	add	r6, sp, #16
 8003034:	3508      	adds	r5, #8
 8003036:	4435      	add	r5, r6
 8003038:	f855 6c10 	ldr.w	r6, [r5, #-16]
 800303c:	3001      	adds	r0, #1
 800303e:	430e      	orrs	r6, r1
 8003040:	4570      	cmp	r0, lr
 8003042:	f845 6c10 	str.w	r6, [r5, #-16]
 8003046:	d1ea      	bne.n	800301e <AES_CCM_Decrypt_Init+0xae>
 8003048:	9803      	ldr	r0, [sp, #12]
 800304a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800304c:	463a      	mov	r2, r7
 800304e:	ea40 0501 	orr.w	r5, r0, r1
 8003052:	f104 0124 	add.w	r1, r4, #36	; 0x24
 8003056:	4668      	mov	r0, sp
 8003058:	9503      	str	r5, [sp, #12]
 800305a:	f7fe ff9d 	bl	8001f98 <AES_general_SW_enc>
 800305e:	68e6      	ldr	r6, [r4, #12]
 8003060:	6927      	ldr	r7, [r4, #16]
 8003062:	7872      	ldrb	r2, [r6, #1]
 8003064:	7831      	ldrb	r1, [r6, #0]
 8003066:	78b3      	ldrb	r3, [r6, #2]
 8003068:	0212      	lsls	r2, r2, #8
 800306a:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 800306e:	f1c7 020e 	rsb	r2, r7, #14
 8003072:	430b      	orrs	r3, r1
 8003074:	f002 0207 	and.w	r2, r2, #7
 8003078:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800307c:	6163      	str	r3, [r4, #20]
 800307e:	7932      	ldrb	r2, [r6, #4]
 8003080:	78f1      	ldrb	r1, [r6, #3]
 8003082:	79b3      	ldrb	r3, [r6, #6]
 8003084:	0412      	lsls	r2, r2, #16
 8003086:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 800308a:	7972      	ldrb	r2, [r6, #5]
 800308c:	430b      	orrs	r3, r1
 800308e:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8003092:	2f07      	cmp	r7, #7
 8003094:	f04f 0300 	mov.w	r3, #0
 8003098:	61a2      	str	r2, [r4, #24]
 800309a:	61e3      	str	r3, [r4, #28]
 800309c:	6223      	str	r3, [r4, #32]
 800309e:	dd1f      	ble.n	80030e0 <AES_CCM_Decrypt_Init+0x170>
 80030a0:	3f07      	subs	r7, #7
 80030a2:	469c      	mov	ip, r3
 80030a4:	e007      	b.n	80030b6 <AES_CCM_Decrypt_Init+0x146>
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	bfb8      	it	lt
 80030aa:	1cda      	addlt	r2, r3, #3
 80030ac:	f022 0203 	bic.w	r2, r2, #3
 80030b0:	4422      	add	r2, r4
 80030b2:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 80030b6:	18f5      	adds	r5, r6, r3
 80030b8:	43d8      	mvns	r0, r3
 80030ba:	79e9      	ldrb	r1, [r5, #7]
 80030bc:	f000 0003 	and.w	r0, r0, #3
 80030c0:	00c0      	lsls	r0, r0, #3
 80030c2:	4081      	lsls	r1, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	461a      	mov	r2, r3
 80030c8:	bfb8      	it	lt
 80030ca:	1cda      	addlt	r2, r3, #3
 80030cc:	f022 0203 	bic.w	r2, r2, #3
 80030d0:	3301      	adds	r3, #1
 80030d2:	4422      	add	r2, r4
 80030d4:	ea4c 0101 	orr.w	r1, ip, r1
 80030d8:	42bb      	cmp	r3, r7
 80030da:	61d1      	str	r1, [r2, #28]
 80030dc:	461a      	mov	r2, r3
 80030de:	d1e2      	bne.n	80030a6 <AES_CCM_Decrypt_Init+0x136>
 80030e0:	6a23      	ldr	r3, [r4, #32]
 80030e2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80030e4:	f043 0301 	orr.w	r3, r3, #1
 80030e8:	6223      	str	r3, [r4, #32]
 80030ea:	2800      	cmp	r0, #0
 80030ec:	f43f af55 	beq.w	8002f9a <AES_CCM_Decrypt_Init+0x2a>
 80030f0:	2300      	movs	r3, #0
 80030f2:	f5b0 4f7f 	cmp.w	r0, #65280	; 0xff00
 80030f6:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
 80030fa:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
 80030fe:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 8003102:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
 8003106:	db19      	blt.n	800313c <AES_CCM_Decrypt_Init+0x1cc>
 8003108:	0c02      	lsrs	r2, r0, #16
 800310a:	ea6f 32c2 	mvn.w	r2, r2, lsl #15
 800310e:	0400      	lsls	r0, r0, #16
 8003110:	ea6f 32d2 	mvn.w	r2, r2, lsr #15
 8003114:	2106      	movs	r1, #6
 8003116:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
 800311a:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
 800311e:	4618      	mov	r0, r3
 8003120:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
 8003124:	e739      	b.n	8002f9a <AES_CCM_Decrypt_Init+0x2a>
 8003126:	4608      	mov	r0, r1
 8003128:	461a      	mov	r2, r3
 800312a:	60a1      	str	r1, [r4, #8]
 800312c:	4639      	mov	r1, r7
 800312e:	f7fe ff15 	bl	8001f5c <AES_keyschedule_enc>
 8003132:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003134:	6925      	ldr	r5, [r4, #16]
 8003136:	68e2      	ldr	r2, [r4, #12]
 8003138:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800313a:	e747      	b.n	8002fcc <AES_CCM_Decrypt_Init+0x5c>
 800313c:	0400      	lsls	r0, r0, #16
 800313e:	2202      	movs	r2, #2
 8003140:	f8c4 0138 	str.w	r0, [r4, #312]	; 0x138
 8003144:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
 8003148:	4618      	mov	r0, r3
 800314a:	e726      	b.n	8002f9a <AES_CCM_Decrypt_Init+0x2a>

0800314c <AES_CCM_Decrypt_Append>:
 800314c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003150:	4606      	mov	r6, r0
 8003152:	b08d      	sub	sp, #52	; 0x34
 8003154:	2000      	movs	r0, #0
 8003156:	460f      	mov	r7, r1
 8003158:	9200      	str	r2, [sp, #0]
 800315a:	4698      	mov	r8, r3
 800315c:	9008      	str	r0, [sp, #32]
 800315e:	9009      	str	r0, [sp, #36]	; 0x24
 8003160:	900a      	str	r0, [sp, #40]	; 0x28
 8003162:	900b      	str	r0, [sp, #44]	; 0x2c
 8003164:	b16e      	cbz	r6, 8003182 <AES_CCM_Decrypt_Append+0x36>
 8003166:	b161      	cbz	r1, 8003182 <AES_CCM_Decrypt_Append+0x36>
 8003168:	b15b      	cbz	r3, 8003182 <AES_CCM_Decrypt_Append+0x36>
 800316a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800316c:	b14a      	cbz	r2, 8003182 <AES_CCM_Decrypt_Append+0x36>
 800316e:	f896 c004 	ldrb.w	ip, [r6, #4]
 8003172:	f01c 0c06 	ands.w	ip, ip, #6
 8003176:	d009      	beq.n	800318c <AES_CCM_Decrypt_Append+0x40>
 8003178:	f640 401e 	movw	r0, #3102	; 0xc1e
 800317c:	b00d      	add	sp, #52	; 0x34
 800317e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003182:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 8003186:	b00d      	add	sp, #52	; 0x34
 8003188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800318c:	9b00      	ldr	r3, [sp, #0]
 800318e:	2b0f      	cmp	r3, #15
 8003190:	f340 81aa 	ble.w	80034e8 <AES_CCM_Decrypt_Append+0x39c>
 8003194:	3b10      	subs	r3, #16
 8003196:	f023 030f 	bic.w	r3, r3, #15
 800319a:	f106 0214 	add.w	r2, r6, #20
 800319e:	f103 0b10 	add.w	fp, r3, #16
 80031a2:	9202      	str	r2, [sp, #8]
 80031a4:	f106 0324 	add.w	r3, r6, #36	; 0x24
 80031a8:	aa04      	add	r2, sp, #16
 80031aa:	46e2      	mov	sl, ip
 80031ac:	f106 0948 	add.w	r9, r6, #72	; 0x48
 80031b0:	9303      	str	r3, [sp, #12]
 80031b2:	460d      	mov	r5, r1
 80031b4:	4644      	mov	r4, r8
 80031b6:	9201      	str	r2, [sp, #4]
 80031b8:	9802      	ldr	r0, [sp, #8]
 80031ba:	a908      	add	r1, sp, #32
 80031bc:	464a      	mov	r2, r9
 80031be:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80031c0:	f7fe feea 	bl	8001f98 <AES_general_SW_enc>
 80031c4:	6a32      	ldr	r2, [r6, #32]
 80031c6:	9b08      	ldr	r3, [sp, #32]
 80031c8:	3201      	adds	r2, #1
 80031ca:	6232      	str	r2, [r6, #32]
 80031cc:	7868      	ldrb	r0, [r5, #1]
 80031ce:	f817 200a 	ldrb.w	r2, [r7, sl]
 80031d2:	78e9      	ldrb	r1, [r5, #3]
 80031d4:	0400      	lsls	r0, r0, #16
 80031d6:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 80031da:	78aa      	ldrb	r2, [r5, #2]
 80031dc:	4308      	orrs	r0, r1
 80031de:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80031e2:	4058      	eors	r0, r3
 80031e4:	0a01      	lsrs	r1, r0, #8
 80031e6:	0c02      	lsrs	r2, r0, #16
 80031e8:	0e03      	lsrs	r3, r0, #24
 80031ea:	70e0      	strb	r0, [r4, #3]
 80031ec:	70a1      	strb	r1, [r4, #2]
 80031ee:	7062      	strb	r2, [r4, #1]
 80031f0:	f808 300a 	strb.w	r3, [r8, sl]
 80031f4:	796b      	ldrb	r3, [r5, #5]
 80031f6:	7929      	ldrb	r1, [r5, #4]
 80031f8:	79ea      	ldrb	r2, [r5, #7]
 80031fa:	041b      	lsls	r3, r3, #16
 80031fc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003200:	79a9      	ldrb	r1, [r5, #6]
 8003202:	4313      	orrs	r3, r2
 8003204:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003206:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800320a:	4053      	eors	r3, r2
 800320c:	0a1a      	lsrs	r2, r3, #8
 800320e:	f8d6 e024 	ldr.w	lr, [r6, #36]	; 0x24
 8003212:	0c19      	lsrs	r1, r3, #16
 8003214:	71a2      	strb	r2, [r4, #6]
 8003216:	0e1a      	lsrs	r2, r3, #24
 8003218:	71e3      	strb	r3, [r4, #7]
 800321a:	7161      	strb	r1, [r4, #5]
 800321c:	7122      	strb	r2, [r4, #4]
 800321e:	7a6a      	ldrb	r2, [r5, #9]
 8003220:	7a29      	ldrb	r1, [r5, #8]
 8003222:	0412      	lsls	r2, r2, #16
 8003224:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003228:	7ae9      	ldrb	r1, [r5, #11]
 800322a:	ea80 0e0e 	eor.w	lr, r0, lr
 800322e:	430a      	orrs	r2, r1
 8003230:	7aa9      	ldrb	r1, [r5, #10]
 8003232:	9008      	str	r0, [sp, #32]
 8003234:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003236:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800323a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800323c:	4042      	eors	r2, r0
 800323e:	4059      	eors	r1, r3
 8003240:	0a10      	lsrs	r0, r2, #8
 8003242:	9309      	str	r3, [sp, #36]	; 0x24
 8003244:	f8cd e010 	str.w	lr, [sp, #16]
 8003248:	0c13      	lsrs	r3, r2, #16
 800324a:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 800324e:	72e2      	strb	r2, [r4, #11]
 8003250:	920a      	str	r2, [sp, #40]	; 0x28
 8003252:	9105      	str	r1, [sp, #20]
 8003254:	72a0      	strb	r0, [r4, #10]
 8003256:	f884 e008 	strb.w	lr, [r4, #8]
 800325a:	7263      	strb	r3, [r4, #9]
 800325c:	7b69      	ldrb	r1, [r5, #13]
 800325e:	7b28      	ldrb	r0, [r5, #12]
 8003260:	7beb      	ldrb	r3, [r5, #15]
 8003262:	0409      	lsls	r1, r1, #16
 8003264:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
 8003268:	7ba8      	ldrb	r0, [r5, #14]
 800326a:	4319      	orrs	r1, r3
 800326c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800326e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8003272:	4059      	eors	r1, r3
 8003274:	0a0b      	lsrs	r3, r1, #8
 8003276:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8003278:	ea4f 4e11 	mov.w	lr, r1, lsr #16
 800327c:	73a3      	strb	r3, [r4, #14]
 800327e:	0e0b      	lsrs	r3, r1, #24
 8003280:	73e1      	strb	r1, [r4, #15]
 8003282:	f884 e00d 	strb.w	lr, [r4, #13]
 8003286:	7323      	strb	r3, [r4, #12]
 8003288:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800328a:	4042      	eors	r2, r0
 800328c:	ea81 0e03 	eor.w	lr, r1, r3
 8003290:	910b      	str	r1, [sp, #44]	; 0x2c
 8003292:	9206      	str	r2, [sp, #24]
 8003294:	f10a 0a10 	add.w	sl, sl, #16
 8003298:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800329a:	9801      	ldr	r0, [sp, #4]
 800329c:	9903      	ldr	r1, [sp, #12]
 800329e:	464a      	mov	r2, r9
 80032a0:	f8cd e01c 	str.w	lr, [sp, #28]
 80032a4:	f7fe fe78 	bl	8001f98 <AES_general_SW_enc>
 80032a8:	45da      	cmp	sl, fp
 80032aa:	f105 0510 	add.w	r5, r5, #16
 80032ae:	f104 0410 	add.w	r4, r4, #16
 80032b2:	d181      	bne.n	80031b8 <AES_CCM_Decrypt_Append+0x6c>
 80032b4:	9b00      	ldr	r3, [sp, #0]
 80032b6:	459b      	cmp	fp, r3
 80032b8:	db04      	blt.n	80032c4 <AES_CCM_Decrypt_Append+0x178>
 80032ba:	9a00      	ldr	r2, [sp, #0]
 80032bc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80032be:	2000      	movs	r0, #0
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	e760      	b.n	8003186 <AES_CCM_Decrypt_Append+0x3a>
 80032c4:	7933      	ldrb	r3, [r6, #4]
 80032c6:	f106 0a48 	add.w	sl, r6, #72	; 0x48
 80032ca:	f043 0304 	orr.w	r3, r3, #4
 80032ce:	7133      	strb	r3, [r6, #4]
 80032d0:	4652      	mov	r2, sl
 80032d2:	a908      	add	r1, sp, #32
 80032d4:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80032d6:	f106 0014 	add.w	r0, r6, #20
 80032da:	f7fe fe5d 	bl	8001f98 <AES_general_SW_enc>
 80032de:	9a00      	ldr	r2, [sp, #0]
 80032e0:	ebcb 0102 	rsb	r1, fp, r2
 80032e4:	2900      	cmp	r1, #0
 80032e6:	460b      	mov	r3, r1
 80032e8:	bfb8      	it	lt
 80032ea:	1ccb      	addlt	r3, r1, #3
 80032ec:	109b      	asrs	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f340 80fc 	ble.w	80034ec <AES_CCM_Decrypt_Append+0x3a0>
 80032f4:	f10b 0503 	add.w	r5, fp, #3
 80032f8:	5d7a      	ldrb	r2, [r7, r5]
 80032fa:	f817 c00b 	ldrb.w	ip, [r7, fp]
 80032fe:	f10b 0402 	add.w	r4, fp, #2
 8003302:	f817 e004 	ldrb.w	lr, [r7, r4]
 8003306:	f10b 0001 	add.w	r0, fp, #1
 800330a:	ea42 620c 	orr.w	r2, r2, ip, lsl #24
 800330e:	f817 c000 	ldrb.w	ip, [r7, r0]
 8003312:	ea42 2e0e 	orr.w	lr, r2, lr, lsl #8
 8003316:	9a08      	ldr	r2, [sp, #32]
 8003318:	ea4e 4e0c 	orr.w	lr, lr, ip, lsl #16
 800331c:	ea8e 0202 	eor.w	r2, lr, r2
 8003320:	f808 2005 	strb.w	r2, [r8, r5]
 8003324:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8003328:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800332c:	0e15      	lsrs	r5, r2, #24
 800332e:	f808 c004 	strb.w	ip, [r8, r4]
 8003332:	f808 e000 	strb.w	lr, [r8, r0]
 8003336:	f808 500b 	strb.w	r5, [r8, fp]
 800333a:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800333c:	9208      	str	r2, [sp, #32]
 800333e:	2b01      	cmp	r3, #1
 8003340:	ea82 0200 	eor.w	r2, r2, r0
 8003344:	9204      	str	r2, [sp, #16]
 8003346:	f340 8087 	ble.w	8003458 <AES_CCM_Decrypt_Append+0x30c>
 800334a:	f10b 0004 	add.w	r0, fp, #4
 800334e:	f10b 0e07 	add.w	lr, fp, #7
 8003352:	f817 9000 	ldrb.w	r9, [r7, r0]
 8003356:	f817 200e 	ldrb.w	r2, [r7, lr]
 800335a:	f10b 0506 	add.w	r5, fp, #6
 800335e:	f817 c005 	ldrb.w	ip, [r7, r5]
 8003362:	f10b 0405 	add.w	r4, fp, #5
 8003366:	ea42 6209 	orr.w	r2, r2, r9, lsl #24
 800336a:	f817 9004 	ldrb.w	r9, [r7, r4]
 800336e:	ea42 2c0c 	orr.w	ip, r2, ip, lsl #8
 8003372:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003374:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
 8003378:	ea8c 0202 	eor.w	r2, ip, r2
 800337c:	f808 200e 	strb.w	r2, [r8, lr]
 8003380:	ea4f 2912 	mov.w	r9, r2, lsr #8
 8003384:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8003388:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 800338c:	f808 9005 	strb.w	r9, [r8, r5]
 8003390:	f808 c004 	strb.w	ip, [r8, r4]
 8003394:	f808 e000 	strb.w	lr, [r8, r0]
 8003398:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 800339a:	9209      	str	r2, [sp, #36]	; 0x24
 800339c:	2b02      	cmp	r3, #2
 800339e:	ea82 0200 	eor.w	r2, r2, r0
 80033a2:	9205      	str	r2, [sp, #20]
 80033a4:	dd58      	ble.n	8003458 <AES_CCM_Decrypt_Append+0x30c>
 80033a6:	f10b 0008 	add.w	r0, fp, #8
 80033aa:	f10b 0e0b 	add.w	lr, fp, #11
 80033ae:	f817 9000 	ldrb.w	r9, [r7, r0]
 80033b2:	f817 200e 	ldrb.w	r2, [r7, lr]
 80033b6:	f10b 050a 	add.w	r5, fp, #10
 80033ba:	f817 c005 	ldrb.w	ip, [r7, r5]
 80033be:	f10b 0409 	add.w	r4, fp, #9
 80033c2:	ea42 6209 	orr.w	r2, r2, r9, lsl #24
 80033c6:	f817 9004 	ldrb.w	r9, [r7, r4]
 80033ca:	ea42 2c0c 	orr.w	ip, r2, ip, lsl #8
 80033ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80033d0:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
 80033d4:	ea8c 0202 	eor.w	r2, ip, r2
 80033d8:	f808 200e 	strb.w	r2, [r8, lr]
 80033dc:	ea4f 2912 	mov.w	r9, r2, lsr #8
 80033e0:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80033e4:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80033e8:	f808 9005 	strb.w	r9, [r8, r5]
 80033ec:	f808 c004 	strb.w	ip, [r8, r4]
 80033f0:	f808 e000 	strb.w	lr, [r8, r0]
 80033f4:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80033f6:	920a      	str	r2, [sp, #40]	; 0x28
 80033f8:	2b03      	cmp	r3, #3
 80033fa:	ea82 0200 	eor.w	r2, r2, r0
 80033fe:	9206      	str	r2, [sp, #24]
 8003400:	dd2a      	ble.n	8003458 <AES_CCM_Decrypt_Append+0x30c>
 8003402:	f10b 000c 	add.w	r0, fp, #12
 8003406:	f10b 0e0f 	add.w	lr, fp, #15
 800340a:	f817 9000 	ldrb.w	r9, [r7, r0]
 800340e:	f817 200e 	ldrb.w	r2, [r7, lr]
 8003412:	f10b 040d 	add.w	r4, fp, #13
 8003416:	f817 c004 	ldrb.w	ip, [r7, r4]
 800341a:	f10b 050e 	add.w	r5, fp, #14
 800341e:	ea42 6209 	orr.w	r2, r2, r9, lsl #24
 8003422:	f817 9005 	ldrb.w	r9, [r7, r5]
 8003426:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
 800342a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800342c:	ea4c 2c09 	orr.w	ip, ip, r9, lsl #8
 8003430:	ea8c 0202 	eor.w	r2, ip, r2
 8003434:	f808 200e 	strb.w	r2, [r8, lr]
 8003438:	ea4f 2912 	mov.w	r9, r2, lsr #8
 800343c:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8003440:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8003444:	f808 9005 	strb.w	r9, [r8, r5]
 8003448:	f808 c004 	strb.w	ip, [r8, r4]
 800344c:	f808 e000 	strb.w	lr, [r8, r0]
 8003450:	6b30      	ldr	r0, [r6, #48]	; 0x30
 8003452:	920b      	str	r2, [sp, #44]	; 0x2c
 8003454:	4042      	eors	r2, r0
 8003456:	9207      	str	r2, [sp, #28]
 8003458:	ebc3 7283 	rsb	r2, r3, r3, lsl #30
 800345c:	0092      	lsls	r2, r2, #2
 800345e:	f103 0c01 	add.w	ip, r3, #1
 8003462:	eb06 0083 	add.w	r0, r6, r3, lsl #2
 8003466:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4411      	add	r1, r2
 800346e:	a80c      	add	r0, sp, #48	; 0x30
 8003470:	4418      	add	r0, r3
 8003472:	2900      	cmp	r1, #0
 8003474:	f840 ec20 	str.w	lr, [r0, #-32]
 8003478:	dd1f      	ble.n	80034ba <AES_CCM_Decrypt_Append+0x36e>
 800347a:	eb0b 0203 	add.w	r2, fp, r3
 800347e:	f850 4c10 	ldr.w	r4, [r0, #-16]
 8003482:	4417      	add	r7, r2
 8003484:	4490      	add	r8, r2
 8003486:	2018      	movs	r0, #24
 8003488:	2200      	movs	r2, #0
 800348a:	5cbd      	ldrb	r5, [r7, r2]
 800348c:	4085      	lsls	r5, r0
 800348e:	406c      	eors	r4, r5
 8003490:	fa24 f500 	lsr.w	r5, r4, r0
 8003494:	fa5f f985 	uxtb.w	r9, r5
 8003498:	fa09 f900 	lsl.w	r9, r9, r0
 800349c:	f808 5002 	strb.w	r5, [r8, r2]
 80034a0:	3201      	adds	r2, #1
 80034a2:	428a      	cmp	r2, r1
 80034a4:	ea8e 0e09 	eor.w	lr, lr, r9
 80034a8:	f1a0 0008 	sub.w	r0, r0, #8
 80034ac:	d1ed      	bne.n	800348a <AES_CCM_Decrypt_Append+0x33e>
 80034ae:	aa0c      	add	r2, sp, #48	; 0x30
 80034b0:	4413      	add	r3, r2
 80034b2:	f843 4c10 	str.w	r4, [r3, #-16]
 80034b6:	f843 ec20 	str.w	lr, [r3, #-32]
 80034ba:	f1bc 0f03 	cmp.w	ip, #3
 80034be:	dc1a      	bgt.n	80034f6 <AES_CCM_Decrypt_Append+0x3aa>
 80034c0:	ea4f 008c 	mov.w	r0, ip, lsl #2
 80034c4:	ab04      	add	r3, sp, #16
 80034c6:	f100 0124 	add.w	r1, r0, #36	; 0x24
 80034ca:	f1c0 0210 	rsb	r2, r0, #16
 80034ce:	4431      	add	r1, r6
 80034d0:	4418      	add	r0, r3
 80034d2:	9301      	str	r3, [sp, #4]
 80034d4:	f000 f8fe 	bl	80036d4 <memcpy>
 80034d8:	9801      	ldr	r0, [sp, #4]
 80034da:	4652      	mov	r2, sl
 80034dc:	f106 0124 	add.w	r1, r6, #36	; 0x24
 80034e0:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80034e2:	f7fe fd59 	bl	8001f98 <AES_general_SW_enc>
 80034e6:	e6e8      	b.n	80032ba <AES_CCM_Decrypt_Append+0x16e>
 80034e8:	46e3      	mov	fp, ip
 80034ea:	e6e3      	b.n	80032b4 <AES_CCM_Decrypt_Append+0x168>
 80034ec:	2200      	movs	r2, #0
 80034ee:	4613      	mov	r3, r2
 80034f0:	f04f 0c01 	mov.w	ip, #1
 80034f4:	e7b5      	b.n	8003462 <AES_CCM_Decrypt_Append+0x316>
 80034f6:	ab04      	add	r3, sp, #16
 80034f8:	9301      	str	r3, [sp, #4]
 80034fa:	4618      	mov	r0, r3
 80034fc:	e7ed      	b.n	80034da <AES_CCM_Decrypt_Append+0x38e>
 80034fe:	bf00      	nop

08003500 <AES_CCM_Decrypt_Finish>:
 8003500:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003504:	2300      	movs	r3, #0
 8003506:	b085      	sub	sp, #20
 8003508:	4680      	mov	r8, r0
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	9301      	str	r3, [sp, #4]
 800350e:	9302      	str	r3, [sp, #8]
 8003510:	9303      	str	r3, [sp, #12]
 8003512:	2800      	cmp	r0, #0
 8003514:	f000 80b1 	beq.w	800367a <AES_CCM_Decrypt_Finish+0x17a>
 8003518:	2a00      	cmp	r2, #0
 800351a:	f000 80ae 	beq.w	800367a <AES_CCM_Decrypt_Finish+0x17a>
 800351e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8003520:	b111      	cbz	r1, 8003528 <AES_CCM_Decrypt_Finish+0x28>
 8003522:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8003524:	2910      	cmp	r1, #16
 8003526:	d904      	bls.n	8003532 <AES_CCM_Decrypt_Finish+0x32>
 8003528:	f640 401f 	movw	r0, #3103	; 0xc1f
 800352c:	b005      	add	sp, #20
 800352e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003532:	6013      	str	r3, [r2, #0]
 8003534:	7901      	ldrb	r1, [r0, #4]
 8003536:	6902      	ldr	r2, [r0, #16]
 8003538:	f041 0102 	orr.w	r1, r1, #2
 800353c:	2a0b      	cmp	r2, #11
 800353e:	7101      	strb	r1, [r0, #4]
 8003540:	f300 8091 	bgt.w	8003666 <AES_CCM_Decrypt_Finish+0x166>
 8003544:	f8c8 3020 	str.w	r3, [r8, #32]
 8003548:	f108 0014 	add.w	r0, r8, #20
 800354c:	4669      	mov	r1, sp
 800354e:	f108 0248 	add.w	r2, r8, #72	; 0x48
 8003552:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 8003556:	f7fe fd1f 	bl	8001f98 <AES_general_SW_enc>
 800355a:	f8d8 903c 	ldr.w	r9, [r8, #60]	; 0x3c
 800355e:	9e01      	ldr	r6, [sp, #4]
 8003560:	f1b9 0f00 	cmp.w	r9, #0
 8003564:	9c02      	ldr	r4, [sp, #8]
 8003566:	9b03      	ldr	r3, [sp, #12]
 8003568:	9800      	ldr	r0, [sp, #0]
 800356a:	46cc      	mov	ip, r9
 800356c:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
 8003570:	bfb8      	it	lt
 8003572:	f109 0c03 	addlt.w	ip, r9, #3
 8003576:	f8d8 5028 	ldr.w	r5, [r8, #40]	; 0x28
 800357a:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
 800357e:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 8003582:	ea4f 0cac 	mov.w	ip, ip, asr #2
 8003586:	4047      	eors	r7, r0
 8003588:	4075      	eors	r5, r6
 800358a:	4061      	eors	r1, r4
 800358c:	4053      	eors	r3, r2
 800358e:	f1bc 0f00 	cmp.w	ip, #0
 8003592:	9700      	str	r7, [sp, #0]
 8003594:	9501      	str	r5, [sp, #4]
 8003596:	9102      	str	r1, [sp, #8]
 8003598:	9303      	str	r3, [sp, #12]
 800359a:	dd73      	ble.n	8003684 <AES_CCM_Decrypt_Finish+0x184>
 800359c:	f8d8 0038 	ldr.w	r0, [r8, #56]	; 0x38
 80035a0:	f1bc 0f01 	cmp.w	ip, #1
 80035a4:	7804      	ldrb	r4, [r0, #0]
 80035a6:	78c2      	ldrb	r2, [r0, #3]
 80035a8:	7886      	ldrb	r6, [r0, #2]
 80035aa:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 80035ae:	7844      	ldrb	r4, [r0, #1]
 80035b0:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
 80035b4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80035b8:	ea82 0707 	eor.w	r7, r2, r7
 80035bc:	dd2b      	ble.n	8003616 <AES_CCM_Decrypt_Finish+0x116>
 80035be:	79c2      	ldrb	r2, [r0, #7]
 80035c0:	7906      	ldrb	r6, [r0, #4]
 80035c2:	7984      	ldrb	r4, [r0, #6]
 80035c4:	ea42 6606 	orr.w	r6, r2, r6, lsl #24
 80035c8:	7942      	ldrb	r2, [r0, #5]
 80035ca:	ea46 2604 	orr.w	r6, r6, r4, lsl #8
 80035ce:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 80035d2:	4075      	eors	r5, r6
 80035d4:	f1bc 0f02 	cmp.w	ip, #2
 80035d8:	ea47 0705 	orr.w	r7, r7, r5
 80035dc:	dd1b      	ble.n	8003616 <AES_CCM_Decrypt_Finish+0x116>
 80035de:	7ac2      	ldrb	r2, [r0, #11]
 80035e0:	7a04      	ldrb	r4, [r0, #8]
 80035e2:	7a85      	ldrb	r5, [r0, #10]
 80035e4:	ea42 6404 	orr.w	r4, r2, r4, lsl #24
 80035e8:	7a42      	ldrb	r2, [r0, #9]
 80035ea:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 80035ee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80035f2:	4061      	eors	r1, r4
 80035f4:	f1bc 0f03 	cmp.w	ip, #3
 80035f8:	ea47 0701 	orr.w	r7, r7, r1
 80035fc:	dd0b      	ble.n	8003616 <AES_CCM_Decrypt_Finish+0x116>
 80035fe:	7b01      	ldrb	r1, [r0, #12]
 8003600:	7bc2      	ldrb	r2, [r0, #15]
 8003602:	7b44      	ldrb	r4, [r0, #13]
 8003604:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003608:	7b81      	ldrb	r1, [r0, #14]
 800360a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800360e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003612:	4053      	eors	r3, r2
 8003614:	431f      	orrs	r7, r3
 8003616:	ebcc 748c 	rsb	r4, ip, ip, lsl #30
 800361a:	00a4      	lsls	r4, r4, #2
 800361c:	44a1      	add	r9, r4
 800361e:	f1b9 0f00 	cmp.w	r9, #0
 8003622:	dd17      	ble.n	8003654 <AES_CCM_Decrypt_Finish+0x154>
 8003624:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003628:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
 800362c:	ab04      	add	r3, sp, #16
 800362e:	4463      	add	r3, ip
 8003630:	44e1      	add	r9, ip
 8003632:	f853 5c10 	ldr.w	r5, [r3, #-16]
 8003636:	eb02 0409 	add.w	r4, r2, r9
 800363a:	2318      	movs	r3, #24
 800363c:	4462      	add	r2, ip
 800363e:	fa25 f103 	lsr.w	r1, r5, r3
 8003642:	f812 0b01 	ldrb.w	r0, [r2], #1
 8003646:	3b08      	subs	r3, #8
 8003648:	4041      	eors	r1, r0
 800364a:	b2c9      	uxtb	r1, r1
 800364c:	42a2      	cmp	r2, r4
 800364e:	ea47 0701 	orr.w	r7, r7, r1
 8003652:	d1f4      	bne.n	800363e <AES_CCM_Decrypt_Finish+0x13e>
 8003654:	2f00      	cmp	r7, #0
 8003656:	f240 30eb 	movw	r0, #1003	; 0x3eb
 800365a:	bf18      	it	ne
 800365c:	f44f 707b 	movne.w	r0, #1004	; 0x3ec
 8003660:	b005      	add	sp, #20
 8003662:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003666:	f1c2 020f 	rsb	r2, r2, #15
 800366a:	f04f 33ff 	mov.w	r3, #4294967295
 800366e:	00d2      	lsls	r2, r2, #3
 8003670:	fa03 f202 	lsl.w	r2, r3, r2
 8003674:	6a03      	ldr	r3, [r0, #32]
 8003676:	4013      	ands	r3, r2
 8003678:	e764      	b.n	8003544 <AES_CCM_Decrypt_Finish+0x44>
 800367a:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 800367e:	b005      	add	sp, #20
 8003680:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003684:	2400      	movs	r4, #0
 8003686:	4627      	mov	r7, r4
 8003688:	46a4      	mov	ip, r4
 800368a:	e7c7      	b.n	800361c <AES_CCM_Decrypt_Finish+0x11c>

0800368c <__libc_init_array>:
 800368c:	b570      	push	{r4, r5, r6, lr}
 800368e:	2600      	movs	r6, #0
 8003690:	4d0c      	ldr	r5, [pc, #48]	; (80036c4 <__libc_init_array+0x38>)
 8003692:	4c0d      	ldr	r4, [pc, #52]	; (80036c8 <__libc_init_array+0x3c>)
 8003694:	1b64      	subs	r4, r4, r5
 8003696:	10a4      	asrs	r4, r4, #2
 8003698:	42a6      	cmp	r6, r4
 800369a:	d109      	bne.n	80036b0 <__libc_init_array+0x24>
 800369c:	f000 f830 	bl	8003700 <_init>
 80036a0:	2600      	movs	r6, #0
 80036a2:	4d0a      	ldr	r5, [pc, #40]	; (80036cc <__libc_init_array+0x40>)
 80036a4:	4c0a      	ldr	r4, [pc, #40]	; (80036d0 <__libc_init_array+0x44>)
 80036a6:	1b64      	subs	r4, r4, r5
 80036a8:	10a4      	asrs	r4, r4, #2
 80036aa:	42a6      	cmp	r6, r4
 80036ac:	d105      	bne.n	80036ba <__libc_init_array+0x2e>
 80036ae:	bd70      	pop	{r4, r5, r6, pc}
 80036b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80036b4:	4798      	blx	r3
 80036b6:	3601      	adds	r6, #1
 80036b8:	e7ee      	b.n	8003698 <__libc_init_array+0xc>
 80036ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80036be:	4798      	blx	r3
 80036c0:	3601      	adds	r6, #1
 80036c2:	e7f2      	b.n	80036aa <__libc_init_array+0x1e>
 80036c4:	08003c74 	.word	0x08003c74
 80036c8:	08003c74 	.word	0x08003c74
 80036cc:	08003c74 	.word	0x08003c74
 80036d0:	08003c78 	.word	0x08003c78

080036d4 <memcpy>:
 80036d4:	440a      	add	r2, r1
 80036d6:	4291      	cmp	r1, r2
 80036d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80036dc:	d100      	bne.n	80036e0 <memcpy+0xc>
 80036de:	4770      	bx	lr
 80036e0:	b510      	push	{r4, lr}
 80036e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036e6:	4291      	cmp	r1, r2
 80036e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80036ec:	d1f9      	bne.n	80036e2 <memcpy+0xe>
 80036ee:	bd10      	pop	{r4, pc}

080036f0 <memset>:
 80036f0:	4603      	mov	r3, r0
 80036f2:	4402      	add	r2, r0
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d100      	bne.n	80036fa <memset+0xa>
 80036f8:	4770      	bx	lr
 80036fa:	f803 1b01 	strb.w	r1, [r3], #1
 80036fe:	e7f9      	b.n	80036f4 <memset+0x4>

08003700 <_init>:
 8003700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003702:	bf00      	nop
 8003704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003706:	bc08      	pop	{r3}
 8003708:	469e      	mov	lr, r3
 800370a:	4770      	bx	lr

0800370c <_fini>:
 800370c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800370e:	bf00      	nop
 8003710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003712:	bc08      	pop	{r3}
 8003714:	469e      	mov	lr, r3
 8003716:	4770      	bx	lr
