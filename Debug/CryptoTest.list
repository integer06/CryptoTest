
CryptoTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003498  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  080035a4  080035a4  000135a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b00  08003b00  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08003b00  08003b00  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b00  08003b00  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b00  08003b00  00013b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b04  08003b04  00013b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08003b08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  2000002c  08003b34  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08003b34  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000abca  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b0b  00000000  00000000  0002ac1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  0002c730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00018392  00000000  00000000  0002d1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000e426  00000000  00000000  0004553a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008a0cc  00000000  00000000  00053960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      000000d5  00000000  00000000  000dda2c  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000998  00000000  00000000  000ddb08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002aa0  00000000  00000000  000de4a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000002c 	.word	0x2000002c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800358c 	.word	0x0800358c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000030 	.word	0x20000030
 8000148:	0800358c 	.word	0x0800358c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
	int32_t status = AES_SUCCESS;
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000156:	f000 fb9d 	bl	8000894 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800015a:	f000 f883 	bl	8000264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015e:	f000 f92b 	bl	80003b8 <MX_GPIO_Init>
  MX_CRC_Init();
 8000162:	f000 f8c5 	bl	80002f0 <MX_CRC_Init>
  MX_TIM1_Init();
 8000166:	f000 f8d7 	bl	8000318 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  /* Encrypt DATA with AES in CCM mode and generate authentication TAG */
  /* Шифруем блок */

  status = STM32_AES_CCM_Encrypt( (uint8_t *) HeaderMessage, HeaderLength , (uint8_t *) Plaintext,
 800016a:	4b30      	ldr	r3, [pc, #192]	; (800022c <main+0xe0>)
 800016c:	6819      	ldr	r1, [r3, #0]
 800016e:	4b30      	ldr	r3, [pc, #192]	; (8000230 <main+0xe4>)
 8000170:	681b      	ldr	r3, [r3, #0]
 8000172:	4a30      	ldr	r2, [pc, #192]	; (8000234 <main+0xe8>)
 8000174:	9205      	str	r2, [sp, #20]
 8000176:	4a30      	ldr	r2, [pc, #192]	; (8000238 <main+0xec>)
 8000178:	9204      	str	r2, [sp, #16]
 800017a:	4a30      	ldr	r2, [pc, #192]	; (800023c <main+0xf0>)
 800017c:	9203      	str	r2, [sp, #12]
 800017e:	2207      	movs	r2, #7
 8000180:	9202      	str	r2, [sp, #8]
 8000182:	4a2f      	ldr	r2, [pc, #188]	; (8000240 <main+0xf4>)
 8000184:	9201      	str	r2, [sp, #4]
 8000186:	4a2f      	ldr	r2, [pc, #188]	; (8000244 <main+0xf8>)
 8000188:	9200      	str	r2, [sp, #0]
 800018a:	4a2f      	ldr	r2, [pc, #188]	; (8000248 <main+0xfc>)
 800018c:	482f      	ldr	r0, [pc, #188]	; (800024c <main+0x100>)
 800018e:	f000 f989 	bl	80004a4 <STM32_AES_CCM_Encrypt>
 8000192:	6078      	str	r0, [r7, #4]
                                  InputLength, Key, IV, sizeof(IV), encrypt_OutputMessage,
                                  &encrypt_OutputMessageLength, &AuthenticationTAGLength);
  if (status == AES_SUCCESS)
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	2b00      	cmp	r3, #0
 8000198:	d10a      	bne.n	80001b0 <main+0x64>
  {

    if (Buffercmp(Expected_Ciphertext, encrypt_OutputMessage, CIPHER_TEXT_LENGTH) == PASSED)
 800019a:	2208      	movs	r2, #8
 800019c:	4927      	ldr	r1, [pc, #156]	; (800023c <main+0xf0>)
 800019e:	482c      	ldr	r0, [pc, #176]	; (8000250 <main+0x104>)
 80001a0:	f000 fa79 	bl	8000696 <Buffercmp>
 80001a4:	4603      	mov	r3, r0
 80001a6:	2b01      	cmp	r3, #1
 80001a8:	d004      	beq.n	80001b4 <main+0x68>

    }
    else
    {

      Error_Handler();
 80001aa:	f000 faa5 	bl	80006f8 <Error_Handler>
 80001ae:	e001      	b.n	80001b4 <main+0x68>

    /* In case of encryption/decryption not success possible values of status:
    * AES_ERR_BAD_OPERATION, AES_ERR_BAD_CONTEXT, AES_ERR_BAD_PARAMETER
    */

    Error_Handler();
 80001b0:	f000 faa2 	bl	80006f8 <Error_Handler>

  }

  /* Усыпляем процессор */
  // отключаем бит прерывания системного таймера
  HAL_SuspendTick();
 80001b4:	f000 fbd0 	bl	8000958 <HAL_SuspendTick>
  // входим в сяпящий режим
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80001b8:	2101      	movs	r1, #1
 80001ba:	2000      	movs	r0, #0
 80001bc:	f000 fec6 	bl	8000f4c <HAL_PWR_EnterSLEEPMode>

  /* Контролируем кнопку */


  /* Будим ядро */
  HAL_ResumeTick();
 80001c0:	f000 fbd8 	bl	8000974 <HAL_ResumeTick>

  /* Запускаем отсчте таймера */
  time_Decrypt = 0; // переменная для хранения времени декодирования
 80001c4:	4b23      	ldr	r3, [pc, #140]	; (8000254 <main+0x108>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	601a      	str	r2, [r3, #0]

  /* Расшифровываем блок */
  /* Decrypt DATA with AES in CCM mode and check the authentication TAG */
  status = STM32_AES_CCM_Decrypt( (uint8_t *) HeaderMessage, sizeof(HeaderMessage), (uint8_t *) encrypt_OutputMessage,
 80001ca:	4b1b      	ldr	r3, [pc, #108]	; (8000238 <main+0xec>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	461a      	mov	r2, r3
 80001d0:	4b18      	ldr	r3, [pc, #96]	; (8000234 <main+0xe8>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	9305      	str	r3, [sp, #20]
 80001d6:	4b20      	ldr	r3, [pc, #128]	; (8000258 <main+0x10c>)
 80001d8:	9304      	str	r3, [sp, #16]
 80001da:	4b20      	ldr	r3, [pc, #128]	; (800025c <main+0x110>)
 80001dc:	9303      	str	r3, [sp, #12]
 80001de:	2307      	movs	r3, #7
 80001e0:	9302      	str	r3, [sp, #8]
 80001e2:	4b17      	ldr	r3, [pc, #92]	; (8000240 <main+0xf4>)
 80001e4:	9301      	str	r3, [sp, #4]
 80001e6:	4b17      	ldr	r3, [pc, #92]	; (8000244 <main+0xf8>)
 80001e8:	9300      	str	r3, [sp, #0]
 80001ea:	4613      	mov	r3, r2
 80001ec:	4a13      	ldr	r2, [pc, #76]	; (800023c <main+0xf0>)
 80001ee:	2108      	movs	r1, #8
 80001f0:	4816      	ldr	r0, [pc, #88]	; (800024c <main+0x100>)
 80001f2:	f000 f9d0 	bl	8000596 <STM32_AES_CCM_Decrypt>
 80001f6:	6078      	str	r0, [r7, #4]
                                  encrypt_OutputMessageLength, Key, IV, sizeof(IV), decrypt_OutputMessage,
                                  &decrypt_OutputMessageLength, AuthenticationTAGLength);
  if (status == AUTHENTICATION_SUCCESSFUL)
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80001fe:	4293      	cmp	r3, r2
 8000200:	d10a      	bne.n	8000218 <main+0xcc>
  {

    if (Buffercmp(Plaintext, decrypt_OutputMessage, PLAINTEXT_LENGTH) == PASSED)
 8000202:	2204      	movs	r2, #4
 8000204:	4915      	ldr	r1, [pc, #84]	; (800025c <main+0x110>)
 8000206:	4810      	ldr	r0, [pc, #64]	; (8000248 <main+0xfc>)
 8000208:	f000 fa45 	bl	8000696 <Buffercmp>
 800020c:	4603      	mov	r3, r0
 800020e:	2b01      	cmp	r3, #1
 8000210:	d004      	beq.n	800021c <main+0xd0>

    }
    else
    {

      Error_Handler();
 8000212:	f000 fa71 	bl	80006f8 <Error_Handler>
 8000216:	e001      	b.n	800021c <main+0xd0>
      *  of status:
      * AES_ERR_BAD_OPERATION, AES_ERR_BAD_CONTEXT, AES_ERR_BAD_PARAMETER,
      * AUTHENTICATION_FAILED
      */

    Error_Handler();
 8000218:	f000 fa6e 	bl	80006f8 <Error_Handler>

  /* Отправляем расшифрованный блок и потраченное на расшифровку время */


  /* Turn on the green led in an infinite loop in case of AES CCM operations are succssfuls*/
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800021c:	2200      	movs	r2, #0
 800021e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000222:	480f      	ldr	r0, [pc, #60]	; (8000260 <main+0x114>)
 8000224:	f000 fe62 	bl	8000eec <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000228:	e7fe      	b.n	8000228 <main+0xdc>
 800022a:	bf00      	nop
 800022c:	20000000 	.word	0x20000000
 8000230:	20000004 	.word	0x20000004
 8000234:	20000054 	.word	0x20000054
 8000238:	2000004c 	.word	0x2000004c
 800023c:	20000058 	.word	0x20000058
 8000240:	20000018 	.word	0x20000018
 8000244:	20000008 	.word	0x20000008
 8000248:	080035bc 	.word	0x080035bc
 800024c:	080035b4 	.word	0x080035b4
 8000250:	080035c0 	.word	0x080035c0
 8000254:	20000048 	.word	0x20000048
 8000258:	20000050 	.word	0x20000050
 800025c:	20000128 	.word	0x20000128
 8000260:	40011000 	.word	0x40011000

08000264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b090      	sub	sp, #64	; 0x40
 8000268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026a:	f107 0318 	add.w	r3, r7, #24
 800026e:	2228      	movs	r2, #40	; 0x28
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f003 f982 	bl	800357c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000278:	1d3b      	adds	r3, r7, #4
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
 800027e:	605a      	str	r2, [r3, #4]
 8000280:	609a      	str	r2, [r3, #8]
 8000282:	60da      	str	r2, [r3, #12]
 8000284:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000286:	2301      	movs	r3, #1
 8000288:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800028a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800028e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000290:	2300      	movs	r3, #0
 8000292:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000294:	2301      	movs	r3, #1
 8000296:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000298:	2302      	movs	r3, #2
 800029a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800029c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002a2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a8:	f107 0318 	add.w	r3, r7, #24
 80002ac:	4618      	mov	r0, r3
 80002ae:	f000 fe69 	bl	8000f84 <HAL_RCC_OscConfig>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d001      	beq.n	80002bc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002b8:	f000 fa1e 	bl	80006f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002bc:	230f      	movs	r3, #15
 80002be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c0:	2302      	movs	r3, #2
 80002c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c4:	2300      	movs	r3, #0
 80002c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ce:	2300      	movs	r3, #0
 80002d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	2102      	movs	r1, #2
 80002d6:	4618      	mov	r0, r3
 80002d8:	f001 f8d4 	bl	8001484 <HAL_RCC_ClockConfig>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002e2:	f000 fa09 	bl	80006f8 <Error_Handler>
  }
}
 80002e6:	bf00      	nop
 80002e8:	3740      	adds	r7, #64	; 0x40
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
	...

080002f0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80002f4:	4b06      	ldr	r3, [pc, #24]	; (8000310 <MX_CRC_Init+0x20>)
 80002f6:	4a07      	ldr	r2, [pc, #28]	; (8000314 <MX_CRC_Init+0x24>)
 80002f8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80002fa:	4805      	ldr	r0, [pc, #20]	; (8000310 <MX_CRC_Init+0x20>)
 80002fc:	f000 fc55 	bl	8000baa <HAL_CRC_Init>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000306:	f000 f9f7 	bl	80006f8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	20000098 	.word	0x20000098
 8000314:	40023000 	.word	0x40023000

08000318 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b086      	sub	sp, #24
 800031c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800031e:	f107 0308 	add.w	r3, r7, #8
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
 8000326:	605a      	str	r2, [r3, #4]
 8000328:	609a      	str	r2, [r3, #8]
 800032a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800032c:	463b      	mov	r3, r7
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000334:	4b1e      	ldr	r3, [pc, #120]	; (80003b0 <MX_TIM1_Init+0x98>)
 8000336:	4a1f      	ldr	r2, [pc, #124]	; (80003b4 <MX_TIM1_Init+0x9c>)
 8000338:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800033a:	4b1d      	ldr	r3, [pc, #116]	; (80003b0 <MX_TIM1_Init+0x98>)
 800033c:	2200      	movs	r2, #0
 800033e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000340:	4b1b      	ldr	r3, [pc, #108]	; (80003b0 <MX_TIM1_Init+0x98>)
 8000342:	2200      	movs	r2, #0
 8000344:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 72;
 8000346:	4b1a      	ldr	r3, [pc, #104]	; (80003b0 <MX_TIM1_Init+0x98>)
 8000348:	2248      	movs	r2, #72	; 0x48
 800034a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800034c:	4b18      	ldr	r3, [pc, #96]	; (80003b0 <MX_TIM1_Init+0x98>)
 800034e:	2200      	movs	r2, #0
 8000350:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000352:	4b17      	ldr	r3, [pc, #92]	; (80003b0 <MX_TIM1_Init+0x98>)
 8000354:	2200      	movs	r2, #0
 8000356:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000358:	4b15      	ldr	r3, [pc, #84]	; (80003b0 <MX_TIM1_Init+0x98>)
 800035a:	2200      	movs	r2, #0
 800035c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800035e:	4814      	ldr	r0, [pc, #80]	; (80003b0 <MX_TIM1_Init+0x98>)
 8000360:	f001 f9f8 	bl	8001754 <HAL_TIM_Base_Init>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 800036a:	f000 f9c5 	bl	80006f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800036e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000372:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000374:	f107 0308 	add.w	r3, r7, #8
 8000378:	4619      	mov	r1, r3
 800037a:	480d      	ldr	r0, [pc, #52]	; (80003b0 <MX_TIM1_Init+0x98>)
 800037c:	f001 fa39 	bl	80017f2 <HAL_TIM_ConfigClockSource>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8000386:	f000 f9b7 	bl	80006f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800038a:	2300      	movs	r3, #0
 800038c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800038e:	2300      	movs	r3, #0
 8000390:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000392:	463b      	mov	r3, r7
 8000394:	4619      	mov	r1, r3
 8000396:	4806      	ldr	r0, [pc, #24]	; (80003b0 <MX_TIM1_Init+0x98>)
 8000398:	f001 fbe8 	bl	8001b6c <HAL_TIMEx_MasterConfigSynchronization>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80003a2:	f000 f9a9 	bl	80006f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80003a6:	bf00      	nop
 80003a8:	3718      	adds	r7, #24
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	200000e0 	.word	0x200000e0
 80003b4:	40012c00 	.word	0x40012c00

080003b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b088      	sub	sp, #32
 80003bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003be:	f107 0310 	add.w	r3, r7, #16
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
 80003c6:	605a      	str	r2, [r3, #4]
 80003c8:	609a      	str	r2, [r3, #8]
 80003ca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003cc:	4b31      	ldr	r3, [pc, #196]	; (8000494 <MX_GPIO_Init+0xdc>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	4a30      	ldr	r2, [pc, #192]	; (8000494 <MX_GPIO_Init+0xdc>)
 80003d2:	f043 0310 	orr.w	r3, r3, #16
 80003d6:	6193      	str	r3, [r2, #24]
 80003d8:	4b2e      	ldr	r3, [pc, #184]	; (8000494 <MX_GPIO_Init+0xdc>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	f003 0310 	and.w	r3, r3, #16
 80003e0:	60fb      	str	r3, [r7, #12]
 80003e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003e4:	4b2b      	ldr	r3, [pc, #172]	; (8000494 <MX_GPIO_Init+0xdc>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	4a2a      	ldr	r2, [pc, #168]	; (8000494 <MX_GPIO_Init+0xdc>)
 80003ea:	f043 0320 	orr.w	r3, r3, #32
 80003ee:	6193      	str	r3, [r2, #24]
 80003f0:	4b28      	ldr	r3, [pc, #160]	; (8000494 <MX_GPIO_Init+0xdc>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	f003 0320 	and.w	r3, r3, #32
 80003f8:	60bb      	str	r3, [r7, #8]
 80003fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003fc:	4b25      	ldr	r3, [pc, #148]	; (8000494 <MX_GPIO_Init+0xdc>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	4a24      	ldr	r2, [pc, #144]	; (8000494 <MX_GPIO_Init+0xdc>)
 8000402:	f043 0304 	orr.w	r3, r3, #4
 8000406:	6193      	str	r3, [r2, #24]
 8000408:	4b22      	ldr	r3, [pc, #136]	; (8000494 <MX_GPIO_Init+0xdc>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	f003 0304 	and.w	r3, r3, #4
 8000410:	607b      	str	r3, [r7, #4]
 8000412:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000414:	2200      	movs	r2, #0
 8000416:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800041a:	481f      	ldr	r0, [pc, #124]	; (8000498 <MX_GPIO_Init+0xe0>)
 800041c:	f000 fd66 	bl	8000eec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000420:	2200      	movs	r2, #0
 8000422:	2101      	movs	r1, #1
 8000424:	481d      	ldr	r0, [pc, #116]	; (800049c <MX_GPIO_Init+0xe4>)
 8000426:	f000 fd61 	bl	8000eec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 800042a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800042e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000430:	2301      	movs	r3, #1
 8000432:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000434:	2300      	movs	r3, #0
 8000436:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000438:	2302      	movs	r3, #2
 800043a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 800043c:	f107 0310 	add.w	r3, r7, #16
 8000440:	4619      	mov	r1, r3
 8000442:	4815      	ldr	r0, [pc, #84]	; (8000498 <MX_GPIO_Init+0xe0>)
 8000444:	f000 fbce 	bl	8000be4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 8000448:	2301      	movs	r3, #1
 800044a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800044c:	2301      	movs	r3, #1
 800044e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000450:	2300      	movs	r3, #0
 8000452:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000454:	2302      	movs	r3, #2
 8000456:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8000458:	f107 0310 	add.w	r3, r7, #16
 800045c:	4619      	mov	r1, r3
 800045e:	480f      	ldr	r0, [pc, #60]	; (800049c <MX_GPIO_Init+0xe4>)
 8000460:	f000 fbc0 	bl	8000be4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000464:	2302      	movs	r3, #2
 8000466:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000468:	4b0d      	ldr	r3, [pc, #52]	; (80004a0 <MX_GPIO_Init+0xe8>)
 800046a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800046c:	2302      	movs	r3, #2
 800046e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000470:	f107 0310 	add.w	r3, r7, #16
 8000474:	4619      	mov	r1, r3
 8000476:	4809      	ldr	r0, [pc, #36]	; (800049c <MX_GPIO_Init+0xe4>)
 8000478:	f000 fbb4 	bl	8000be4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800047c:	2200      	movs	r2, #0
 800047e:	2100      	movs	r1, #0
 8000480:	2007      	movs	r0, #7
 8000482:	f000 fb5c 	bl	8000b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000486:	2007      	movs	r0, #7
 8000488:	f000 fb75 	bl	8000b76 <HAL_NVIC_EnableIRQ>

}
 800048c:	bf00      	nop
 800048e:	3720      	adds	r7, #32
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	40021000 	.word	0x40021000
 8000498:	40011000 	.word	0x40011000
 800049c:	40010800 	.word	0x40010800
 80004a0:	10110000 	.word	0x10110000

080004a4 <STM32_AES_CCM_Encrypt>:
                              uint32_t  IvLength,
                              uint8_t  *OutputMessage,
                              int32_t *OutputMessageLength,
                              int32_t *AuthenticationTAGLength
                             )
{
 80004a4:	b590      	push	{r4, r7, lr}
 80004a6:	b0db      	sub	sp, #364	; 0x16c
 80004a8:	af02      	add	r7, sp, #8
 80004aa:	f107 040c 	add.w	r4, r7, #12
 80004ae:	6020      	str	r0, [r4, #0]
 80004b0:	f107 0008 	add.w	r0, r7, #8
 80004b4:	6001      	str	r1, [r0, #0]
 80004b6:	1d39      	adds	r1, r7, #4
 80004b8:	600a      	str	r2, [r1, #0]
 80004ba:	463a      	mov	r2, r7
 80004bc:	6013      	str	r3, [r2, #0]
  AESCCMctx_stt AESctx;

  uint32_t error_status = AES_SUCCESS;
 80004be:	2300      	movs	r3, #0
 80004c0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

  /* Set flag field to default value */
  AESctx.mFlags = E_SK_DEFAULT;
 80004c4:	f107 0310 	add.w	r3, r7, #16
 80004c8:	2200      	movs	r2, #0
 80004ca:	711a      	strb	r2, [r3, #4]

  /* Set key size to 16 (corresponding to AES-128) */
  AESctx.mKeySize = 16;
 80004cc:	f107 0310 	add.w	r3, r7, #16
 80004d0:	2210      	movs	r2, #16
 80004d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set nonce size field to IvLength, note that valid values are 7,8,9,10,11,12,13*/
  AESctx.mNonceSize = IvLength;
 80004d4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80004d8:	f107 0310 	add.w	r3, r7, #16
 80004dc:	611a      	str	r2, [r3, #16]

  /* Size of returned authentication TAG */
  AESctx.mTagSize = 4;
 80004de:	f107 0310 	add.w	r3, r7, #16
 80004e2:	2204      	movs	r2, #4
 80004e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the size of the header */
  AESctx.mAssDataSize = HeaderMessageLength;
 80004e6:	f107 0308 	add.w	r3, r7, #8
 80004ea:	681a      	ldr	r2, [r3, #0]
 80004ec:	f107 0310 	add.w	r3, r7, #16
 80004f0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of thepayload */
  AESctx.mPayloadSize = PlaintextLength;
 80004f2:	463b      	mov	r3, r7
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	f107 0310 	add.w	r3, r7, #16
 80004fa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the operation, by passing the key and IV */
  error_status = AES_CCM_Encrypt_Init(&AESctx, AES128_Key, InitializationVector );
 80004fc:	f107 0310 	add.w	r3, r7, #16
 8000500:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000504:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000508:	4618      	mov	r0, r3
 800050a:	f001 fe17 	bl	800213c <AES_CCM_Encrypt_Init>
 800050e:	4603      	mov	r3, r0
 8000510:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

  /* check for initialization errors */
  if (error_status == AES_SUCCESS)
 8000514:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000518:	2b00      	cmp	r3, #0
 800051a:	d135      	bne.n	8000588 <STM32_AES_CCM_Encrypt+0xe4>
  {
    /* Process Header */
    error_status = AES_CCM_Header_Append(&AESctx,
 800051c:	f107 0308 	add.w	r3, r7, #8
 8000520:	681a      	ldr	r2, [r3, #0]
 8000522:	f107 030c 	add.w	r3, r7, #12
 8000526:	f107 0010 	add.w	r0, r7, #16
 800052a:	6819      	ldr	r1, [r3, #0]
 800052c:	f001 fef4 	bl	8002318 <AES_CCM_Header_Append>
 8000530:	4603      	mov	r3, r0
 8000532:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
                                         HeaderMessage,
                                         HeaderMessageLength);
    if (error_status == AES_SUCCESS)
 8000536:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800053a:	2b00      	cmp	r3, #0
 800053c:	d124      	bne.n	8000588 <STM32_AES_CCM_Encrypt+0xe4>
    {
      /* Encrypt Data */
      error_status = AES_CCM_Encrypt_Append(&AESctx,
 800053e:	463b      	mov	r3, r7
 8000540:	681a      	ldr	r2, [r3, #0]
 8000542:	1d39      	adds	r1, r7, #4
 8000544:	f107 0010 	add.w	r0, r7, #16
 8000548:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800054c:	9300      	str	r3, [sp, #0]
 800054e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8000552:	6809      	ldr	r1, [r1, #0]
 8000554:	f002 f860 	bl	8002618 <AES_CCM_Encrypt_Append>
 8000558:	4603      	mov	r3, r0
 800055a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
                                            Plaintext,
                                            PlaintextLength,
                                            OutputMessage,
                                            OutputMessageLength);

      if (error_status == AES_SUCCESS)
 800055e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000562:	2b00      	cmp	r3, #0
 8000564:	d110      	bne.n	8000588 <STM32_AES_CCM_Encrypt+0xe4>
      {
        /* Do the Finalization, write the TAG at the end of the encrypted message */
        error_status = AES_CCM_Encrypt_Finish(&AESctx, OutputMessage + *OutputMessageLength, AuthenticationTAGLength);
 8000566:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	461a      	mov	r2, r3
 800056e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8000572:	1899      	adds	r1, r3, r2
 8000574:	f107 0310 	add.w	r3, r7, #16
 8000578:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 800057c:	4618      	mov	r0, r3
 800057e:	f002 fbdf 	bl	8002d40 <AES_CCM_Encrypt_Finish>
 8000582:	4603      	mov	r3, r0
 8000584:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
      }
    }
  }

  return error_status;
 8000588:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
}
 800058c:	4618      	mov	r0, r3
 800058e:	f507 77b2 	add.w	r7, r7, #356	; 0x164
 8000592:	46bd      	mov	sp, r7
 8000594:	bd90      	pop	{r4, r7, pc}

08000596 <STM32_AES_CCM_Decrypt>:
                              uint32_t  IvLength,
                              uint8_t  *OutputMessage,
                              int32_t *OutputMessageLength,
                              int32_t  AuthenticationTAGLength
                             )
{
 8000596:	b590      	push	{r4, r7, lr}
 8000598:	b0db      	sub	sp, #364	; 0x16c
 800059a:	af02      	add	r7, sp, #8
 800059c:	f107 040c 	add.w	r4, r7, #12
 80005a0:	6020      	str	r0, [r4, #0]
 80005a2:	f107 0008 	add.w	r0, r7, #8
 80005a6:	6001      	str	r1, [r0, #0]
 80005a8:	1d39      	adds	r1, r7, #4
 80005aa:	600a      	str	r2, [r1, #0]
 80005ac:	463a      	mov	r2, r7
 80005ae:	6013      	str	r3, [r2, #0]
  AESCCMctx_stt AESctx;

  uint32_t error_status = AES_SUCCESS;
 80005b0:	2300      	movs	r3, #0
 80005b2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

  /* Set flag field to default value */
  AESctx.mFlags = E_SK_DEFAULT;
 80005b6:	f107 0310 	add.w	r3, r7, #16
 80005ba:	2200      	movs	r2, #0
 80005bc:	711a      	strb	r2, [r3, #4]

  /* Set key size to 16 (corresponding to AES-128) */
  AESctx.mKeySize = 16;
 80005be:	f107 0310 	add.w	r3, r7, #16
 80005c2:	2210      	movs	r2, #16
 80005c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set nonce size field to IvLength, note that valid values are 7,8,9,10,11,12,13*/
  AESctx.mNonceSize = IvLength;
 80005c6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80005ca:	f107 0310 	add.w	r3, r7, #16
 80005ce:	611a      	str	r2, [r3, #16]

  /* Size of returned authentication TAG */
  AESctx.mTagSize = 4;
 80005d0:	f107 0310 	add.w	r3, r7, #16
 80005d4:	2204      	movs	r2, #4
 80005d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the size of the header */
  AESctx.mAssDataSize = HeaderMessageLength;
 80005d8:	f107 0308 	add.w	r3, r7, #8
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	f107 0310 	add.w	r3, r7, #16
 80005e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of thepayload */
  AESctx.mPayloadSize = PlaintextLength;
 80005e4:	463b      	mov	r3, r7
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	f107 0310 	add.w	r3, r7, #16
 80005ec:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the pointer to the TAG to be checked */
  AESctx.pmTag = Plaintext + PlaintextLength;
 80005ee:	1d3a      	adds	r2, r7, #4
 80005f0:	463b      	mov	r3, r7
 80005f2:	6812      	ldr	r2, [r2, #0]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	441a      	add	r2, r3
 80005f8:	f107 0310 	add.w	r3, r7, #16
 80005fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Size of returned authentication TAG */
  AESctx.mTagSize = AuthenticationTAGLength;
 80005fe:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8000602:	f107 0310 	add.w	r3, r7, #16
 8000606:	63da      	str	r2, [r3, #60]	; 0x3c


  /* Initialize the operation, by passing the key and IV */
  error_status = AES_CCM_Decrypt_Init(&AESctx, AES128_Key, InitializationVector );
 8000608:	f107 0310 	add.w	r3, r7, #16
 800060c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000610:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000614:	4618      	mov	r0, r3
 8000616:	f002 fbf1 	bl	8002dfc <AES_CCM_Decrypt_Init>
 800061a:	4603      	mov	r3, r0
 800061c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

  /* check for initialization errors */
  if (error_status == AES_SUCCESS)
 8000620:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000624:	2b00      	cmp	r3, #0
 8000626:	d12f      	bne.n	8000688 <STM32_AES_CCM_Decrypt+0xf2>
  {
    /* Process Header */
    error_status = AES_CCM_Header_Append(&AESctx,
 8000628:	f107 0308 	add.w	r3, r7, #8
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	f107 030c 	add.w	r3, r7, #12
 8000632:	f107 0010 	add.w	r0, r7, #16
 8000636:	6819      	ldr	r1, [r3, #0]
 8000638:	f001 fe6e 	bl	8002318 <AES_CCM_Header_Append>
 800063c:	4603      	mov	r3, r0
 800063e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
                                         HeaderMessage,
                                         HeaderMessageLength);
    if (error_status == AES_SUCCESS)
 8000642:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000646:	2b00      	cmp	r3, #0
 8000648:	d11e      	bne.n	8000688 <STM32_AES_CCM_Decrypt+0xf2>
    {
      /* Decrypt Data */
      error_status = AES_CCM_Decrypt_Append(&AESctx,
 800064a:	463b      	mov	r3, r7
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	1d39      	adds	r1, r7, #4
 8000650:	f107 0010 	add.w	r0, r7, #16
 8000654:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000658:	9300      	str	r3, [sp, #0]
 800065a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800065e:	6809      	ldr	r1, [r1, #0]
 8000660:	f002 fcba 	bl	8002fd8 <AES_CCM_Decrypt_Append>
 8000664:	4603      	mov	r3, r0
 8000666:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
                                            Plaintext,
                                            PlaintextLength,
                                            OutputMessage,
                                            OutputMessageLength);

      if (error_status == AES_SUCCESS)
 800066a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800066e:	2b00      	cmp	r3, #0
 8000670:	d10a      	bne.n	8000688 <STM32_AES_CCM_Decrypt+0xf2>
      {
        /* Do the Finalization, check the authentication TAG*/
        error_status = AES_CCM_Decrypt_Finish(&AESctx, NULL, &AuthenticationTAGLength);
 8000672:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 8000676:	f107 0310 	add.w	r3, r7, #16
 800067a:	2100      	movs	r1, #0
 800067c:	4618      	mov	r0, r3
 800067e:	f002 fe85 	bl	800338c <AES_CCM_Decrypt_Finish>
 8000682:	4603      	mov	r3, r0
 8000684:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
      }
    }
  }

  return error_status;
 8000688:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
}
 800068c:	4618      	mov	r0, r3
 800068e:	f507 77b2 	add.w	r7, r7, #356	; 0x164
 8000692:	46bd      	mov	sp, r7
 8000694:	bd90      	pop	{r4, r7, pc}

08000696 <Buffercmp>:
  * @retval PASSED: pBuffer identical to pBuffer1
  *         FAILED: pBuffer differs from pBuffer1
  */

TestStatus Buffercmp(const uint8_t* pBuffer, uint8_t* pBuffer1, uint16_t BufferLength)
{
 8000696:	b480      	push	{r7}
 8000698:	b085      	sub	sp, #20
 800069a:	af00      	add	r7, sp, #0
 800069c:	60f8      	str	r0, [r7, #12]
 800069e:	60b9      	str	r1, [r7, #8]
 80006a0:	4613      	mov	r3, r2
 80006a2:	80fb      	strh	r3, [r7, #6]
  while (BufferLength--)
 80006a4:	e00d      	b.n	80006c2 <Buffercmp+0x2c>
  {
    if (*pBuffer != *pBuffer1)
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	781a      	ldrb	r2, [r3, #0]
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	429a      	cmp	r2, r3
 80006b0:	d001      	beq.n	80006b6 <Buffercmp+0x20>
    {
      return FAILED;
 80006b2:	2300      	movs	r3, #0
 80006b4:	e00b      	b.n	80006ce <Buffercmp+0x38>
    }

    pBuffer++;
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	3301      	adds	r3, #1
 80006ba:	60fb      	str	r3, [r7, #12]
    pBuffer1++;
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	3301      	adds	r3, #1
 80006c0:	60bb      	str	r3, [r7, #8]
  while (BufferLength--)
 80006c2:	88fb      	ldrh	r3, [r7, #6]
 80006c4:	1e5a      	subs	r2, r3, #1
 80006c6:	80fa      	strh	r2, [r7, #6]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d1ec      	bne.n	80006a6 <Buffercmp+0x10>
  }

  return PASSED;
 80006cc:	2301      	movs	r3, #1
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3714      	adds	r7, #20
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bc80      	pop	{r7}
 80006d6:	4770      	bx	lr

080006d8 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	80fb      	strh	r3, [r7, #6]
	// Была нажата кнопка, поэтому запускаем обработчик прерываний

	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 80006e2:	2201      	movs	r2, #1
 80006e4:	2101      	movs	r1, #1
 80006e6:	4803      	ldr	r0, [pc, #12]	; (80006f4 <HAL_GPIO_EXTI_Callback+0x1c>)
 80006e8:	f000 fc00 	bl	8000eec <HAL_GPIO_WritePin>
}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40010800 	.word	0x40010800

080006f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006fc:	b672      	cpsid	i
}
 80006fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000700:	e7fe      	b.n	8000700 <Error_Handler+0x8>
	...

08000704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800070a:	4b15      	ldr	r3, [pc, #84]	; (8000760 <HAL_MspInit+0x5c>)
 800070c:	699b      	ldr	r3, [r3, #24]
 800070e:	4a14      	ldr	r2, [pc, #80]	; (8000760 <HAL_MspInit+0x5c>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6193      	str	r3, [r2, #24]
 8000716:	4b12      	ldr	r3, [pc, #72]	; (8000760 <HAL_MspInit+0x5c>)
 8000718:	699b      	ldr	r3, [r3, #24]
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <HAL_MspInit+0x5c>)
 8000724:	69db      	ldr	r3, [r3, #28]
 8000726:	4a0e      	ldr	r2, [pc, #56]	; (8000760 <HAL_MspInit+0x5c>)
 8000728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072c:	61d3      	str	r3, [r2, #28]
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <HAL_MspInit+0x5c>)
 8000730:	69db      	ldr	r3, [r3, #28]
 8000732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800073a:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <HAL_MspInit+0x60>)
 800073c:	685b      	ldr	r3, [r3, #4]
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	4a04      	ldr	r2, [pc, #16]	; (8000764 <HAL_MspInit+0x60>)
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000756:	bf00      	nop
 8000758:	3714      	adds	r7, #20
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr
 8000760:	40021000 	.word	0x40021000
 8000764:	40010000 	.word	0x40010000

08000768 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a09      	ldr	r2, [pc, #36]	; (800079c <HAL_CRC_MspInit+0x34>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d10b      	bne.n	8000792 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800077a:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <HAL_CRC_MspInit+0x38>)
 800077c:	695b      	ldr	r3, [r3, #20]
 800077e:	4a08      	ldr	r2, [pc, #32]	; (80007a0 <HAL_CRC_MspInit+0x38>)
 8000780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000784:	6153      	str	r3, [r2, #20]
 8000786:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <HAL_CRC_MspInit+0x38>)
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000792:	bf00      	nop
 8000794:	3714      	adds	r7, #20
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr
 800079c:	40023000 	.word	0x40023000
 80007a0:	40021000 	.word	0x40021000

080007a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a09      	ldr	r2, [pc, #36]	; (80007d8 <HAL_TIM_Base_MspInit+0x34>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d10b      	bne.n	80007ce <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <HAL_TIM_Base_MspInit+0x38>)
 80007b8:	699b      	ldr	r3, [r3, #24]
 80007ba:	4a08      	ldr	r2, [pc, #32]	; (80007dc <HAL_TIM_Base_MspInit+0x38>)
 80007bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007c0:	6193      	str	r3, [r2, #24]
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <HAL_TIM_Base_MspInit+0x38>)
 80007c4:	699b      	ldr	r3, [r3, #24]
 80007c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80007ce:	bf00      	nop
 80007d0:	3714      	adds	r7, #20
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr
 80007d8:	40012c00 	.word	0x40012c00
 80007dc:	40021000 	.word	0x40021000

080007e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <NMI_Handler+0x4>

080007e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ea:	e7fe      	b.n	80007ea <HardFault_Handler+0x4>

080007ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <MemManage_Handler+0x4>

080007f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007f6:	e7fe      	b.n	80007f6 <BusFault_Handler+0x4>

080007f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007fc:	e7fe      	b.n	80007fc <UsageFault_Handler+0x4>

080007fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000802:	bf00      	nop
 8000804:	46bd      	mov	sp, r7
 8000806:	bc80      	pop	{r7}
 8000808:	4770      	bx	lr

0800080a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr

08000816 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	46bd      	mov	sp, r7
 800081e:	bc80      	pop	{r7}
 8000820:	4770      	bx	lr

08000822 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000826:	f000 f87b 	bl	8000920 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}

0800082e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800082e:	b580      	push	{r7, lr}
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000832:	2002      	movs	r0, #2
 8000834:	f000 fb72 	bl	8000f1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}

0800083c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr

08000848 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000848:	480c      	ldr	r0, [pc, #48]	; (800087c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800084a:	490d      	ldr	r1, [pc, #52]	; (8000880 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800084c:	4a0d      	ldr	r2, [pc, #52]	; (8000884 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800084e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000850:	e002      	b.n	8000858 <LoopCopyDataInit>

08000852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000856:	3304      	adds	r3, #4

08000858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800085a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800085c:	d3f9      	bcc.n	8000852 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800085e:	4a0a      	ldr	r2, [pc, #40]	; (8000888 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000860:	4c0a      	ldr	r4, [pc, #40]	; (800088c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000864:	e001      	b.n	800086a <LoopFillZerobss>

08000866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000868:	3204      	adds	r2, #4

0800086a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800086a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800086c:	d3fb      	bcc.n	8000866 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800086e:	f7ff ffe5 	bl	800083c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000872:	f002 fe51 	bl	8003518 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000876:	f7ff fc69 	bl	800014c <main>
  bx lr
 800087a:	4770      	bx	lr
  ldr r0, =_sdata
 800087c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000880:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000884:	08003b08 	.word	0x08003b08
  ldr r2, =_sbss
 8000888:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 800088c:	2000016c 	.word	0x2000016c

08000890 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000890:	e7fe      	b.n	8000890 <ADC1_2_IRQHandler>
	...

08000894 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000898:	4b08      	ldr	r3, [pc, #32]	; (80008bc <HAL_Init+0x28>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a07      	ldr	r2, [pc, #28]	; (80008bc <HAL_Init+0x28>)
 800089e:	f043 0310 	orr.w	r3, r3, #16
 80008a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a4:	2003      	movs	r0, #3
 80008a6:	f000 f93f 	bl	8000b28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008aa:	200f      	movs	r0, #15
 80008ac:	f000 f808 	bl	80008c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008b0:	f7ff ff28 	bl	8000704 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008b4:	2300      	movs	r3, #0
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40022000 	.word	0x40022000

080008c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <HAL_InitTick+0x54>)
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <HAL_InitTick+0x58>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	4619      	mov	r1, r3
 80008d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008da:	fbb2 f3f3 	udiv	r3, r2, r3
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 f957 	bl	8000b92 <HAL_SYSTICK_Config>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ea:	2301      	movs	r3, #1
 80008ec:	e00e      	b.n	800090c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2b0f      	cmp	r3, #15
 80008f2:	d80a      	bhi.n	800090a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008f4:	2200      	movs	r2, #0
 80008f6:	6879      	ldr	r1, [r7, #4]
 80008f8:	f04f 30ff 	mov.w	r0, #4294967295
 80008fc:	f000 f91f 	bl	8000b3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000900:	4a06      	ldr	r2, [pc, #24]	; (800091c <HAL_InitTick+0x5c>)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000906:	2300      	movs	r3, #0
 8000908:	e000      	b.n	800090c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800090a:	2301      	movs	r3, #1
}
 800090c:	4618      	mov	r0, r3
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000020 	.word	0x20000020
 8000918:	20000028 	.word	0x20000028
 800091c:	20000024 	.word	0x20000024

08000920 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000924:	4b05      	ldr	r3, [pc, #20]	; (800093c <HAL_IncTick+0x1c>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	461a      	mov	r2, r3
 800092a:	4b05      	ldr	r3, [pc, #20]	; (8000940 <HAL_IncTick+0x20>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4413      	add	r3, r2
 8000930:	4a03      	ldr	r2, [pc, #12]	; (8000940 <HAL_IncTick+0x20>)
 8000932:	6013      	str	r3, [r2, #0]
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr
 800093c:	20000028 	.word	0x20000028
 8000940:	20000168 	.word	0x20000168

08000944 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  return uwTick;
 8000948:	4b02      	ldr	r3, [pc, #8]	; (8000954 <HAL_GetTick+0x10>)
 800094a:	681b      	ldr	r3, [r3, #0]
}
 800094c:	4618      	mov	r0, r3
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr
 8000954:	20000168 	.word	0x20000168

08000958 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800095c:	4b04      	ldr	r3, [pc, #16]	; (8000970 <HAL_SuspendTick+0x18>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a03      	ldr	r2, [pc, #12]	; (8000970 <HAL_SuspendTick+0x18>)
 8000962:	f023 0302 	bic.w	r3, r3, #2
 8000966:	6013      	str	r3, [r2, #0]
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr
 8000970:	e000e010 	.word	0xe000e010

08000974 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000978:	4b04      	ldr	r3, [pc, #16]	; (800098c <HAL_ResumeTick+0x18>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a03      	ldr	r2, [pc, #12]	; (800098c <HAL_ResumeTick+0x18>)
 800097e:	f043 0302 	orr.w	r3, r3, #2
 8000982:	6013      	str	r3, [r2, #0]
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr
 800098c:	e000e010 	.word	0xe000e010

08000990 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f003 0307 	and.w	r3, r3, #7
 800099e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009a0:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <__NVIC_SetPriorityGrouping+0x44>)
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009a6:	68ba      	ldr	r2, [r7, #8]
 80009a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009ac:	4013      	ands	r3, r2
 80009ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009c2:	4a04      	ldr	r2, [pc, #16]	; (80009d4 <__NVIC_SetPriorityGrouping+0x44>)
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	60d3      	str	r3, [r2, #12]
}
 80009c8:	bf00      	nop
 80009ca:	3714      	adds	r7, #20
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc80      	pop	{r7}
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009dc:	4b04      	ldr	r3, [pc, #16]	; (80009f0 <__NVIC_GetPriorityGrouping+0x18>)
 80009de:	68db      	ldr	r3, [r3, #12]
 80009e0:	0a1b      	lsrs	r3, r3, #8
 80009e2:	f003 0307 	and.w	r3, r3, #7
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	db0b      	blt.n	8000a1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	f003 021f 	and.w	r2, r3, #31
 8000a0c:	4906      	ldr	r1, [pc, #24]	; (8000a28 <__NVIC_EnableIRQ+0x34>)
 8000a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a12:	095b      	lsrs	r3, r3, #5
 8000a14:	2001      	movs	r0, #1
 8000a16:	fa00 f202 	lsl.w	r2, r0, r2
 8000a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr
 8000a28:	e000e100 	.word	0xe000e100

08000a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	6039      	str	r1, [r7, #0]
 8000a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	db0a      	blt.n	8000a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	490c      	ldr	r1, [pc, #48]	; (8000a78 <__NVIC_SetPriority+0x4c>)
 8000a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4a:	0112      	lsls	r2, r2, #4
 8000a4c:	b2d2      	uxtb	r2, r2
 8000a4e:	440b      	add	r3, r1
 8000a50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a54:	e00a      	b.n	8000a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	4908      	ldr	r1, [pc, #32]	; (8000a7c <__NVIC_SetPriority+0x50>)
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	f003 030f 	and.w	r3, r3, #15
 8000a62:	3b04      	subs	r3, #4
 8000a64:	0112      	lsls	r2, r2, #4
 8000a66:	b2d2      	uxtb	r2, r2
 8000a68:	440b      	add	r3, r1
 8000a6a:	761a      	strb	r2, [r3, #24]
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	e000e100 	.word	0xe000e100
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b089      	sub	sp, #36	; 0x24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	f1c3 0307 	rsb	r3, r3, #7
 8000a9a:	2b04      	cmp	r3, #4
 8000a9c:	bf28      	it	cs
 8000a9e:	2304      	movcs	r3, #4
 8000aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	3304      	adds	r3, #4
 8000aa6:	2b06      	cmp	r3, #6
 8000aa8:	d902      	bls.n	8000ab0 <NVIC_EncodePriority+0x30>
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	3b03      	subs	r3, #3
 8000aae:	e000      	b.n	8000ab2 <NVIC_EncodePriority+0x32>
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	43da      	mvns	r2, r3
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	401a      	ands	r2, r3
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad2:	43d9      	mvns	r1, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad8:	4313      	orrs	r3, r2
         );
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3724      	adds	r7, #36	; 0x24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr

08000ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	3b01      	subs	r3, #1
 8000af0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000af4:	d301      	bcc.n	8000afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000af6:	2301      	movs	r3, #1
 8000af8:	e00f      	b.n	8000b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000afa:	4a0a      	ldr	r2, [pc, #40]	; (8000b24 <SysTick_Config+0x40>)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	3b01      	subs	r3, #1
 8000b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b02:	210f      	movs	r1, #15
 8000b04:	f04f 30ff 	mov.w	r0, #4294967295
 8000b08:	f7ff ff90 	bl	8000a2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b0c:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <SysTick_Config+0x40>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b12:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <SysTick_Config+0x40>)
 8000b14:	2207      	movs	r2, #7
 8000b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	e000e010 	.word	0xe000e010

08000b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f7ff ff2d 	bl	8000990 <__NVIC_SetPriorityGrouping>
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b086      	sub	sp, #24
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	4603      	mov	r3, r0
 8000b46:	60b9      	str	r1, [r7, #8]
 8000b48:	607a      	str	r2, [r7, #4]
 8000b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b50:	f7ff ff42 	bl	80009d8 <__NVIC_GetPriorityGrouping>
 8000b54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	68b9      	ldr	r1, [r7, #8]
 8000b5a:	6978      	ldr	r0, [r7, #20]
 8000b5c:	f7ff ff90 	bl	8000a80 <NVIC_EncodePriority>
 8000b60:	4602      	mov	r2, r0
 8000b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b66:	4611      	mov	r1, r2
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff ff5f 	bl	8000a2c <__NVIC_SetPriority>
}
 8000b6e:	bf00      	nop
 8000b70:	3718      	adds	r7, #24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff ff35 	bl	80009f4 <__NVIC_EnableIRQ>
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b082      	sub	sp, #8
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff ffa2 	bl	8000ae4 <SysTick_Config>
 8000ba0:	4603      	mov	r3, r0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b082      	sub	sp, #8
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d101      	bne.n	8000bbc <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	e00e      	b.n	8000bda <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	795b      	ldrb	r3, [r3, #5]
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d105      	bne.n	8000bd2 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f7ff fdcb 	bl	8000768 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b08b      	sub	sp, #44	; 0x2c
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bf6:	e169      	b.n	8000ecc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000c00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	69fa      	ldr	r2, [r7, #28]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c0c:	69ba      	ldr	r2, [r7, #24]
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	f040 8158 	bne.w	8000ec6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	4a9a      	ldr	r2, [pc, #616]	; (8000e84 <HAL_GPIO_Init+0x2a0>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d05e      	beq.n	8000cde <HAL_GPIO_Init+0xfa>
 8000c20:	4a98      	ldr	r2, [pc, #608]	; (8000e84 <HAL_GPIO_Init+0x2a0>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d875      	bhi.n	8000d12 <HAL_GPIO_Init+0x12e>
 8000c26:	4a98      	ldr	r2, [pc, #608]	; (8000e88 <HAL_GPIO_Init+0x2a4>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d058      	beq.n	8000cde <HAL_GPIO_Init+0xfa>
 8000c2c:	4a96      	ldr	r2, [pc, #600]	; (8000e88 <HAL_GPIO_Init+0x2a4>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d86f      	bhi.n	8000d12 <HAL_GPIO_Init+0x12e>
 8000c32:	4a96      	ldr	r2, [pc, #600]	; (8000e8c <HAL_GPIO_Init+0x2a8>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d052      	beq.n	8000cde <HAL_GPIO_Init+0xfa>
 8000c38:	4a94      	ldr	r2, [pc, #592]	; (8000e8c <HAL_GPIO_Init+0x2a8>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d869      	bhi.n	8000d12 <HAL_GPIO_Init+0x12e>
 8000c3e:	4a94      	ldr	r2, [pc, #592]	; (8000e90 <HAL_GPIO_Init+0x2ac>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d04c      	beq.n	8000cde <HAL_GPIO_Init+0xfa>
 8000c44:	4a92      	ldr	r2, [pc, #584]	; (8000e90 <HAL_GPIO_Init+0x2ac>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d863      	bhi.n	8000d12 <HAL_GPIO_Init+0x12e>
 8000c4a:	4a92      	ldr	r2, [pc, #584]	; (8000e94 <HAL_GPIO_Init+0x2b0>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d046      	beq.n	8000cde <HAL_GPIO_Init+0xfa>
 8000c50:	4a90      	ldr	r2, [pc, #576]	; (8000e94 <HAL_GPIO_Init+0x2b0>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d85d      	bhi.n	8000d12 <HAL_GPIO_Init+0x12e>
 8000c56:	2b12      	cmp	r3, #18
 8000c58:	d82a      	bhi.n	8000cb0 <HAL_GPIO_Init+0xcc>
 8000c5a:	2b12      	cmp	r3, #18
 8000c5c:	d859      	bhi.n	8000d12 <HAL_GPIO_Init+0x12e>
 8000c5e:	a201      	add	r2, pc, #4	; (adr r2, 8000c64 <HAL_GPIO_Init+0x80>)
 8000c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c64:	08000cdf 	.word	0x08000cdf
 8000c68:	08000cb9 	.word	0x08000cb9
 8000c6c:	08000ccb 	.word	0x08000ccb
 8000c70:	08000d0d 	.word	0x08000d0d
 8000c74:	08000d13 	.word	0x08000d13
 8000c78:	08000d13 	.word	0x08000d13
 8000c7c:	08000d13 	.word	0x08000d13
 8000c80:	08000d13 	.word	0x08000d13
 8000c84:	08000d13 	.word	0x08000d13
 8000c88:	08000d13 	.word	0x08000d13
 8000c8c:	08000d13 	.word	0x08000d13
 8000c90:	08000d13 	.word	0x08000d13
 8000c94:	08000d13 	.word	0x08000d13
 8000c98:	08000d13 	.word	0x08000d13
 8000c9c:	08000d13 	.word	0x08000d13
 8000ca0:	08000d13 	.word	0x08000d13
 8000ca4:	08000d13 	.word	0x08000d13
 8000ca8:	08000cc1 	.word	0x08000cc1
 8000cac:	08000cd5 	.word	0x08000cd5
 8000cb0:	4a79      	ldr	r2, [pc, #484]	; (8000e98 <HAL_GPIO_Init+0x2b4>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d013      	beq.n	8000cde <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cb6:	e02c      	b.n	8000d12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	623b      	str	r3, [r7, #32]
          break;
 8000cbe:	e029      	b.n	8000d14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	3304      	adds	r3, #4
 8000cc6:	623b      	str	r3, [r7, #32]
          break;
 8000cc8:	e024      	b.n	8000d14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	68db      	ldr	r3, [r3, #12]
 8000cce:	3308      	adds	r3, #8
 8000cd0:	623b      	str	r3, [r7, #32]
          break;
 8000cd2:	e01f      	b.n	8000d14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	330c      	adds	r3, #12
 8000cda:	623b      	str	r3, [r7, #32]
          break;
 8000cdc:	e01a      	b.n	8000d14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d102      	bne.n	8000cec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ce6:	2304      	movs	r3, #4
 8000ce8:	623b      	str	r3, [r7, #32]
          break;
 8000cea:	e013      	b.n	8000d14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d105      	bne.n	8000d00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cf4:	2308      	movs	r3, #8
 8000cf6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	69fa      	ldr	r2, [r7, #28]
 8000cfc:	611a      	str	r2, [r3, #16]
          break;
 8000cfe:	e009      	b.n	8000d14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d00:	2308      	movs	r3, #8
 8000d02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	69fa      	ldr	r2, [r7, #28]
 8000d08:	615a      	str	r2, [r3, #20]
          break;
 8000d0a:	e003      	b.n	8000d14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	623b      	str	r3, [r7, #32]
          break;
 8000d10:	e000      	b.n	8000d14 <HAL_GPIO_Init+0x130>
          break;
 8000d12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	2bff      	cmp	r3, #255	; 0xff
 8000d18:	d801      	bhi.n	8000d1e <HAL_GPIO_Init+0x13a>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	e001      	b.n	8000d22 <HAL_GPIO_Init+0x13e>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	3304      	adds	r3, #4
 8000d22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	2bff      	cmp	r3, #255	; 0xff
 8000d28:	d802      	bhi.n	8000d30 <HAL_GPIO_Init+0x14c>
 8000d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	e002      	b.n	8000d36 <HAL_GPIO_Init+0x152>
 8000d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d32:	3b08      	subs	r3, #8
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	210f      	movs	r1, #15
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	fa01 f303 	lsl.w	r3, r1, r3
 8000d44:	43db      	mvns	r3, r3
 8000d46:	401a      	ands	r2, r3
 8000d48:	6a39      	ldr	r1, [r7, #32]
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d50:	431a      	orrs	r2, r3
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f000 80b1 	beq.w	8000ec6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d64:	4b4d      	ldr	r3, [pc, #308]	; (8000e9c <HAL_GPIO_Init+0x2b8>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	4a4c      	ldr	r2, [pc, #304]	; (8000e9c <HAL_GPIO_Init+0x2b8>)
 8000d6a:	f043 0301 	orr.w	r3, r3, #1
 8000d6e:	6193      	str	r3, [r2, #24]
 8000d70:	4b4a      	ldr	r3, [pc, #296]	; (8000e9c <HAL_GPIO_Init+0x2b8>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	f003 0301 	and.w	r3, r3, #1
 8000d78:	60bb      	str	r3, [r7, #8]
 8000d7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d7c:	4a48      	ldr	r2, [pc, #288]	; (8000ea0 <HAL_GPIO_Init+0x2bc>)
 8000d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d80:	089b      	lsrs	r3, r3, #2
 8000d82:	3302      	adds	r3, #2
 8000d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8c:	f003 0303 	and.w	r3, r3, #3
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	220f      	movs	r2, #15
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	68fa      	ldr	r2, [r7, #12]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a40      	ldr	r2, [pc, #256]	; (8000ea4 <HAL_GPIO_Init+0x2c0>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d013      	beq.n	8000dd0 <HAL_GPIO_Init+0x1ec>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	4a3f      	ldr	r2, [pc, #252]	; (8000ea8 <HAL_GPIO_Init+0x2c4>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d00d      	beq.n	8000dcc <HAL_GPIO_Init+0x1e8>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4a3e      	ldr	r2, [pc, #248]	; (8000eac <HAL_GPIO_Init+0x2c8>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d007      	beq.n	8000dc8 <HAL_GPIO_Init+0x1e4>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4a3d      	ldr	r2, [pc, #244]	; (8000eb0 <HAL_GPIO_Init+0x2cc>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d101      	bne.n	8000dc4 <HAL_GPIO_Init+0x1e0>
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	e006      	b.n	8000dd2 <HAL_GPIO_Init+0x1ee>
 8000dc4:	2304      	movs	r3, #4
 8000dc6:	e004      	b.n	8000dd2 <HAL_GPIO_Init+0x1ee>
 8000dc8:	2302      	movs	r3, #2
 8000dca:	e002      	b.n	8000dd2 <HAL_GPIO_Init+0x1ee>
 8000dcc:	2301      	movs	r3, #1
 8000dce:	e000      	b.n	8000dd2 <HAL_GPIO_Init+0x1ee>
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dd4:	f002 0203 	and.w	r2, r2, #3
 8000dd8:	0092      	lsls	r2, r2, #2
 8000dda:	4093      	lsls	r3, r2
 8000ddc:	68fa      	ldr	r2, [r7, #12]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000de2:	492f      	ldr	r1, [pc, #188]	; (8000ea0 <HAL_GPIO_Init+0x2bc>)
 8000de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de6:	089b      	lsrs	r3, r3, #2
 8000de8:	3302      	adds	r3, #2
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d006      	beq.n	8000e0a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000dfc:	4b2d      	ldr	r3, [pc, #180]	; (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	492c      	ldr	r1, [pc, #176]	; (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000e02:	69bb      	ldr	r3, [r7, #24]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	600b      	str	r3, [r1, #0]
 8000e08:	e006      	b.n	8000e18 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e0a:	4b2a      	ldr	r3, [pc, #168]	; (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	69bb      	ldr	r3, [r7, #24]
 8000e10:	43db      	mvns	r3, r3
 8000e12:	4928      	ldr	r1, [pc, #160]	; (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000e14:	4013      	ands	r3, r2
 8000e16:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d006      	beq.n	8000e32 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e24:	4b23      	ldr	r3, [pc, #140]	; (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000e26:	685a      	ldr	r2, [r3, #4]
 8000e28:	4922      	ldr	r1, [pc, #136]	; (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	604b      	str	r3, [r1, #4]
 8000e30:	e006      	b.n	8000e40 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e32:	4b20      	ldr	r3, [pc, #128]	; (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000e34:	685a      	ldr	r2, [r3, #4]
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	491e      	ldr	r1, [pc, #120]	; (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d006      	beq.n	8000e5a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e4c:	4b19      	ldr	r3, [pc, #100]	; (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000e4e:	689a      	ldr	r2, [r3, #8]
 8000e50:	4918      	ldr	r1, [pc, #96]	; (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	608b      	str	r3, [r1, #8]
 8000e58:	e006      	b.n	8000e68 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e5a:	4b16      	ldr	r3, [pc, #88]	; (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000e5c:	689a      	ldr	r2, [r3, #8]
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	43db      	mvns	r3, r3
 8000e62:	4914      	ldr	r1, [pc, #80]	; (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000e64:	4013      	ands	r3, r2
 8000e66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d021      	beq.n	8000eb8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e74:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000e76:	68da      	ldr	r2, [r3, #12]
 8000e78:	490e      	ldr	r1, [pc, #56]	; (8000eb4 <HAL_GPIO_Init+0x2d0>)
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	60cb      	str	r3, [r1, #12]
 8000e80:	e021      	b.n	8000ec6 <HAL_GPIO_Init+0x2e2>
 8000e82:	bf00      	nop
 8000e84:	10320000 	.word	0x10320000
 8000e88:	10310000 	.word	0x10310000
 8000e8c:	10220000 	.word	0x10220000
 8000e90:	10210000 	.word	0x10210000
 8000e94:	10120000 	.word	0x10120000
 8000e98:	10110000 	.word	0x10110000
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	40010000 	.word	0x40010000
 8000ea4:	40010800 	.word	0x40010800
 8000ea8:	40010c00 	.word	0x40010c00
 8000eac:	40011000 	.word	0x40011000
 8000eb0:	40011400 	.word	0x40011400
 8000eb4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000eb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <HAL_GPIO_Init+0x304>)
 8000eba:	68da      	ldr	r2, [r3, #12]
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	4909      	ldr	r1, [pc, #36]	; (8000ee8 <HAL_GPIO_Init+0x304>)
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec8:	3301      	adds	r3, #1
 8000eca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	f47f ae8e 	bne.w	8000bf8 <HAL_GPIO_Init+0x14>
  }
}
 8000edc:	bf00      	nop
 8000ede:	bf00      	nop
 8000ee0:	372c      	adds	r7, #44	; 0x2c
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr
 8000ee8:	40010400 	.word	0x40010400

08000eec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	807b      	strh	r3, [r7, #2]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000efc:	787b      	ldrb	r3, [r7, #1]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d003      	beq.n	8000f0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f02:	887a      	ldrh	r2, [r7, #2]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f08:	e003      	b.n	8000f12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f0a:	887b      	ldrh	r3, [r7, #2]
 8000f0c:	041a      	lsls	r2, r3, #16
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	611a      	str	r2, [r3, #16]
}
 8000f12:	bf00      	nop
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr

08000f1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000f26:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f28:	695a      	ldr	r2, [r3, #20]
 8000f2a:	88fb      	ldrh	r3, [r7, #6]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d006      	beq.n	8000f40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f32:	4a05      	ldr	r2, [pc, #20]	; (8000f48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f34:	88fb      	ldrh	r3, [r7, #6]
 8000f36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f38:	88fb      	ldrh	r3, [r7, #6]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fbcc 	bl	80006d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40010400 	.word	0x40010400

08000f4c <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	460b      	mov	r3, r1
 8000f56:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000f58:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <HAL_PWR_EnterSLEEPMode+0x34>)
 8000f5a:	691b      	ldr	r3, [r3, #16]
 8000f5c:	4a08      	ldr	r2, [pc, #32]	; (8000f80 <HAL_PWR_EnterSLEEPMode+0x34>)
 8000f5e:	f023 0304 	bic.w	r3, r3, #4
 8000f62:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8000f64:	78fb      	ldrb	r3, [r7, #3]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d101      	bne.n	8000f6e <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8000f6a:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8000f6c:	e002      	b.n	8000f74 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8000f6e:	bf40      	sev
    __WFE();
 8000f70:	bf20      	wfe
    __WFE();
 8000f72:	bf20      	wfe
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d101      	bne.n	8000f96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e26c      	b.n	8001470 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	f000 8087 	beq.w	80010b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fa4:	4b92      	ldr	r3, [pc, #584]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 030c 	and.w	r3, r3, #12
 8000fac:	2b04      	cmp	r3, #4
 8000fae:	d00c      	beq.n	8000fca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fb0:	4b8f      	ldr	r3, [pc, #572]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f003 030c 	and.w	r3, r3, #12
 8000fb8:	2b08      	cmp	r3, #8
 8000fba:	d112      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x5e>
 8000fbc:	4b8c      	ldr	r3, [pc, #560]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fc8:	d10b      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fca:	4b89      	ldr	r3, [pc, #548]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d06c      	beq.n	80010b0 <HAL_RCC_OscConfig+0x12c>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d168      	bne.n	80010b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e246      	b.n	8001470 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fea:	d106      	bne.n	8000ffa <HAL_RCC_OscConfig+0x76>
 8000fec:	4b80      	ldr	r3, [pc, #512]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a7f      	ldr	r2, [pc, #508]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 8000ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ff6:	6013      	str	r3, [r2, #0]
 8000ff8:	e02e      	b.n	8001058 <HAL_RCC_OscConfig+0xd4>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d10c      	bne.n	800101c <HAL_RCC_OscConfig+0x98>
 8001002:	4b7b      	ldr	r3, [pc, #492]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a7a      	ldr	r2, [pc, #488]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 8001008:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800100c:	6013      	str	r3, [r2, #0]
 800100e:	4b78      	ldr	r3, [pc, #480]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a77      	ldr	r2, [pc, #476]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 8001014:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001018:	6013      	str	r3, [r2, #0]
 800101a:	e01d      	b.n	8001058 <HAL_RCC_OscConfig+0xd4>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001024:	d10c      	bne.n	8001040 <HAL_RCC_OscConfig+0xbc>
 8001026:	4b72      	ldr	r3, [pc, #456]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a71      	ldr	r2, [pc, #452]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 800102c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001030:	6013      	str	r3, [r2, #0]
 8001032:	4b6f      	ldr	r3, [pc, #444]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a6e      	ldr	r2, [pc, #440]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 8001038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800103c:	6013      	str	r3, [r2, #0]
 800103e:	e00b      	b.n	8001058 <HAL_RCC_OscConfig+0xd4>
 8001040:	4b6b      	ldr	r3, [pc, #428]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a6a      	ldr	r2, [pc, #424]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 8001046:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800104a:	6013      	str	r3, [r2, #0]
 800104c:	4b68      	ldr	r3, [pc, #416]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a67      	ldr	r2, [pc, #412]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 8001052:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001056:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d013      	beq.n	8001088 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001060:	f7ff fc70 	bl	8000944 <HAL_GetTick>
 8001064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001066:	e008      	b.n	800107a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001068:	f7ff fc6c 	bl	8000944 <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	2b64      	cmp	r3, #100	; 0x64
 8001074:	d901      	bls.n	800107a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001076:	2303      	movs	r3, #3
 8001078:	e1fa      	b.n	8001470 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800107a:	4b5d      	ldr	r3, [pc, #372]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d0f0      	beq.n	8001068 <HAL_RCC_OscConfig+0xe4>
 8001086:	e014      	b.n	80010b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001088:	f7ff fc5c 	bl	8000944 <HAL_GetTick>
 800108c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800108e:	e008      	b.n	80010a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001090:	f7ff fc58 	bl	8000944 <HAL_GetTick>
 8001094:	4602      	mov	r2, r0
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	2b64      	cmp	r3, #100	; 0x64
 800109c:	d901      	bls.n	80010a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800109e:	2303      	movs	r3, #3
 80010a0:	e1e6      	b.n	8001470 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010a2:	4b53      	ldr	r3, [pc, #332]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d1f0      	bne.n	8001090 <HAL_RCC_OscConfig+0x10c>
 80010ae:	e000      	b.n	80010b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d063      	beq.n	8001186 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010be:	4b4c      	ldr	r3, [pc, #304]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f003 030c 	and.w	r3, r3, #12
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d00b      	beq.n	80010e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010ca:	4b49      	ldr	r3, [pc, #292]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f003 030c 	and.w	r3, r3, #12
 80010d2:	2b08      	cmp	r3, #8
 80010d4:	d11c      	bne.n	8001110 <HAL_RCC_OscConfig+0x18c>
 80010d6:	4b46      	ldr	r3, [pc, #280]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d116      	bne.n	8001110 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010e2:	4b43      	ldr	r3, [pc, #268]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d005      	beq.n	80010fa <HAL_RCC_OscConfig+0x176>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	691b      	ldr	r3, [r3, #16]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d001      	beq.n	80010fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e1ba      	b.n	8001470 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010fa:	4b3d      	ldr	r3, [pc, #244]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	695b      	ldr	r3, [r3, #20]
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	4939      	ldr	r1, [pc, #228]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 800110a:	4313      	orrs	r3, r2
 800110c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800110e:	e03a      	b.n	8001186 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	691b      	ldr	r3, [r3, #16]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d020      	beq.n	800115a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001118:	4b36      	ldr	r3, [pc, #216]	; (80011f4 <HAL_RCC_OscConfig+0x270>)
 800111a:	2201      	movs	r2, #1
 800111c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800111e:	f7ff fc11 	bl	8000944 <HAL_GetTick>
 8001122:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001124:	e008      	b.n	8001138 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001126:	f7ff fc0d 	bl	8000944 <HAL_GetTick>
 800112a:	4602      	mov	r2, r0
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	2b02      	cmp	r3, #2
 8001132:	d901      	bls.n	8001138 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001134:	2303      	movs	r3, #3
 8001136:	e19b      	b.n	8001470 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001138:	4b2d      	ldr	r3, [pc, #180]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 0302 	and.w	r3, r3, #2
 8001140:	2b00      	cmp	r3, #0
 8001142:	d0f0      	beq.n	8001126 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001144:	4b2a      	ldr	r3, [pc, #168]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	695b      	ldr	r3, [r3, #20]
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	4927      	ldr	r1, [pc, #156]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 8001154:	4313      	orrs	r3, r2
 8001156:	600b      	str	r3, [r1, #0]
 8001158:	e015      	b.n	8001186 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800115a:	4b26      	ldr	r3, [pc, #152]	; (80011f4 <HAL_RCC_OscConfig+0x270>)
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001160:	f7ff fbf0 	bl	8000944 <HAL_GetTick>
 8001164:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001166:	e008      	b.n	800117a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001168:	f7ff fbec 	bl	8000944 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	2b02      	cmp	r3, #2
 8001174:	d901      	bls.n	800117a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e17a      	b.n	8001470 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800117a:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	2b00      	cmp	r3, #0
 8001184:	d1f0      	bne.n	8001168 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0308 	and.w	r3, r3, #8
 800118e:	2b00      	cmp	r3, #0
 8001190:	d03a      	beq.n	8001208 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	699b      	ldr	r3, [r3, #24]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d019      	beq.n	80011ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800119a:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <HAL_RCC_OscConfig+0x274>)
 800119c:	2201      	movs	r2, #1
 800119e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011a0:	f7ff fbd0 	bl	8000944 <HAL_GetTick>
 80011a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011a6:	e008      	b.n	80011ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011a8:	f7ff fbcc 	bl	8000944 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d901      	bls.n	80011ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e15a      	b.n	8001470 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ba:	4b0d      	ldr	r3, [pc, #52]	; (80011f0 <HAL_RCC_OscConfig+0x26c>)
 80011bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d0f0      	beq.n	80011a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80011c6:	2001      	movs	r0, #1
 80011c8:	f000 faa6 	bl	8001718 <RCC_Delay>
 80011cc:	e01c      	b.n	8001208 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011ce:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <HAL_RCC_OscConfig+0x274>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011d4:	f7ff fbb6 	bl	8000944 <HAL_GetTick>
 80011d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011da:	e00f      	b.n	80011fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011dc:	f7ff fbb2 	bl	8000944 <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d908      	bls.n	80011fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e140      	b.n	8001470 <HAL_RCC_OscConfig+0x4ec>
 80011ee:	bf00      	nop
 80011f0:	40021000 	.word	0x40021000
 80011f4:	42420000 	.word	0x42420000
 80011f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011fc:	4b9e      	ldr	r3, [pc, #632]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 80011fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001200:	f003 0302 	and.w	r3, r3, #2
 8001204:	2b00      	cmp	r3, #0
 8001206:	d1e9      	bne.n	80011dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0304 	and.w	r3, r3, #4
 8001210:	2b00      	cmp	r3, #0
 8001212:	f000 80a6 	beq.w	8001362 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001216:	2300      	movs	r3, #0
 8001218:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800121a:	4b97      	ldr	r3, [pc, #604]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d10d      	bne.n	8001242 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001226:	4b94      	ldr	r3, [pc, #592]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	4a93      	ldr	r2, [pc, #588]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 800122c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001230:	61d3      	str	r3, [r2, #28]
 8001232:	4b91      	ldr	r3, [pc, #580]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800123e:	2301      	movs	r3, #1
 8001240:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001242:	4b8e      	ldr	r3, [pc, #568]	; (800147c <HAL_RCC_OscConfig+0x4f8>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800124a:	2b00      	cmp	r3, #0
 800124c:	d118      	bne.n	8001280 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800124e:	4b8b      	ldr	r3, [pc, #556]	; (800147c <HAL_RCC_OscConfig+0x4f8>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a8a      	ldr	r2, [pc, #552]	; (800147c <HAL_RCC_OscConfig+0x4f8>)
 8001254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001258:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800125a:	f7ff fb73 	bl	8000944 <HAL_GetTick>
 800125e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001260:	e008      	b.n	8001274 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001262:	f7ff fb6f 	bl	8000944 <HAL_GetTick>
 8001266:	4602      	mov	r2, r0
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	2b64      	cmp	r3, #100	; 0x64
 800126e:	d901      	bls.n	8001274 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001270:	2303      	movs	r3, #3
 8001272:	e0fd      	b.n	8001470 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001274:	4b81      	ldr	r3, [pc, #516]	; (800147c <HAL_RCC_OscConfig+0x4f8>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800127c:	2b00      	cmp	r3, #0
 800127e:	d0f0      	beq.n	8001262 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d106      	bne.n	8001296 <HAL_RCC_OscConfig+0x312>
 8001288:	4b7b      	ldr	r3, [pc, #492]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 800128a:	6a1b      	ldr	r3, [r3, #32]
 800128c:	4a7a      	ldr	r2, [pc, #488]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 800128e:	f043 0301 	orr.w	r3, r3, #1
 8001292:	6213      	str	r3, [r2, #32]
 8001294:	e02d      	b.n	80012f2 <HAL_RCC_OscConfig+0x36e>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d10c      	bne.n	80012b8 <HAL_RCC_OscConfig+0x334>
 800129e:	4b76      	ldr	r3, [pc, #472]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 80012a0:	6a1b      	ldr	r3, [r3, #32]
 80012a2:	4a75      	ldr	r2, [pc, #468]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 80012a4:	f023 0301 	bic.w	r3, r3, #1
 80012a8:	6213      	str	r3, [r2, #32]
 80012aa:	4b73      	ldr	r3, [pc, #460]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 80012ac:	6a1b      	ldr	r3, [r3, #32]
 80012ae:	4a72      	ldr	r2, [pc, #456]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 80012b0:	f023 0304 	bic.w	r3, r3, #4
 80012b4:	6213      	str	r3, [r2, #32]
 80012b6:	e01c      	b.n	80012f2 <HAL_RCC_OscConfig+0x36e>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	2b05      	cmp	r3, #5
 80012be:	d10c      	bne.n	80012da <HAL_RCC_OscConfig+0x356>
 80012c0:	4b6d      	ldr	r3, [pc, #436]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 80012c2:	6a1b      	ldr	r3, [r3, #32]
 80012c4:	4a6c      	ldr	r2, [pc, #432]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 80012c6:	f043 0304 	orr.w	r3, r3, #4
 80012ca:	6213      	str	r3, [r2, #32]
 80012cc:	4b6a      	ldr	r3, [pc, #424]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 80012ce:	6a1b      	ldr	r3, [r3, #32]
 80012d0:	4a69      	ldr	r2, [pc, #420]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	6213      	str	r3, [r2, #32]
 80012d8:	e00b      	b.n	80012f2 <HAL_RCC_OscConfig+0x36e>
 80012da:	4b67      	ldr	r3, [pc, #412]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 80012dc:	6a1b      	ldr	r3, [r3, #32]
 80012de:	4a66      	ldr	r2, [pc, #408]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 80012e0:	f023 0301 	bic.w	r3, r3, #1
 80012e4:	6213      	str	r3, [r2, #32]
 80012e6:	4b64      	ldr	r3, [pc, #400]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 80012e8:	6a1b      	ldr	r3, [r3, #32]
 80012ea:	4a63      	ldr	r2, [pc, #396]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 80012ec:	f023 0304 	bic.w	r3, r3, #4
 80012f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d015      	beq.n	8001326 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012fa:	f7ff fb23 	bl	8000944 <HAL_GetTick>
 80012fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001300:	e00a      	b.n	8001318 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001302:	f7ff fb1f 	bl	8000944 <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001310:	4293      	cmp	r3, r2
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e0ab      	b.n	8001470 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001318:	4b57      	ldr	r3, [pc, #348]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 800131a:	6a1b      	ldr	r3, [r3, #32]
 800131c:	f003 0302 	and.w	r3, r3, #2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d0ee      	beq.n	8001302 <HAL_RCC_OscConfig+0x37e>
 8001324:	e014      	b.n	8001350 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001326:	f7ff fb0d 	bl	8000944 <HAL_GetTick>
 800132a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800132c:	e00a      	b.n	8001344 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800132e:	f7ff fb09 	bl	8000944 <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	f241 3288 	movw	r2, #5000	; 0x1388
 800133c:	4293      	cmp	r3, r2
 800133e:	d901      	bls.n	8001344 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e095      	b.n	8001470 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001344:	4b4c      	ldr	r3, [pc, #304]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 8001346:	6a1b      	ldr	r3, [r3, #32]
 8001348:	f003 0302 	and.w	r3, r3, #2
 800134c:	2b00      	cmp	r3, #0
 800134e:	d1ee      	bne.n	800132e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001350:	7dfb      	ldrb	r3, [r7, #23]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d105      	bne.n	8001362 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001356:	4b48      	ldr	r3, [pc, #288]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 8001358:	69db      	ldr	r3, [r3, #28]
 800135a:	4a47      	ldr	r2, [pc, #284]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 800135c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001360:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	2b00      	cmp	r3, #0
 8001368:	f000 8081 	beq.w	800146e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800136c:	4b42      	ldr	r3, [pc, #264]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 030c 	and.w	r3, r3, #12
 8001374:	2b08      	cmp	r3, #8
 8001376:	d061      	beq.n	800143c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	69db      	ldr	r3, [r3, #28]
 800137c:	2b02      	cmp	r3, #2
 800137e:	d146      	bne.n	800140e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001380:	4b3f      	ldr	r3, [pc, #252]	; (8001480 <HAL_RCC_OscConfig+0x4fc>)
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001386:	f7ff fadd 	bl	8000944 <HAL_GetTick>
 800138a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800138c:	e008      	b.n	80013a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800138e:	f7ff fad9 	bl	8000944 <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e067      	b.n	8001470 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013a0:	4b35      	ldr	r3, [pc, #212]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1f0      	bne.n	800138e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a1b      	ldr	r3, [r3, #32]
 80013b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013b4:	d108      	bne.n	80013c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013b6:	4b30      	ldr	r3, [pc, #192]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	492d      	ldr	r1, [pc, #180]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 80013c4:	4313      	orrs	r3, r2
 80013c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013c8:	4b2b      	ldr	r3, [pc, #172]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a19      	ldr	r1, [r3, #32]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d8:	430b      	orrs	r3, r1
 80013da:	4927      	ldr	r1, [pc, #156]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 80013dc:	4313      	orrs	r3, r2
 80013de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013e0:	4b27      	ldr	r3, [pc, #156]	; (8001480 <HAL_RCC_OscConfig+0x4fc>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e6:	f7ff faad 	bl	8000944 <HAL_GetTick>
 80013ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013ec:	e008      	b.n	8001400 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ee:	f7ff faa9 	bl	8000944 <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d901      	bls.n	8001400 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e037      	b.n	8001470 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001400:	4b1d      	ldr	r3, [pc, #116]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d0f0      	beq.n	80013ee <HAL_RCC_OscConfig+0x46a>
 800140c:	e02f      	b.n	800146e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800140e:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <HAL_RCC_OscConfig+0x4fc>)
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001414:	f7ff fa96 	bl	8000944 <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800141c:	f7ff fa92 	bl	8000944 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e020      	b.n	8001470 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800142e:	4b12      	ldr	r3, [pc, #72]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1f0      	bne.n	800141c <HAL_RCC_OscConfig+0x498>
 800143a:	e018      	b.n	800146e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	69db      	ldr	r3, [r3, #28]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d101      	bne.n	8001448 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e013      	b.n	8001470 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001448:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <HAL_RCC_OscConfig+0x4f4>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a1b      	ldr	r3, [r3, #32]
 8001458:	429a      	cmp	r2, r3
 800145a:	d106      	bne.n	800146a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001466:	429a      	cmp	r2, r3
 8001468:	d001      	beq.n	800146e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e000      	b.n	8001470 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800146e:	2300      	movs	r3, #0
}
 8001470:	4618      	mov	r0, r3
 8001472:	3718      	adds	r7, #24
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40021000 	.word	0x40021000
 800147c:	40007000 	.word	0x40007000
 8001480:	42420060 	.word	0x42420060

08001484 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d101      	bne.n	8001498 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e0d0      	b.n	800163a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001498:	4b6a      	ldr	r3, [pc, #424]	; (8001644 <HAL_RCC_ClockConfig+0x1c0>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0307 	and.w	r3, r3, #7
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d910      	bls.n	80014c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014a6:	4b67      	ldr	r3, [pc, #412]	; (8001644 <HAL_RCC_ClockConfig+0x1c0>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f023 0207 	bic.w	r2, r3, #7
 80014ae:	4965      	ldr	r1, [pc, #404]	; (8001644 <HAL_RCC_ClockConfig+0x1c0>)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014b6:	4b63      	ldr	r3, [pc, #396]	; (8001644 <HAL_RCC_ClockConfig+0x1c0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d001      	beq.n	80014c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e0b8      	b.n	800163a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0302 	and.w	r3, r3, #2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d020      	beq.n	8001516 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0304 	and.w	r3, r3, #4
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d005      	beq.n	80014ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014e0:	4b59      	ldr	r3, [pc, #356]	; (8001648 <HAL_RCC_ClockConfig+0x1c4>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	4a58      	ldr	r2, [pc, #352]	; (8001648 <HAL_RCC_ClockConfig+0x1c4>)
 80014e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80014ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0308 	and.w	r3, r3, #8
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d005      	beq.n	8001504 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014f8:	4b53      	ldr	r3, [pc, #332]	; (8001648 <HAL_RCC_ClockConfig+0x1c4>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	4a52      	ldr	r2, [pc, #328]	; (8001648 <HAL_RCC_ClockConfig+0x1c4>)
 80014fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001502:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001504:	4b50      	ldr	r3, [pc, #320]	; (8001648 <HAL_RCC_ClockConfig+0x1c4>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	494d      	ldr	r1, [pc, #308]	; (8001648 <HAL_RCC_ClockConfig+0x1c4>)
 8001512:	4313      	orrs	r3, r2
 8001514:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	2b00      	cmp	r3, #0
 8001520:	d040      	beq.n	80015a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d107      	bne.n	800153a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800152a:	4b47      	ldr	r3, [pc, #284]	; (8001648 <HAL_RCC_ClockConfig+0x1c4>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d115      	bne.n	8001562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e07f      	b.n	800163a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	2b02      	cmp	r3, #2
 8001540:	d107      	bne.n	8001552 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001542:	4b41      	ldr	r3, [pc, #260]	; (8001648 <HAL_RCC_ClockConfig+0x1c4>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d109      	bne.n	8001562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e073      	b.n	800163a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001552:	4b3d      	ldr	r3, [pc, #244]	; (8001648 <HAL_RCC_ClockConfig+0x1c4>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d101      	bne.n	8001562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e06b      	b.n	800163a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001562:	4b39      	ldr	r3, [pc, #228]	; (8001648 <HAL_RCC_ClockConfig+0x1c4>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f023 0203 	bic.w	r2, r3, #3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	4936      	ldr	r1, [pc, #216]	; (8001648 <HAL_RCC_ClockConfig+0x1c4>)
 8001570:	4313      	orrs	r3, r2
 8001572:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001574:	f7ff f9e6 	bl	8000944 <HAL_GetTick>
 8001578:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800157a:	e00a      	b.n	8001592 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800157c:	f7ff f9e2 	bl	8000944 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	f241 3288 	movw	r2, #5000	; 0x1388
 800158a:	4293      	cmp	r3, r2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e053      	b.n	800163a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001592:	4b2d      	ldr	r3, [pc, #180]	; (8001648 <HAL_RCC_ClockConfig+0x1c4>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f003 020c 	and.w	r2, r3, #12
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d1eb      	bne.n	800157c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015a4:	4b27      	ldr	r3, [pc, #156]	; (8001644 <HAL_RCC_ClockConfig+0x1c0>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0307 	and.w	r3, r3, #7
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d210      	bcs.n	80015d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015b2:	4b24      	ldr	r3, [pc, #144]	; (8001644 <HAL_RCC_ClockConfig+0x1c0>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f023 0207 	bic.w	r2, r3, #7
 80015ba:	4922      	ldr	r1, [pc, #136]	; (8001644 <HAL_RCC_ClockConfig+0x1c0>)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	4313      	orrs	r3, r2
 80015c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015c2:	4b20      	ldr	r3, [pc, #128]	; (8001644 <HAL_RCC_ClockConfig+0x1c0>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d001      	beq.n	80015d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e032      	b.n	800163a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0304 	and.w	r3, r3, #4
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d008      	beq.n	80015f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015e0:	4b19      	ldr	r3, [pc, #100]	; (8001648 <HAL_RCC_ClockConfig+0x1c4>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	4916      	ldr	r1, [pc, #88]	; (8001648 <HAL_RCC_ClockConfig+0x1c4>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0308 	and.w	r3, r3, #8
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d009      	beq.n	8001612 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015fe:	4b12      	ldr	r3, [pc, #72]	; (8001648 <HAL_RCC_ClockConfig+0x1c4>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	490e      	ldr	r1, [pc, #56]	; (8001648 <HAL_RCC_ClockConfig+0x1c4>)
 800160e:	4313      	orrs	r3, r2
 8001610:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001612:	f000 f821 	bl	8001658 <HAL_RCC_GetSysClockFreq>
 8001616:	4602      	mov	r2, r0
 8001618:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <HAL_RCC_ClockConfig+0x1c4>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	091b      	lsrs	r3, r3, #4
 800161e:	f003 030f 	and.w	r3, r3, #15
 8001622:	490a      	ldr	r1, [pc, #40]	; (800164c <HAL_RCC_ClockConfig+0x1c8>)
 8001624:	5ccb      	ldrb	r3, [r1, r3]
 8001626:	fa22 f303 	lsr.w	r3, r2, r3
 800162a:	4a09      	ldr	r2, [pc, #36]	; (8001650 <HAL_RCC_ClockConfig+0x1cc>)
 800162c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800162e:	4b09      	ldr	r3, [pc, #36]	; (8001654 <HAL_RCC_ClockConfig+0x1d0>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff f944 	bl	80008c0 <HAL_InitTick>

  return HAL_OK;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40022000 	.word	0x40022000
 8001648:	40021000 	.word	0x40021000
 800164c:	080035c8 	.word	0x080035c8
 8001650:	20000020 	.word	0x20000020
 8001654:	20000024 	.word	0x20000024

08001658 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001658:	b490      	push	{r4, r7}
 800165a:	b08a      	sub	sp, #40	; 0x28
 800165c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800165e:	4b2a      	ldr	r3, [pc, #168]	; (8001708 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001660:	1d3c      	adds	r4, r7, #4
 8001662:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001664:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001668:	f240 2301 	movw	r3, #513	; 0x201
 800166c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800166e:	2300      	movs	r3, #0
 8001670:	61fb      	str	r3, [r7, #28]
 8001672:	2300      	movs	r3, #0
 8001674:	61bb      	str	r3, [r7, #24]
 8001676:	2300      	movs	r3, #0
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800167e:	2300      	movs	r3, #0
 8001680:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001682:	4b22      	ldr	r3, [pc, #136]	; (800170c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	f003 030c 	and.w	r3, r3, #12
 800168e:	2b04      	cmp	r3, #4
 8001690:	d002      	beq.n	8001698 <HAL_RCC_GetSysClockFreq+0x40>
 8001692:	2b08      	cmp	r3, #8
 8001694:	d003      	beq.n	800169e <HAL_RCC_GetSysClockFreq+0x46>
 8001696:	e02d      	b.n	80016f4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001698:	4b1d      	ldr	r3, [pc, #116]	; (8001710 <HAL_RCC_GetSysClockFreq+0xb8>)
 800169a:	623b      	str	r3, [r7, #32]
      break;
 800169c:	e02d      	b.n	80016fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	0c9b      	lsrs	r3, r3, #18
 80016a2:	f003 030f 	and.w	r3, r3, #15
 80016a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80016aa:	4413      	add	r3, r2
 80016ac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80016b0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d013      	beq.n	80016e4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016bc:	4b13      	ldr	r3, [pc, #76]	; (800170c <HAL_RCC_GetSysClockFreq+0xb4>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	0c5b      	lsrs	r3, r3, #17
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80016ca:	4413      	add	r3, r2
 80016cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80016d0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	4a0e      	ldr	r2, [pc, #56]	; (8001710 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016d6:	fb02 f203 	mul.w	r2, r2, r3
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
 80016e2:	e004      	b.n	80016ee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	4a0b      	ldr	r2, [pc, #44]	; (8001714 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016e8:	fb02 f303 	mul.w	r3, r2, r3
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80016ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f0:	623b      	str	r3, [r7, #32]
      break;
 80016f2:	e002      	b.n	80016fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016f6:	623b      	str	r3, [r7, #32]
      break;
 80016f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016fa:	6a3b      	ldr	r3, [r7, #32]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3728      	adds	r7, #40	; 0x28
 8001700:	46bd      	mov	sp, r7
 8001702:	bc90      	pop	{r4, r7}
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	080035a4 	.word	0x080035a4
 800170c:	40021000 	.word	0x40021000
 8001710:	007a1200 	.word	0x007a1200
 8001714:	003d0900 	.word	0x003d0900

08001718 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001720:	4b0a      	ldr	r3, [pc, #40]	; (800174c <RCC_Delay+0x34>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a0a      	ldr	r2, [pc, #40]	; (8001750 <RCC_Delay+0x38>)
 8001726:	fba2 2303 	umull	r2, r3, r2, r3
 800172a:	0a5b      	lsrs	r3, r3, #9
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	fb02 f303 	mul.w	r3, r2, r3
 8001732:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001734:	bf00      	nop
  }
  while (Delay --);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	1e5a      	subs	r2, r3, #1
 800173a:	60fa      	str	r2, [r7, #12]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d1f9      	bne.n	8001734 <RCC_Delay+0x1c>
}
 8001740:	bf00      	nop
 8001742:	bf00      	nop
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr
 800174c:	20000020 	.word	0x20000020
 8001750:	10624dd3 	.word	0x10624dd3

08001754 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d101      	bne.n	8001766 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e041      	b.n	80017ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d106      	bne.n	8001780 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7ff f812 	bl	80007a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2202      	movs	r2, #2
 8001784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3304      	adds	r3, #4
 8001790:	4619      	mov	r1, r3
 8001792:	4610      	mov	r0, r2
 8001794:	f000 f8f2 	bl	800197c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2201      	movs	r2, #1
 800179c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2201      	movs	r2, #1
 80017a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2201      	movs	r2, #1
 80017b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2201      	movs	r2, #1
 80017bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2201      	movs	r2, #1
 80017cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2201      	movs	r2, #1
 80017dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2201      	movs	r2, #1
 80017e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b084      	sub	sp, #16
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
 80017fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001802:	2b01      	cmp	r3, #1
 8001804:	d101      	bne.n	800180a <HAL_TIM_ConfigClockSource+0x18>
 8001806:	2302      	movs	r3, #2
 8001808:	e0b3      	b.n	8001972 <HAL_TIM_ConfigClockSource+0x180>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2201      	movs	r2, #1
 800180e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2202      	movs	r2, #2
 8001816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001828:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001830:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001842:	d03e      	beq.n	80018c2 <HAL_TIM_ConfigClockSource+0xd0>
 8001844:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001848:	f200 8087 	bhi.w	800195a <HAL_TIM_ConfigClockSource+0x168>
 800184c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001850:	f000 8085 	beq.w	800195e <HAL_TIM_ConfigClockSource+0x16c>
 8001854:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001858:	d87f      	bhi.n	800195a <HAL_TIM_ConfigClockSource+0x168>
 800185a:	2b70      	cmp	r3, #112	; 0x70
 800185c:	d01a      	beq.n	8001894 <HAL_TIM_ConfigClockSource+0xa2>
 800185e:	2b70      	cmp	r3, #112	; 0x70
 8001860:	d87b      	bhi.n	800195a <HAL_TIM_ConfigClockSource+0x168>
 8001862:	2b60      	cmp	r3, #96	; 0x60
 8001864:	d050      	beq.n	8001908 <HAL_TIM_ConfigClockSource+0x116>
 8001866:	2b60      	cmp	r3, #96	; 0x60
 8001868:	d877      	bhi.n	800195a <HAL_TIM_ConfigClockSource+0x168>
 800186a:	2b50      	cmp	r3, #80	; 0x50
 800186c:	d03c      	beq.n	80018e8 <HAL_TIM_ConfigClockSource+0xf6>
 800186e:	2b50      	cmp	r3, #80	; 0x50
 8001870:	d873      	bhi.n	800195a <HAL_TIM_ConfigClockSource+0x168>
 8001872:	2b40      	cmp	r3, #64	; 0x40
 8001874:	d058      	beq.n	8001928 <HAL_TIM_ConfigClockSource+0x136>
 8001876:	2b40      	cmp	r3, #64	; 0x40
 8001878:	d86f      	bhi.n	800195a <HAL_TIM_ConfigClockSource+0x168>
 800187a:	2b30      	cmp	r3, #48	; 0x30
 800187c:	d064      	beq.n	8001948 <HAL_TIM_ConfigClockSource+0x156>
 800187e:	2b30      	cmp	r3, #48	; 0x30
 8001880:	d86b      	bhi.n	800195a <HAL_TIM_ConfigClockSource+0x168>
 8001882:	2b20      	cmp	r3, #32
 8001884:	d060      	beq.n	8001948 <HAL_TIM_ConfigClockSource+0x156>
 8001886:	2b20      	cmp	r3, #32
 8001888:	d867      	bhi.n	800195a <HAL_TIM_ConfigClockSource+0x168>
 800188a:	2b00      	cmp	r3, #0
 800188c:	d05c      	beq.n	8001948 <HAL_TIM_ConfigClockSource+0x156>
 800188e:	2b10      	cmp	r3, #16
 8001890:	d05a      	beq.n	8001948 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001892:	e062      	b.n	800195a <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6818      	ldr	r0, [r3, #0]
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	6899      	ldr	r1, [r3, #8]
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	f000 f943 	bl	8001b2e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80018b6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	68fa      	ldr	r2, [r7, #12]
 80018be:	609a      	str	r2, [r3, #8]
      break;
 80018c0:	e04e      	b.n	8001960 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6818      	ldr	r0, [r3, #0]
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	6899      	ldr	r1, [r3, #8]
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685a      	ldr	r2, [r3, #4]
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	f000 f92c 	bl	8001b2e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80018e4:	609a      	str	r2, [r3, #8]
      break;
 80018e6:	e03b      	b.n	8001960 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6818      	ldr	r0, [r3, #0]
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	6859      	ldr	r1, [r3, #4]
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	461a      	mov	r2, r3
 80018f6:	f000 f8a3 	bl	8001a40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2150      	movs	r1, #80	; 0x50
 8001900:	4618      	mov	r0, r3
 8001902:	f000 f8fa 	bl	8001afa <TIM_ITRx_SetConfig>
      break;
 8001906:	e02b      	b.n	8001960 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6818      	ldr	r0, [r3, #0]
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	6859      	ldr	r1, [r3, #4]
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	461a      	mov	r2, r3
 8001916:	f000 f8c1 	bl	8001a9c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2160      	movs	r1, #96	; 0x60
 8001920:	4618      	mov	r0, r3
 8001922:	f000 f8ea 	bl	8001afa <TIM_ITRx_SetConfig>
      break;
 8001926:	e01b      	b.n	8001960 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6818      	ldr	r0, [r3, #0]
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	6859      	ldr	r1, [r3, #4]
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	461a      	mov	r2, r3
 8001936:	f000 f883 	bl	8001a40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2140      	movs	r1, #64	; 0x40
 8001940:	4618      	mov	r0, r3
 8001942:	f000 f8da 	bl	8001afa <TIM_ITRx_SetConfig>
      break;
 8001946:	e00b      	b.n	8001960 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4619      	mov	r1, r3
 8001952:	4610      	mov	r0, r2
 8001954:	f000 f8d1 	bl	8001afa <TIM_ITRx_SetConfig>
        break;
 8001958:	e002      	b.n	8001960 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800195a:	bf00      	nop
 800195c:	e000      	b.n	8001960 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800195e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a29      	ldr	r2, [pc, #164]	; (8001a34 <TIM_Base_SetConfig+0xb8>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d00b      	beq.n	80019ac <TIM_Base_SetConfig+0x30>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800199a:	d007      	beq.n	80019ac <TIM_Base_SetConfig+0x30>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a26      	ldr	r2, [pc, #152]	; (8001a38 <TIM_Base_SetConfig+0xbc>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d003      	beq.n	80019ac <TIM_Base_SetConfig+0x30>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a25      	ldr	r2, [pc, #148]	; (8001a3c <TIM_Base_SetConfig+0xc0>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d108      	bne.n	80019be <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	68fa      	ldr	r2, [r7, #12]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a1c      	ldr	r2, [pc, #112]	; (8001a34 <TIM_Base_SetConfig+0xb8>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d00b      	beq.n	80019de <TIM_Base_SetConfig+0x62>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019cc:	d007      	beq.n	80019de <TIM_Base_SetConfig+0x62>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a19      	ldr	r2, [pc, #100]	; (8001a38 <TIM_Base_SetConfig+0xbc>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d003      	beq.n	80019de <TIM_Base_SetConfig+0x62>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a18      	ldr	r2, [pc, #96]	; (8001a3c <TIM_Base_SetConfig+0xc0>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d108      	bne.n	80019f0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68fa      	ldr	r2, [r7, #12]
 8001a02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a07      	ldr	r2, [pc, #28]	; (8001a34 <TIM_Base_SetConfig+0xb8>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d103      	bne.n	8001a24 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	691a      	ldr	r2, [r3, #16]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	615a      	str	r2, [r3, #20]
}
 8001a2a:	bf00      	nop
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr
 8001a34:	40012c00 	.word	0x40012c00
 8001a38:	40000400 	.word	0x40000400
 8001a3c:	40000800 	.word	0x40000800

08001a40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b087      	sub	sp, #28
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6a1b      	ldr	r3, [r3, #32]
 8001a50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6a1b      	ldr	r3, [r3, #32]
 8001a56:	f023 0201 	bic.w	r2, r3, #1
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	011b      	lsls	r3, r3, #4
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	f023 030a 	bic.w	r3, r3, #10
 8001a7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001a7e:	697a      	ldr	r2, [r7, #20]
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	621a      	str	r2, [r3, #32]
}
 8001a92:	bf00      	nop
 8001a94:	371c      	adds	r7, #28
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr

08001a9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b087      	sub	sp, #28
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	f023 0210 	bic.w	r2, r3, #16
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6a1b      	ldr	r3, [r3, #32]
 8001abe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001ac6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	031b      	lsls	r3, r3, #12
 8001acc:	697a      	ldr	r2, [r7, #20]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001ad8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	011b      	lsls	r3, r3, #4
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	621a      	str	r2, [r3, #32]
}
 8001af0:	bf00      	nop
 8001af2:	371c      	adds	r7, #28
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr

08001afa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b085      	sub	sp, #20
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
 8001b02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	f043 0307 	orr.w	r3, r3, #7
 8001b1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	68fa      	ldr	r2, [r7, #12]
 8001b22:	609a      	str	r2, [r3, #8]
}
 8001b24:	bf00      	nop
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr

08001b2e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b087      	sub	sp, #28
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	60f8      	str	r0, [r7, #12]
 8001b36:	60b9      	str	r1, [r7, #8]
 8001b38:	607a      	str	r2, [r7, #4]
 8001b3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b48:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	021a      	lsls	r2, r3, #8
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	431a      	orrs	r2, r3
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	609a      	str	r2, [r3, #8]
}
 8001b62:	bf00      	nop
 8001b64:	371c      	adds	r7, #28
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr

08001b6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d101      	bne.n	8001b84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001b80:	2302      	movs	r3, #2
 8001b82:	e046      	b.n	8001c12 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2202      	movs	r2, #2
 8001b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001baa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a16      	ldr	r2, [pc, #88]	; (8001c1c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d00e      	beq.n	8001be6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bd0:	d009      	beq.n	8001be6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a12      	ldr	r2, [pc, #72]	; (8001c20 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d004      	beq.n	8001be6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a10      	ldr	r2, [pc, #64]	; (8001c24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d10c      	bne.n	8001c00 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	68ba      	ldr	r2, [r7, #8]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68ba      	ldr	r2, [r7, #8]
 8001bfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3714      	adds	r7, #20
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr
 8001c1c:	40012c00 	.word	0x40012c00
 8001c20:	40000400 	.word	0x40000400
 8001c24:	40000800 	.word	0x40000800

08001c28 <AES_keyschedule_enc_LL>:
 8001c28:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001c2c:	1092      	asrs	r2, r2, #2
 8001c2e:	2a00      	cmp	r2, #0
 8001c30:	b082      	sub	sp, #8
 8001c32:	dd06      	ble.n	8001c42 <AES_keyschedule_enc_LL+0x1a>
 8001c34:	0095      	lsls	r5, r2, #2
 8001c36:	2300      	movs	r3, #0
 8001c38:	58c4      	ldr	r4, [r0, r3]
 8001c3a:	50cc      	str	r4, [r1, r3]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	42ab      	cmp	r3, r5
 8001c40:	d1fa      	bne.n	8001c38 <AES_keyschedule_enc_LL+0x10>
 8001c42:	2a06      	cmp	r2, #6
 8001c44:	d007      	beq.n	8001c56 <AES_keyschedule_enc_LL+0x2e>
 8001c46:	2a08      	cmp	r2, #8
 8001c48:	d06c      	beq.n	8001d24 <AES_keyschedule_enc_LL+0xfc>
 8001c4a:	2a04      	cmp	r2, #4
 8001c4c:	d03a      	beq.n	8001cc4 <AES_keyschedule_enc_LL+0x9c>
 8001c4e:	b002      	add	sp, #8
 8001c50:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001c54:	4770      	bx	lr
 8001c56:	f8df c18c 	ldr.w	ip, [pc, #396]	; 8001de4 <AES_keyschedule_enc_LL+0x1bc>
 8001c5a:	684c      	ldr	r4, [r1, #4]
 8001c5c:	688d      	ldr	r5, [r1, #8]
 8001c5e:	68c8      	ldr	r0, [r1, #12]
 8001c60:	680e      	ldr	r6, [r1, #0]
 8001c62:	4b5f      	ldr	r3, [pc, #380]	; (8001de0 <AES_keyschedule_enc_LL+0x1b8>)
 8001c64:	f101 08a8 	add.w	r8, r1, #168	; 0xa8
 8001c68:	e005      	b.n	8001c76 <AES_keyschedule_enc_LL+0x4e>
 8001c6a:	690f      	ldr	r7, [r1, #16]
 8001c6c:	3118      	adds	r1, #24
 8001c6e:	4047      	eors	r7, r0
 8001c70:	407a      	eors	r2, r7
 8001c72:	614a      	str	r2, [r1, #20]
 8001c74:	610f      	str	r7, [r1, #16]
 8001c76:	694a      	ldr	r2, [r1, #20]
 8001c78:	f85c 9f04 	ldr.w	r9, [ip, #4]!
 8001c7c:	fa5f fa82 	uxtb.w	sl, r2
 8001c80:	0e17      	lsrs	r7, r2, #24
 8001c82:	f813 a00a 	ldrb.w	sl, [r3, sl]
 8001c86:	5ddf      	ldrb	r7, [r3, r7]
 8001c88:	f3c2 4b07 	ubfx	fp, r2, #16, #8
 8001c8c:	ea47 270a 	orr.w	r7, r7, sl, lsl #8
 8001c90:	f813 b00b 	ldrb.w	fp, [r3, fp]
 8001c94:	f3c2 2a07 	ubfx	sl, r2, #8, #8
 8001c98:	f813 a00a 	ldrb.w	sl, [r3, sl]
 8001c9c:	ea47 670b 	orr.w	r7, r7, fp, lsl #24
 8001ca0:	ea47 470a 	orr.w	r7, r7, sl, lsl #16
 8001ca4:	ea86 0609 	eor.w	r6, r6, r9
 8001ca8:	407e      	eors	r6, r7
 8001caa:	4074      	eors	r4, r6
 8001cac:	4065      	eors	r5, r4
 8001cae:	4068      	eors	r0, r5
 8001cb0:	4541      	cmp	r1, r8
 8001cb2:	6248      	str	r0, [r1, #36]	; 0x24
 8001cb4:	620d      	str	r5, [r1, #32]
 8001cb6:	61cc      	str	r4, [r1, #28]
 8001cb8:	618e      	str	r6, [r1, #24]
 8001cba:	d1d6      	bne.n	8001c6a <AES_keyschedule_enc_LL+0x42>
 8001cbc:	b002      	add	sp, #8
 8001cbe:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001cc2:	4770      	bx	lr
 8001cc4:	4608      	mov	r0, r1
 8001cc6:	f850 4b90 	ldr.w	r4, [r0], #144
 8001cca:	4f46      	ldr	r7, [pc, #280]	; (8001de4 <AES_keyschedule_enc_LL+0x1bc>)
 8001ccc:	68ca      	ldr	r2, [r1, #12]
 8001cce:	684d      	ldr	r5, [r1, #4]
 8001cd0:	688e      	ldr	r6, [r1, #8]
 8001cd2:	4b43      	ldr	r3, [pc, #268]	; (8001de0 <AES_keyschedule_enc_LL+0x1b8>)
 8001cd4:	e000      	b.n	8001cd8 <AES_keyschedule_enc_LL+0xb0>
 8001cd6:	3110      	adds	r1, #16
 8001cd8:	fa5f f882 	uxtb.w	r8, r2
 8001cdc:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8001ce0:	f813 9008 	ldrb.w	r9, [r3, r8]
 8001ce4:	f813 c00c 	ldrb.w	ip, [r3, ip]
 8001ce8:	f3c2 4807 	ubfx	r8, r2, #16, #8
 8001cec:	f813 a008 	ldrb.w	sl, [r3, r8]
 8001cf0:	f3c2 2807 	ubfx	r8, r2, #8, #8
 8001cf4:	ea4c 2c09 	orr.w	ip, ip, r9, lsl #8
 8001cf8:	f813 9008 	ldrb.w	r9, [r3, r8]
 8001cfc:	f857 8f04 	ldr.w	r8, [r7, #4]!
 8001d00:	ea4c 6c0a 	orr.w	ip, ip, sl, lsl #24
 8001d04:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
 8001d08:	ea84 0408 	eor.w	r4, r4, r8
 8001d0c:	ea84 040c 	eor.w	r4, r4, ip
 8001d10:	4065      	eors	r5, r4
 8001d12:	406e      	eors	r6, r5
 8001d14:	4072      	eors	r2, r6
 8001d16:	4281      	cmp	r1, r0
 8001d18:	61ca      	str	r2, [r1, #28]
 8001d1a:	618e      	str	r6, [r1, #24]
 8001d1c:	614d      	str	r5, [r1, #20]
 8001d1e:	610c      	str	r4, [r1, #16]
 8001d20:	d1d9      	bne.n	8001cd6 <AES_keyschedule_enc_LL+0xae>
 8001d22:	e794      	b.n	8001c4e <AES_keyschedule_enc_LL+0x26>
 8001d24:	4b2e      	ldr	r3, [pc, #184]	; (8001de0 <AES_keyschedule_enc_LL+0x1b8>)
 8001d26:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8001de4 <AES_keyschedule_enc_LL+0x1bc>
 8001d2a:	f101 00c0 	add.w	r0, r1, #192	; 0xc0
 8001d2e:	68ca      	ldr	r2, [r1, #12]
 8001d30:	688d      	ldr	r5, [r1, #8]
 8001d32:	684e      	ldr	r6, [r1, #4]
 8001d34:	f8d1 c000 	ldr.w	ip, [r1]
 8001d38:	461c      	mov	r4, r3
 8001d3a:	9001      	str	r0, [sp, #4]
 8001d3c:	46c2      	mov	sl, r8
 8001d3e:	e026      	b.n	8001d8e <AES_keyschedule_enc_LL+0x166>
 8001d40:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8001d44:	b2d7      	uxtb	r7, r2
 8001d46:	f814 9008 	ldrb.w	r9, [r4, r8]
 8001d4a:	5de7      	ldrb	r7, [r4, r7]
 8001d4c:	f3c2 4807 	ubfx	r8, r2, #16, #8
 8001d50:	ea47 6709 	orr.w	r7, r7, r9, lsl #24
 8001d54:	f814 8008 	ldrb.w	r8, [r4, r8]
 8001d58:	f3c2 2907 	ubfx	r9, r2, #8, #8
 8001d5c:	f814 9009 	ldrb.w	r9, [r4, r9]
 8001d60:	ea47 4808 	orr.w	r8, r7, r8, lsl #16
 8001d64:	690f      	ldr	r7, [r1, #16]
 8001d66:	ea48 2909 	orr.w	r9, r8, r9, lsl #8
 8001d6a:	ea89 0907 	eor.w	r9, r9, r7
 8001d6e:	694f      	ldr	r7, [r1, #20]
 8001d70:	f8c1 9030 	str.w	r9, [r1, #48]	; 0x30
 8001d74:	ea89 0807 	eor.w	r8, r9, r7
 8001d78:	698f      	ldr	r7, [r1, #24]
 8001d7a:	f8c1 8034 	str.w	r8, [r1, #52]	; 0x34
 8001d7e:	ea88 0b07 	eor.w	fp, r8, r7
 8001d82:	ea8b 0000 	eor.w	r0, fp, r0
 8001d86:	63c8      	str	r0, [r1, #60]	; 0x3c
 8001d88:	f8c1 b038 	str.w	fp, [r1, #56]	; 0x38
 8001d8c:	3120      	adds	r1, #32
 8001d8e:	69c8      	ldr	r0, [r1, #28]
 8001d90:	f85a 9f04 	ldr.w	r9, [sl, #4]!
 8001d94:	fa5f f880 	uxtb.w	r8, r0
 8001d98:	0e07      	lsrs	r7, r0, #24
 8001d9a:	f813 b008 	ldrb.w	fp, [r3, r8]
 8001d9e:	5ddf      	ldrb	r7, [r3, r7]
 8001da0:	f3c0 4807 	ubfx	r8, r0, #16, #8
 8001da4:	f813 8008 	ldrb.w	r8, [r3, r8]
 8001da8:	ea47 270b 	orr.w	r7, r7, fp, lsl #8
 8001dac:	ea47 6708 	orr.w	r7, r7, r8, lsl #24
 8001db0:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8001db4:	f813 8008 	ldrb.w	r8, [r3, r8]
 8001db8:	ea8c 0c09 	eor.w	ip, ip, r9
 8001dbc:	ea47 4708 	orr.w	r7, r7, r8, lsl #16
 8001dc0:	ea8c 0c07 	eor.w	ip, ip, r7
 8001dc4:	ea8c 0606 	eor.w	r6, ip, r6
 8001dc8:	9f01      	ldr	r7, [sp, #4]
 8001dca:	4075      	eors	r5, r6
 8001dcc:	406a      	eors	r2, r5
 8001dce:	42b9      	cmp	r1, r7
 8001dd0:	62ca      	str	r2, [r1, #44]	; 0x2c
 8001dd2:	628d      	str	r5, [r1, #40]	; 0x28
 8001dd4:	624e      	str	r6, [r1, #36]	; 0x24
 8001dd6:	f8c1 c020 	str.w	ip, [r1, #32]
 8001dda:	d1b1      	bne.n	8001d40 <AES_keyschedule_enc_LL+0x118>
 8001ddc:	e737      	b.n	8001c4e <AES_keyschedule_enc_LL+0x26>
 8001dde:	bf00      	nop
 8001de0:	08003a00 	.word	0x08003a00
 8001de4:	080035d4 	.word	0x080035d4

08001de8 <AES_keyschedule_enc>:
 8001de8:	ea4f 0ca2 	mov.w	ip, r2, asr #2
 8001dec:	f1bc 0f00 	cmp.w	ip, #0
 8001df0:	b4f0      	push	{r4, r5, r6, r7}
 8001df2:	dd12      	ble.n	8001e1a <AES_keyschedule_enc+0x32>
 8001df4:	4603      	mov	r3, r0
 8001df6:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8001dfa:	1f0c      	subs	r4, r1, #4
 8001dfc:	785d      	ldrb	r5, [r3, #1]
 8001dfe:	781e      	ldrb	r6, [r3, #0]
 8001e00:	78df      	ldrb	r7, [r3, #3]
 8001e02:	042d      	lsls	r5, r5, #16
 8001e04:	ea45 6506 	orr.w	r5, r5, r6, lsl #24
 8001e08:	789e      	ldrb	r6, [r3, #2]
 8001e0a:	433d      	orrs	r5, r7
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 8001e12:	4563      	cmp	r3, ip
 8001e14:	f844 5f04 	str.w	r5, [r4, #4]!
 8001e18:	d1f0      	bne.n	8001dfc <AES_keyschedule_enc+0x14>
 8001e1a:	4608      	mov	r0, r1
 8001e1c:	bcf0      	pop	{r4, r5, r6, r7}
 8001e1e:	f7ff bf03 	b.w	8001c28 <AES_keyschedule_enc_LL>
 8001e22:	bf00      	nop

08001e24 <AES_general_SW_enc>:
 8001e24:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001e28:	4cc1      	ldr	r4, [pc, #772]	; (8002130 <AES_general_SW_enc+0x30c>)
 8001e2a:	b08a      	sub	sp, #40	; 0x28
 8001e2c:	2501      	movs	r5, #1
 8001e2e:	2600      	movs	r6, #0
 8001e30:	9609      	str	r6, [sp, #36]	; 0x24
 8001e32:	6025      	str	r5, [r4, #0]
 8001e34:	6825      	ldr	r5, [r4, #0]
 8001e36:	10db      	asrs	r3, r3, #3
 8001e38:	9509      	str	r5, [sp, #36]	; 0x24
 8001e3a:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8001e3e:	3303      	adds	r3, #3
 8001e40:	9509      	str	r5, [sp, #36]	; 0x24
 8001e42:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8001e44:	3c08      	subs	r4, #8
 8001e46:	3501      	adds	r5, #1
 8001e48:	9305      	str	r3, [sp, #20]
 8001e4a:	9107      	str	r1, [sp, #28]
 8001e4c:	f000 8150 	beq.w	80020f0 <AES_general_SW_enc+0x2cc>
 8001e50:	e890 00a0 	ldmia.w	r0, {r5, r7}
 8001e54:	6811      	ldr	r1, [r2, #0]
 8001e56:	6853      	ldr	r3, [r2, #4]
 8001e58:	404d      	eors	r5, r1
 8001e5a:	ea83 0c07 	eor.w	ip, r3, r7
 8001e5e:	46aa      	mov	sl, r5
 8001e60:	462e      	mov	r6, r5
 8001e62:	4bb4      	ldr	r3, [pc, #720]	; (8002134 <AES_general_SW_enc+0x310>)
 8001e64:	4664      	mov	r4, ip
 8001e66:	4619      	mov	r1, r3
 8001e68:	e06c      	b.n	8001f44 <AES_general_SW_enc+0x120>
 8001e6a:	ea4f 601b 	mov.w	r0, fp, lsr #24
 8001e6e:	ea4f 6619 	mov.w	r6, r9, lsr #24
 8001e72:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8001e76:	6814      	ldr	r4, [r2, #0]
 8001e78:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8001e7c:	ea4f 651c 	mov.w	r5, ip, lsr #24
 8001e80:	4044      	eors	r4, r0
 8001e82:	fa5f f089 	uxtb.w	r0, r9
 8001e86:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 8001e8a:	9606      	str	r6, [sp, #24]
 8001e8c:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8001e90:	6850      	ldr	r0, [r2, #4]
 8001e92:	ea84 6436 	eor.w	r4, r4, r6, ror #24
 8001e96:	4068      	eors	r0, r5
 8001e98:	fa5f f58b 	uxtb.w	r5, fp
 8001e9c:	f3cc 4607 	ubfx	r6, ip, #16, #8
 8001ea0:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 8001ea4:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8001ea8:	ea4f 6817 	mov.w	r8, r7, lsr #24
 8001eac:	ea80 6535 	eor.w	r5, r0, r5, ror #24
 8001eb0:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 8001eb4:	ea84 2636 	eor.w	r6, r4, r6, ror #8
 8001eb8:	fa5f f887 	uxtb.w	r8, r7
 8001ebc:	fa5f f48c 	uxtb.w	r4, ip
 8001ec0:	9504      	str	r5, [sp, #16]
 8001ec2:	f3c7 2007 	ubfx	r0, r7, #8, #8
 8001ec6:	6895      	ldr	r5, [r2, #8]
 8001ec8:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8001ecc:	9603      	str	r6, [sp, #12]
 8001ece:	f851 6027 	ldr.w	r6, [r1, r7, lsl #2]
 8001ed2:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
 8001ed6:	ea8a 0505 	eor.w	r5, sl, r5
 8001eda:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8001ede:	ea85 6537 	eor.w	r5, r5, r7, ror #24
 8001ee2:	f851 702c 	ldr.w	r7, [r1, ip, lsl #2]
 8001ee6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8001eea:	9701      	str	r7, [sp, #4]
 8001eec:	f3c9 4707 	ubfx	r7, r9, #16, #8
 8001ef0:	f851 a027 	ldr.w	sl, [r1, r7, lsl #2]
 8001ef4:	9002      	str	r0, [sp, #8]
 8001ef6:	68d4      	ldr	r4, [r2, #12]
 8001ef8:	9806      	ldr	r0, [sp, #24]
 8001efa:	9f04      	ldr	r7, [sp, #16]
 8001efc:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 8001f00:	ea80 0c04 	eor.w	ip, r0, r4
 8001f04:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8001f08:	ea87 2636 	eor.w	r6, r7, r6, ror #8
 8001f0c:	f3cb 4707 	ubfx	r7, fp, #16, #8
 8001f10:	ea8c 6838 	eor.w	r8, ip, r8, ror #24
 8001f14:	f851 c029 	ldr.w	ip, [r1, r9, lsl #2]
 8001f18:	f851 9027 	ldr.w	r9, [r1, r7, lsl #2]
 8001f1c:	9802      	ldr	r0, [sp, #8]
 8001f1e:	ea88 2839 	eor.w	r8, r8, r9, ror #8
 8001f22:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8001f26:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8001f2a:	f851 702b 	ldr.w	r7, [r1, fp, lsl #2]
 8001f2e:	ea89 4430 	eor.w	r4, r9, r0, ror #16
 8001f32:	9801      	ldr	r0, [sp, #4]
 8001f34:	ea85 253a 	eor.w	r5, r5, sl, ror #8
 8001f38:	ea86 463c 	eor.w	r6, r6, ip, ror #16
 8001f3c:	ea85 4537 	eor.w	r5, r5, r7, ror #16
 8001f40:	ea88 4a30 	eor.w	sl, r8, r0, ror #16
 8001f44:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8001f48:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 8001f4c:	ea4f 6c1a 	mov.w	ip, sl, lsr #24
 8001f50:	9003      	str	r0, [sp, #12]
 8001f52:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8001f56:	ea4f 6814 	mov.w	r8, r4, lsr #24
 8001f5a:	f853 b028 	ldr.w	fp, [r3, r8, lsl #2]
 8001f5e:	9004      	str	r0, [sp, #16]
 8001f60:	fa5f fc8a 	uxtb.w	ip, sl
 8001f64:	6910      	ldr	r0, [r2, #16]
 8001f66:	0e37      	lsrs	r7, r6, #24
 8001f68:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
 8001f6c:	ea8b 0b00 	eor.w	fp, fp, r0
 8001f70:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8001f74:	6950      	ldr	r0, [r2, #20]
 8001f76:	ea8b 683c 	eor.w	r8, fp, ip, ror #24
 8001f7a:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 8001f7e:	f853 b02c 	ldr.w	fp, [r3, ip, lsl #2]
 8001f82:	ea87 0c00 	eor.w	ip, r7, r0
 8001f86:	b2e7      	uxtb	r7, r4
 8001f88:	9805      	ldr	r0, [sp, #20]
 8001f8a:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8001f8e:	3801      	subs	r0, #1
 8001f90:	ea8c 6c37 	eor.w	ip, ip, r7, ror #24
 8001f94:	9005      	str	r0, [sp, #20]
 8001f96:	6997      	ldr	r7, [r2, #24]
 8001f98:	9803      	ldr	r0, [sp, #12]
 8001f9a:	fa5f f985 	uxtb.w	r9, r5
 8001f9e:	4047      	eors	r7, r0
 8001fa0:	b2f0      	uxtb	r0, r6
 8001fa2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001fa6:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8001faa:	ea87 6030 	eor.w	r0, r7, r0, ror #24
 8001fae:	9006      	str	r0, [sp, #24]
 8001fb0:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8001fb4:	69d0      	ldr	r0, [r2, #28]
 8001fb6:	9f04      	ldr	r7, [sp, #16]
 8001fb8:	9602      	str	r6, [sp, #8]
 8001fba:	ea87 0600 	eor.w	r6, r7, r0
 8001fbe:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8001fc2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001fc6:	f853 9029 	ldr.w	r9, [r3, r9, lsl #2]
 8001fca:	ea88 2b3b 	eor.w	fp, r8, fp, ror #8
 8001fce:	f3ca 4807 	ubfx	r8, sl, #16, #8
 8001fd2:	ea86 6939 	eor.w	r9, r6, r9, ror #24
 8001fd6:	ea8c 2c30 	eor.w	ip, ip, r0, ror #8
 8001fda:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
 8001fde:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8001fe2:	9e06      	ldr	r6, [sp, #24]
 8001fe4:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8001fe8:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8001fec:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001ff0:	ea86 2738 	eor.w	r7, r6, r8, ror #8
 8001ff4:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8001ff8:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8001ffc:	ea87 4734 	eor.w	r7, r7, r4, ror #16
 8002000:	9c05      	ldr	r4, [sp, #20]
 8002002:	ea89 2930 	eor.w	r9, r9, r0, ror #8
 8002006:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 800200a:	f853 a02a 	ldr.w	sl, [r3, sl, lsl #2]
 800200e:	9802      	ldr	r0, [sp, #8]
 8002010:	2c00      	cmp	r4, #0
 8002012:	ea8b 4b35 	eor.w	fp, fp, r5, ror #16
 8002016:	ea8c 4c3a 	eor.w	ip, ip, sl, ror #16
 800201a:	ea89 4930 	eor.w	r9, r9, r0, ror #16
 800201e:	f102 0220 	add.w	r2, r2, #32
 8002022:	f73f af22 	bgt.w	8001e6a <AES_general_SW_enc+0x46>
 8002026:	464b      	mov	r3, r9
 8002028:	46d9      	mov	r9, fp
 800202a:	469b      	mov	fp, r3
 800202c:	4b42      	ldr	r3, [pc, #264]	; (8002138 <AES_general_SW_enc+0x314>)
 800202e:	ea4f 6519 	mov.w	r5, r9, lsr #24
 8002032:	fa5f f18b 	uxtb.w	r1, fp
 8002036:	463c      	mov	r4, r7
 8002038:	5c5e      	ldrb	r6, [r3, r1]
 800203a:	5d5f      	ldrb	r7, [r3, r5]
 800203c:	f3cc 4107 	ubfx	r1, ip, #16, #8
 8002040:	5c59      	ldrb	r1, [r3, r1]
 8002042:	f3c4 2507 	ubfx	r5, r4, #8, #8
 8002046:	4660      	mov	r0, ip
 8002048:	ea46 6707 	orr.w	r7, r6, r7, lsl #24
 800204c:	f813 c005 	ldrb.w	ip, [r3, r5]
 8002050:	0e06      	lsrs	r6, r0, #24
 8002052:	fa5f f589 	uxtb.w	r5, r9
 8002056:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800205a:	6811      	ldr	r1, [r2, #0]
 800205c:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8002060:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
 8002064:	f813 c006 	ldrb.w	ip, [r3, r6]
 8002068:	5d5e      	ldrb	r6, [r3, r5]
 800206a:	f3c4 4507 	ubfx	r5, r4, #16, #8
 800206e:	5d5d      	ldrb	r5, [r3, r5]
 8002070:	4079      	eors	r1, r7
 8002072:	f3cb 2707 	ubfx	r7, fp, #8, #8
 8002076:	f8c8 1000 	str.w	r1, [r8]
 800207a:	ea46 660c 	orr.w	r6, r6, ip, lsl #24
 800207e:	f813 c007 	ldrb.w	ip, [r3, r7]
 8002082:	6851      	ldr	r1, [r2, #4]
 8002084:	0e27      	lsrs	r7, r4, #24
 8002086:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 800208a:	b2c5      	uxtb	r5, r0
 800208c:	ea46 260c 	orr.w	r6, r6, ip, lsl #8
 8002090:	f813 c007 	ldrb.w	ip, [r3, r7]
 8002094:	5d5f      	ldrb	r7, [r3, r5]
 8002096:	f3cb 4507 	ubfx	r5, fp, #16, #8
 800209a:	5d5d      	ldrb	r5, [r3, r5]
 800209c:	4071      	eors	r1, r6
 800209e:	f3c9 2607 	ubfx	r6, r9, #8, #8
 80020a2:	f8c8 1004 	str.w	r1, [r8, #4]
 80020a6:	ea47 670c 	orr.w	r7, r7, ip, lsl #24
 80020aa:	f813 c006 	ldrb.w	ip, [r3, r6]
 80020ae:	6891      	ldr	r1, [r2, #8]
 80020b0:	b2e4      	uxtb	r4, r4
 80020b2:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
 80020b6:	ea4f 661b 	mov.w	r6, fp, lsr #24
 80020ba:	5d1d      	ldrb	r5, [r3, r4]
 80020bc:	5d9e      	ldrb	r6, [r3, r6]
 80020be:	ea47 270c 	orr.w	r7, r7, ip, lsl #8
 80020c2:	f3c9 4407 	ubfx	r4, r9, #16, #8
 80020c6:	5d1c      	ldrb	r4, [r3, r4]
 80020c8:	4079      	eors	r1, r7
 80020ca:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80020ce:	5c18      	ldrb	r0, [r3, r0]
 80020d0:	f8c8 1008 	str.w	r1, [r8, #8]
 80020d4:	ea45 6306 	orr.w	r3, r5, r6, lsl #24
 80020d8:	68d2      	ldr	r2, [r2, #12]
 80020da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80020de:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80020e2:	4053      	eors	r3, r2
 80020e4:	f8c8 300c 	str.w	r3, [r8, #12]
 80020e8:	b00a      	add	sp, #40	; 0x28
 80020ea:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80020ee:	4770      	bx	lr
 80020f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80020f2:	6023      	str	r3, [r4, #0]
 80020f4:	6823      	ldr	r3, [r4, #0]
 80020f6:	9309      	str	r3, [sp, #36]	; 0x24
 80020f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80020fa:	b973      	cbnz	r3, 800211a <AES_general_SW_enc+0x2f6>
 80020fc:	6803      	ldr	r3, [r0, #0]
 80020fe:	6817      	ldr	r7, [r2, #0]
 8002100:	6846      	ldr	r6, [r0, #4]
 8002102:	6885      	ldr	r5, [r0, #8]
 8002104:	6854      	ldr	r4, [r2, #4]
 8002106:	68c0      	ldr	r0, [r0, #12]
 8002108:	ea87 0c03 	eor.w	ip, r7, r3
 800210c:	6891      	ldr	r1, [r2, #8]
 800210e:	68d3      	ldr	r3, [r2, #12]
 8002110:	4066      	eors	r6, r4
 8002112:	404d      	eors	r5, r1
 8002114:	ea83 0a00 	eor.w	sl, r3, r0
 8002118:	e6a3      	b.n	8001e62 <AES_general_SW_enc+0x3e>
 800211a:	6805      	ldr	r5, [r0, #0]
 800211c:	6811      	ldr	r1, [r2, #0]
 800211e:	6840      	ldr	r0, [r0, #4]
 8002120:	6853      	ldr	r3, [r2, #4]
 8002122:	404d      	eors	r5, r1
 8002124:	ea83 0c00 	eor.w	ip, r3, r0
 8002128:	46aa      	mov	sl, r5
 800212a:	462e      	mov	r6, r5
 800212c:	e699      	b.n	8001e62 <AES_general_SW_enc+0x3e>
 800212e:	bf00      	nop
 8002130:	40023008 	.word	0x40023008
 8002134:	08003600 	.word	0x08003600
 8002138:	08003a00 	.word	0x08003a00

0800213c <AES_CCM_Encrypt_Init>:
 800213c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800213e:	2300      	movs	r3, #0
 8002140:	b085      	sub	sp, #20
 8002142:	4604      	mov	r4, r0
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	9301      	str	r3, [sp, #4]
 8002148:	9302      	str	r3, [sp, #8]
 800214a:	9303      	str	r3, [sp, #12]
 800214c:	b148      	cbz	r0, 8002162 <AES_CCM_Encrypt_Init+0x26>
 800214e:	b141      	cbz	r1, 8002162 <AES_CCM_Encrypt_Init+0x26>
 8002150:	b13a      	cbz	r2, 8002162 <AES_CCM_Encrypt_Init+0x26>
 8002152:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8002154:	1f03      	subs	r3, r0, #4
 8002156:	2b0c      	cmp	r3, #12
 8002158:	d907      	bls.n	800216a <AES_CCM_Encrypt_Init+0x2e>
 800215a:	f640 401f 	movw	r0, #3103	; 0xc1f
 800215e:	b005      	add	sp, #20
 8002160:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002162:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 8002166:	b005      	add	sp, #20
 8002168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800216a:	07c7      	lsls	r7, r0, #31
 800216c:	d4f5      	bmi.n	800215a <AES_CCM_Encrypt_Init+0x1e>
 800216e:	6925      	ldr	r5, [r4, #16]
 8002170:	1feb      	subs	r3, r5, #7
 8002172:	2b06      	cmp	r3, #6
 8002174:	d8f1      	bhi.n	800215a <AES_CCM_Encrypt_Init+0x1e>
 8002176:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002178:	f023 0608 	bic.w	r6, r3, #8
 800217c:	2e10      	cmp	r6, #16
 800217e:	d001      	beq.n	8002184 <AES_CCM_Encrypt_Init+0x48>
 8002180:	2b20      	cmp	r3, #32
 8002182:	d1ea      	bne.n	800215a <AES_CCM_Encrypt_Init+0x1e>
 8002184:	7926      	ldrb	r6, [r4, #4]
 8002186:	60e2      	str	r2, [r4, #12]
 8002188:	f026 0716 	bic.w	r7, r6, #22
 800218c:	07f6      	lsls	r6, r6, #31
 800218e:	7127      	strb	r7, [r4, #4]
 8002190:	f104 0748 	add.w	r7, r4, #72	; 0x48
 8002194:	f140 80ad 	bpl.w	80022f2 <AES_CCM_Encrypt_Init+0x1b6>
 8002198:	b2c0      	uxtb	r0, r0
 800219a:	1e86      	subs	r6, r0, #2
 800219c:	f1c5 010e 	rsb	r1, r5, #14
 80021a0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80021a2:	f3c6 0642 	ubfx	r6, r6, #1, #3
 80021a6:	f001 0107 	and.w	r1, r1, #7
 80021aa:	ea41 01c6 	orr.w	r1, r1, r6, lsl #3
 80021ae:	b108      	cbz	r0, 80021b4 <AES_CCM_Encrypt_Init+0x78>
 80021b0:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80021b4:	7856      	ldrb	r6, [r2, #1]
 80021b6:	f892 e000 	ldrb.w	lr, [r2]
 80021ba:	7890      	ldrb	r0, [r2, #2]
 80021bc:	0236      	lsls	r6, r6, #8
 80021be:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
 80021c2:	4330      	orrs	r0, r6
 80021c4:	ea40 6101 	orr.w	r1, r0, r1, lsl #24
 80021c8:	9100      	str	r1, [sp, #0]
 80021ca:	7910      	ldrb	r0, [r2, #4]
 80021cc:	78d6      	ldrb	r6, [r2, #3]
 80021ce:	0400      	lsls	r0, r0, #16
 80021d0:	7991      	ldrb	r1, [r2, #6]
 80021d2:	ea40 6606 	orr.w	r6, r0, r6, lsl #24
 80021d6:	7950      	ldrb	r0, [r2, #5]
 80021d8:	4331      	orrs	r1, r6
 80021da:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 80021de:	2d07      	cmp	r5, #7
 80021e0:	9101      	str	r1, [sp, #4]
 80021e2:	dd17      	ble.n	8002214 <AES_CCM_Encrypt_Init+0xd8>
 80021e4:	f1a5 0e07 	sub.w	lr, r5, #7
 80021e8:	2000      	movs	r0, #0
 80021ea:	1815      	adds	r5, r2, r0
 80021ec:	43c1      	mvns	r1, r0
 80021ee:	79ee      	ldrb	r6, [r5, #7]
 80021f0:	f001 0103 	and.w	r1, r1, #3
 80021f4:	00c9      	lsls	r1, r1, #3
 80021f6:	fa06 f101 	lsl.w	r1, r6, r1
 80021fa:	f020 0503 	bic.w	r5, r0, #3
 80021fe:	ae04      	add	r6, sp, #16
 8002200:	3508      	adds	r5, #8
 8002202:	4435      	add	r5, r6
 8002204:	f855 6c10 	ldr.w	r6, [r5, #-16]
 8002208:	3001      	adds	r0, #1
 800220a:	430e      	orrs	r6, r1
 800220c:	4570      	cmp	r0, lr
 800220e:	f845 6c10 	str.w	r6, [r5, #-16]
 8002212:	d1ea      	bne.n	80021ea <AES_CCM_Encrypt_Init+0xae>
 8002214:	9803      	ldr	r0, [sp, #12]
 8002216:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002218:	463a      	mov	r2, r7
 800221a:	ea40 0501 	orr.w	r5, r0, r1
 800221e:	f104 0124 	add.w	r1, r4, #36	; 0x24
 8002222:	4668      	mov	r0, sp
 8002224:	9503      	str	r5, [sp, #12]
 8002226:	f7ff fdfd 	bl	8001e24 <AES_general_SW_enc>
 800222a:	68e6      	ldr	r6, [r4, #12]
 800222c:	6927      	ldr	r7, [r4, #16]
 800222e:	7872      	ldrb	r2, [r6, #1]
 8002230:	7831      	ldrb	r1, [r6, #0]
 8002232:	78b3      	ldrb	r3, [r6, #2]
 8002234:	0212      	lsls	r2, r2, #8
 8002236:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 800223a:	f1c7 020e 	rsb	r2, r7, #14
 800223e:	430b      	orrs	r3, r1
 8002240:	f002 0207 	and.w	r2, r2, #7
 8002244:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002248:	6163      	str	r3, [r4, #20]
 800224a:	7932      	ldrb	r2, [r6, #4]
 800224c:	78f1      	ldrb	r1, [r6, #3]
 800224e:	79b3      	ldrb	r3, [r6, #6]
 8002250:	0412      	lsls	r2, r2, #16
 8002252:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8002256:	7972      	ldrb	r2, [r6, #5]
 8002258:	430b      	orrs	r3, r1
 800225a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 800225e:	2f07      	cmp	r7, #7
 8002260:	f04f 0300 	mov.w	r3, #0
 8002264:	61a2      	str	r2, [r4, #24]
 8002266:	61e3      	str	r3, [r4, #28]
 8002268:	6223      	str	r3, [r4, #32]
 800226a:	dd1f      	ble.n	80022ac <AES_CCM_Encrypt_Init+0x170>
 800226c:	3f07      	subs	r7, #7
 800226e:	469c      	mov	ip, r3
 8002270:	e007      	b.n	8002282 <AES_CCM_Encrypt_Init+0x146>
 8002272:	2b00      	cmp	r3, #0
 8002274:	bfb8      	it	lt
 8002276:	1cda      	addlt	r2, r3, #3
 8002278:	f022 0203 	bic.w	r2, r2, #3
 800227c:	4422      	add	r2, r4
 800227e:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 8002282:	18f5      	adds	r5, r6, r3
 8002284:	43d8      	mvns	r0, r3
 8002286:	79e9      	ldrb	r1, [r5, #7]
 8002288:	f000 0003 	and.w	r0, r0, #3
 800228c:	00c0      	lsls	r0, r0, #3
 800228e:	4081      	lsls	r1, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	461a      	mov	r2, r3
 8002294:	bfb8      	it	lt
 8002296:	1cda      	addlt	r2, r3, #3
 8002298:	f022 0203 	bic.w	r2, r2, #3
 800229c:	3301      	adds	r3, #1
 800229e:	4422      	add	r2, r4
 80022a0:	ea4c 0101 	orr.w	r1, ip, r1
 80022a4:	42bb      	cmp	r3, r7
 80022a6:	61d1      	str	r1, [r2, #28]
 80022a8:	461a      	mov	r2, r3
 80022aa:	d1e2      	bne.n	8002272 <AES_CCM_Encrypt_Init+0x136>
 80022ac:	6a23      	ldr	r3, [r4, #32]
 80022ae:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80022b0:	f043 0301 	orr.w	r3, r3, #1
 80022b4:	6223      	str	r3, [r4, #32]
 80022b6:	2800      	cmp	r0, #0
 80022b8:	f43f af55 	beq.w	8002166 <AES_CCM_Encrypt_Init+0x2a>
 80022bc:	2300      	movs	r3, #0
 80022be:	f5b0 4f7f 	cmp.w	r0, #65280	; 0xff00
 80022c2:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
 80022c6:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
 80022ca:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 80022ce:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
 80022d2:	db19      	blt.n	8002308 <AES_CCM_Encrypt_Init+0x1cc>
 80022d4:	0c02      	lsrs	r2, r0, #16
 80022d6:	ea6f 32c2 	mvn.w	r2, r2, lsl #15
 80022da:	0400      	lsls	r0, r0, #16
 80022dc:	ea6f 32d2 	mvn.w	r2, r2, lsr #15
 80022e0:	2106      	movs	r1, #6
 80022e2:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
 80022e6:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
 80022ea:	4618      	mov	r0, r3
 80022ec:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
 80022f0:	e739      	b.n	8002166 <AES_CCM_Encrypt_Init+0x2a>
 80022f2:	4608      	mov	r0, r1
 80022f4:	461a      	mov	r2, r3
 80022f6:	60a1      	str	r1, [r4, #8]
 80022f8:	4639      	mov	r1, r7
 80022fa:	f7ff fd75 	bl	8001de8 <AES_keyschedule_enc>
 80022fe:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002300:	6925      	ldr	r5, [r4, #16]
 8002302:	68e2      	ldr	r2, [r4, #12]
 8002304:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002306:	e747      	b.n	8002198 <AES_CCM_Encrypt_Init+0x5c>
 8002308:	0400      	lsls	r0, r0, #16
 800230a:	2202      	movs	r2, #2
 800230c:	f8c4 0138 	str.w	r0, [r4, #312]	; 0x138
 8002310:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
 8002314:	4618      	mov	r0, r3
 8002316:	e726      	b.n	8002166 <AES_CCM_Encrypt_Init+0x2a>

08002318 <AES_CCM_Header_Append>:
 8002318:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800231c:	4680      	mov	r8, r0
 800231e:	468b      	mov	fp, r1
 8002320:	4692      	mov	sl, r2
 8002322:	b150      	cbz	r0, 800233a <AES_CCM_Header_Append+0x22>
 8002324:	b149      	cbz	r1, 800233a <AES_CCM_Header_Append+0x22>
 8002326:	f890 9004 	ldrb.w	r9, [r0, #4]
 800232a:	f019 0912 	ands.w	r9, r9, #18
 800232e:	d009      	beq.n	8002344 <AES_CCM_Header_Append+0x2c>
 8002330:	f640 451e 	movw	r5, #3102	; 0xc1e
 8002334:	4628      	mov	r0, r5
 8002336:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800233a:	f44f 6542 	mov.w	r5, #3104	; 0xc20
 800233e:	4628      	mov	r0, r5
 8002340:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002344:	2a00      	cmp	r2, #0
 8002346:	f000 8159 	beq.w	80025fc <AES_CCM_Header_Append+0x2e4>
 800234a:	f8d0 6148 	ldr.w	r6, [r0, #328]	; 0x148
 800234e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002350:	1994      	adds	r4, r2, r6
 8002352:	2c10      	cmp	r4, #16
 8002354:	bf28      	it	cs
 8002356:	2410      	movcs	r4, #16
 8002358:	1a9b      	subs	r3, r3, r2
 800235a:	42a6      	cmp	r6, r4
 800235c:	6403      	str	r3, [r0, #64]	; 0x40
 800235e:	f280 8157 	bge.w	8002610 <AES_CCM_Header_Append+0x2f8>
 8002362:	4633      	mov	r3, r6
 8002364:	1b8d      	subs	r5, r1, r6
 8002366:	43d8      	mvns	r0, r3
 8002368:	5ce9      	ldrb	r1, [r5, r3]
 800236a:	f000 0003 	and.w	r0, r0, #3
 800236e:	00c0      	lsls	r0, r0, #3
 8002370:	fa01 f000 	lsl.w	r0, r1, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	461a      	mov	r2, r3
 8002378:	bfb8      	it	lt
 800237a:	1cda      	addlt	r2, r3, #3
 800237c:	f022 0203 	bic.w	r2, r2, #3
 8002380:	4442      	add	r2, r8
 8002382:	f8d2 1138 	ldr.w	r1, [r2, #312]	; 0x138
 8002386:	3301      	adds	r3, #1
 8002388:	4301      	orrs	r1, r0
 800238a:	42a3      	cmp	r3, r4
 800238c:	f8c2 1138 	str.w	r1, [r2, #312]	; 0x138
 8002390:	d1e9      	bne.n	8002366 <AES_CCM_Header_Append+0x4e>
 8002392:	ebc6 0903 	rsb	r9, r6, r3
 8002396:	f109 050f 	add.w	r5, r9, #15
 800239a:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
 800239e:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
 80023a2:	f8d8 6138 	ldr.w	r6, [r8, #312]	; 0x138
 80023a6:	f8d8 1140 	ldr.w	r1, [r8, #320]	; 0x140
 80023aa:	ea87 0206 	eor.w	r2, r7, r6
 80023ae:	4041      	eors	r1, r0
 80023b0:	f8d8 6028 	ldr.w	r6, [r8, #40]	; 0x28
 80023b4:	f8d8 0030 	ldr.w	r0, [r8, #48]	; 0x30
 80023b8:	f8d8 413c 	ldr.w	r4, [r8, #316]	; 0x13c
 80023bc:	f8d8 3144 	ldr.w	r3, [r8, #324]	; 0x144
 80023c0:	4074      	eors	r4, r6
 80023c2:	4043      	eors	r3, r0
 80023c4:	f108 0724 	add.w	r7, r8, #36	; 0x24
 80023c8:	f108 0648 	add.w	r6, r8, #72	; 0x48
 80023cc:	f8c8 2024 	str.w	r2, [r8, #36]	; 0x24
 80023d0:	f8c8 102c 	str.w	r1, [r8, #44]	; 0x2c
 80023d4:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
 80023d8:	f8c8 4028 	str.w	r4, [r8, #40]	; 0x28
 80023dc:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 80023e0:	4638      	mov	r0, r7
 80023e2:	4639      	mov	r1, r7
 80023e4:	4632      	mov	r2, r6
 80023e6:	f7ff fd1d 	bl	8001e24 <AES_general_SW_enc>
 80023ea:	2300      	movs	r3, #0
 80023ec:	45aa      	cmp	sl, r5
 80023ee:	f8c8 3148 	str.w	r3, [r8, #328]	; 0x148
 80023f2:	dd4e      	ble.n	8002492 <AES_CCM_Header_Append+0x17a>
 80023f4:	f109 0401 	add.w	r4, r9, #1
 80023f8:	445c      	add	r4, fp
 80023fa:	7822      	ldrb	r2, [r4, #0]
 80023fc:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8002400:	78a3      	ldrb	r3, [r4, #2]
 8002402:	0412      	lsls	r2, r2, #16
 8002404:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002408:	7861      	ldrb	r1, [r4, #1]
 800240a:	431a      	orrs	r2, r3
 800240c:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8002410:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002414:	4053      	eors	r3, r2
 8002416:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
 800241a:	7922      	ldrb	r2, [r4, #4]
 800241c:	78e1      	ldrb	r1, [r4, #3]
 800241e:	79a3      	ldrb	r3, [r4, #6]
 8002420:	0412      	lsls	r2, r2, #16
 8002422:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002426:	7961      	ldrb	r1, [r4, #5]
 8002428:	431a      	orrs	r2, r3
 800242a:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 800242e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002432:	4053      	eors	r3, r2
 8002434:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
 8002438:	7a22      	ldrb	r2, [r4, #8]
 800243a:	79e1      	ldrb	r1, [r4, #7]
 800243c:	7aa3      	ldrb	r3, [r4, #10]
 800243e:	0412      	lsls	r2, r2, #16
 8002440:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002444:	7a61      	ldrb	r1, [r4, #9]
 8002446:	431a      	orrs	r2, r3
 8002448:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 800244c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002450:	4053      	eors	r3, r2
 8002452:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
 8002456:	7b22      	ldrb	r2, [r4, #12]
 8002458:	7ae1      	ldrb	r1, [r4, #11]
 800245a:	7ba3      	ldrb	r3, [r4, #14]
 800245c:	0412      	lsls	r2, r2, #16
 800245e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002462:	7b61      	ldrb	r1, [r4, #13]
 8002464:	431a      	orrs	r2, r3
 8002466:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 800246a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800246e:	4053      	eors	r3, r2
 8002470:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
 8002474:	f109 0910 	add.w	r9, r9, #16
 8002478:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 800247c:	4638      	mov	r0, r7
 800247e:	4639      	mov	r1, r7
 8002480:	4632      	mov	r2, r6
 8002482:	f7ff fccf 	bl	8001e24 <AES_general_SW_enc>
 8002486:	f109 030f 	add.w	r3, r9, #15
 800248a:	459a      	cmp	sl, r3
 800248c:	f104 0410 	add.w	r4, r4, #16
 8002490:	dcb3      	bgt.n	80023fa <AES_CCM_Header_Append+0xe2>
 8002492:	45ca      	cmp	sl, r9
 8002494:	f340 80b2 	ble.w	80025fc <AES_CCM_Header_Append+0x2e4>
 8002498:	ebc9 0a0a 	rsb	sl, r9, sl
 800249c:	f1ba 0f00 	cmp.w	sl, #0
 80024a0:	f898 3004 	ldrb.w	r3, [r8, #4]
 80024a4:	4655      	mov	r5, sl
 80024a6:	bfb8      	it	lt
 80024a8:	f10a 0503 	addlt.w	r5, sl, #3
 80024ac:	10ad      	asrs	r5, r5, #2
 80024ae:	f043 0310 	orr.w	r3, r3, #16
 80024b2:	2d00      	cmp	r5, #0
 80024b4:	f888 3004 	strb.w	r3, [r8, #4]
 80024b8:	f340 80a4 	ble.w	8002604 <AES_CCM_Header_Append+0x2ec>
 80024bc:	eb0b 0309 	add.w	r3, fp, r9
 80024c0:	78da      	ldrb	r2, [r3, #3]
 80024c2:	f81b 1009 	ldrb.w	r1, [fp, r9]
 80024c6:	7898      	ldrb	r0, [r3, #2]
 80024c8:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80024cc:	785a      	ldrb	r2, [r3, #1]
 80024ce:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
 80024d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80024d6:	2d01      	cmp	r5, #1
 80024d8:	f8c8 3138 	str.w	r3, [r8, #312]	; 0x138
 80024dc:	dd36      	ble.n	800254c <AES_CCM_Header_Append+0x234>
 80024de:	f109 0204 	add.w	r2, r9, #4
 80024e2:	eb0b 0302 	add.w	r3, fp, r2
 80024e6:	f81b 1002 	ldrb.w	r1, [fp, r2]
 80024ea:	78da      	ldrb	r2, [r3, #3]
 80024ec:	7898      	ldrb	r0, [r3, #2]
 80024ee:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80024f2:	785a      	ldrb	r2, [r3, #1]
 80024f4:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
 80024f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80024fc:	2d02      	cmp	r5, #2
 80024fe:	f8c8 313c 	str.w	r3, [r8, #316]	; 0x13c
 8002502:	dd23      	ble.n	800254c <AES_CCM_Header_Append+0x234>
 8002504:	f109 0208 	add.w	r2, r9, #8
 8002508:	eb0b 0302 	add.w	r3, fp, r2
 800250c:	f81b 1002 	ldrb.w	r1, [fp, r2]
 8002510:	78da      	ldrb	r2, [r3, #3]
 8002512:	7898      	ldrb	r0, [r3, #2]
 8002514:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8002518:	785a      	ldrb	r2, [r3, #1]
 800251a:	ea41 2300 	orr.w	r3, r1, r0, lsl #8
 800251e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002522:	2d03      	cmp	r5, #3
 8002524:	f8c8 3140 	str.w	r3, [r8, #320]	; 0x140
 8002528:	dd10      	ble.n	800254c <AES_CCM_Header_Append+0x234>
 800252a:	f109 020c 	add.w	r2, r9, #12
 800252e:	eb0b 0302 	add.w	r3, fp, r2
 8002532:	f81b 1002 	ldrb.w	r1, [fp, r2]
 8002536:	78da      	ldrb	r2, [r3, #3]
 8002538:	7858      	ldrb	r0, [r3, #1]
 800253a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 800253e:	789a      	ldrb	r2, [r3, #2]
 8002540:	ea41 4300 	orr.w	r3, r1, r0, lsl #16
 8002544:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002548:	f8c8 3144 	str.w	r3, [r8, #324]	; 0x144
 800254c:	ebc5 7485 	rsb	r4, r5, r5, lsl #30
 8002550:	00a8      	lsls	r0, r5, #2
 8002552:	00a4      	lsls	r4, r4, #2
 8002554:	3501      	adds	r5, #1
 8002556:	4684      	mov	ip, r0
 8002558:	2200      	movs	r2, #0
 800255a:	4454      	add	r4, sl
 800255c:	4440      	add	r0, r8
 800255e:	4294      	cmp	r4, r2
 8002560:	f8c0 2138 	str.w	r2, [r0, #312]	; 0x138
 8002564:	dd56      	ble.n	8002614 <AES_CCM_Header_Append+0x2fc>
 8002566:	44e1      	add	r9, ip
 8002568:	eb04 0309 	add.w	r3, r4, r9
 800256c:	eb0b 0a03 	add.w	sl, fp, r3
 8002570:	44cb      	add	fp, r9
 8002572:	2318      	movs	r3, #24
 8002574:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8002578:	4099      	lsls	r1, r3
 800257a:	45d3      	cmp	fp, sl
 800257c:	ea42 0201 	orr.w	r2, r2, r1
 8002580:	f8c0 2138 	str.w	r2, [r0, #312]	; 0x138
 8002584:	f1a3 0308 	sub.w	r3, r3, #8
 8002588:	d1f4      	bne.n	8002574 <AES_CCM_Header_Append+0x25c>
 800258a:	4464      	add	r4, ip
 800258c:	2d03      	cmp	r5, #3
 800258e:	f8c8 4148 	str.w	r4, [r8, #328]	; 0x148
 8002592:	dc09      	bgt.n	80025a8 <AES_CCM_Header_Append+0x290>
 8002594:	00aa      	lsls	r2, r5, #2
 8002596:	eb08 0085 	add.w	r0, r8, r5, lsl #2
 800259a:	f1c2 0210 	rsb	r2, r2, #16
 800259e:	f500 709c 	add.w	r0, r0, #312	; 0x138
 80025a2:	2100      	movs	r1, #0
 80025a4:	f000 ffea 	bl	800357c <memset>
 80025a8:	f8d8 5040 	ldr.w	r5, [r8, #64]	; 0x40
 80025ac:	bb35      	cbnz	r5, 80025fc <AES_CCM_Header_Append+0x2e4>
 80025ae:	f8d8 2138 	ldr.w	r2, [r8, #312]	; 0x138
 80025b2:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 80025b6:	f8d8 0140 	ldr.w	r0, [r8, #320]	; 0x140
 80025ba:	ea82 0e03 	eor.w	lr, r2, r3
 80025be:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
 80025c2:	f8d8 213c 	ldr.w	r2, [r8, #316]	; 0x13c
 80025c6:	f8d8 4028 	ldr.w	r4, [r8, #40]	; 0x28
 80025ca:	4048      	eors	r0, r1
 80025cc:	4054      	eors	r4, r2
 80025ce:	f8d8 1144 	ldr.w	r1, [r8, #324]	; 0x144
 80025d2:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 80025d6:	f8c8 0140 	str.w	r0, [r8, #320]	; 0x140
 80025da:	ea81 0302 	eor.w	r3, r1, r2
 80025de:	f8c8 3144 	str.w	r3, [r8, #324]	; 0x144
 80025e2:	4639      	mov	r1, r7
 80025e4:	4632      	mov	r2, r6
 80025e6:	f8c8 e138 	str.w	lr, [r8, #312]	; 0x138
 80025ea:	f8c8 413c 	str.w	r4, [r8, #316]	; 0x13c
 80025ee:	f508 709c 	add.w	r0, r8, #312	; 0x138
 80025f2:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 80025f6:	f7ff fc15 	bl	8001e24 <AES_general_SW_enc>
 80025fa:	e69b      	b.n	8002334 <AES_CCM_Header_Append+0x1c>
 80025fc:	2500      	movs	r5, #0
 80025fe:	4628      	mov	r0, r5
 8002600:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002604:	f04f 0c00 	mov.w	ip, #0
 8002608:	4664      	mov	r4, ip
 800260a:	4660      	mov	r0, ip
 800260c:	2501      	movs	r5, #1
 800260e:	e7a3      	b.n	8002558 <AES_CCM_Header_Append+0x240>
 8002610:	250f      	movs	r5, #15
 8002612:	e6c2      	b.n	800239a <AES_CCM_Header_Append+0x82>
 8002614:	4614      	mov	r4, r2
 8002616:	e7b8      	b.n	800258a <AES_CCM_Header_Append+0x272>

08002618 <AES_CCM_Encrypt_Append>:
 8002618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800261c:	4683      	mov	fp, r0
 800261e:	b095      	sub	sp, #84	; 0x54
 8002620:	2000      	movs	r0, #0
 8002622:	9101      	str	r1, [sp, #4]
 8002624:	9204      	str	r2, [sp, #16]
 8002626:	9302      	str	r3, [sp, #8]
 8002628:	9010      	str	r0, [sp, #64]	; 0x40
 800262a:	9011      	str	r0, [sp, #68]	; 0x44
 800262c:	9012      	str	r0, [sp, #72]	; 0x48
 800262e:	9013      	str	r0, [sp, #76]	; 0x4c
 8002630:	900b      	str	r0, [sp, #44]	; 0x2c
 8002632:	f1bb 0f00 	cmp.w	fp, #0
 8002636:	d00d      	beq.n	8002654 <AES_CCM_Encrypt_Append+0x3c>
 8002638:	b161      	cbz	r1, 8002654 <AES_CCM_Encrypt_Append+0x3c>
 800263a:	b15b      	cbz	r3, 8002654 <AES_CCM_Encrypt_Append+0x3c>
 800263c:	981e      	ldr	r0, [sp, #120]	; 0x78
 800263e:	b148      	cbz	r0, 8002654 <AES_CCM_Encrypt_Append+0x3c>
 8002640:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8002644:	f013 0f06 	tst.w	r3, #6
 8002648:	d009      	beq.n	800265e <AES_CCM_Encrypt_Append+0x46>
 800264a:	f640 401e 	movw	r0, #3102	; 0xc1e
 800264e:	b015      	add	sp, #84	; 0x54
 8002650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002654:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 8002658:	b015      	add	sp, #84	; 0x54
 800265a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800265e:	4bb6      	ldr	r3, [pc, #728]	; (8002938 <AES_CCM_Encrypt_Append+0x320>)
 8002660:	2201      	movs	r2, #1
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	3b08      	subs	r3, #8
 8002668:	920b      	str	r2, [sp, #44]	; 0x2c
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	920b      	str	r2, [sp, #44]	; 0x2c
 800266e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002670:	3201      	adds	r2, #1
 8002672:	f000 81db 	beq.w	8002a2c <AES_CCM_Encrypt_Append+0x414>
 8002676:	9d04      	ldr	r5, [sp, #16]
 8002678:	2d0f      	cmp	r5, #15
 800267a:	f340 835e 	ble.w	8002d3a <AES_CCM_Encrypt_Append+0x722>
 800267e:	f1a5 0310 	sub.w	r3, r5, #16
 8002682:	9d01      	ldr	r5, [sp, #4]
 8002684:	091b      	lsrs	r3, r3, #4
 8002686:	9308      	str	r3, [sp, #32]
 8002688:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 800268c:	f10b 0548 	add.w	r5, fp, #72	; 0x48
 8002690:	9503      	str	r5, [sp, #12]
 8002692:	f10b 0514 	add.w	r5, fp, #20
 8002696:	9507      	str	r5, [sp, #28]
 8002698:	9d01      	ldr	r5, [sp, #4]
 800269a:	3311      	adds	r3, #17
 800269c:	f105 0901 	add.w	r9, r5, #1
 80026a0:	f8dd a008 	ldr.w	sl, [sp, #8]
 80026a4:	ad10      	add	r5, sp, #64	; 0x40
 80026a6:	9305      	str	r3, [sp, #20]
 80026a8:	f10b 0c24 	add.w	ip, fp, #36	; 0x24
 80026ac:	9506      	str	r5, [sp, #24]
 80026ae:	f899 8000 	ldrb.w	r8, [r9]
 80026b2:	f819 2c01 	ldrb.w	r2, [r9, #-1]
 80026b6:	f899 3002 	ldrb.w	r3, [r9, #2]
 80026ba:	ea4f 4808 	mov.w	r8, r8, lsl #16
 80026be:	ea48 6802 	orr.w	r8, r8, r2, lsl #24
 80026c2:	f899 2001 	ldrb.w	r2, [r9, #1]
 80026c6:	ea48 0803 	orr.w	r8, r8, r3
 80026ca:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 80026ce:	ea48 2802 	orr.w	r8, r8, r2, lsl #8
 80026d2:	ea43 0308 	orr.w	r3, r3, r8
 80026d6:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
 80026da:	f899 7004 	ldrb.w	r7, [r9, #4]
 80026de:	f899 2003 	ldrb.w	r2, [r9, #3]
 80026e2:	f899 3006 	ldrb.w	r3, [r9, #6]
 80026e6:	043f      	lsls	r7, r7, #16
 80026e8:	f899 1005 	ldrb.w	r1, [r9, #5]
 80026ec:	ea47 6702 	orr.w	r7, r7, r2, lsl #24
 80026f0:	431f      	orrs	r7, r3
 80026f2:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
 80026f6:	ea47 2701 	orr.w	r7, r7, r1, lsl #8
 80026fa:	433b      	orrs	r3, r7
 80026fc:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
 8002700:	f899 6008 	ldrb.w	r6, [r9, #8]
 8002704:	f899 2007 	ldrb.w	r2, [r9, #7]
 8002708:	f899 300a 	ldrb.w	r3, [r9, #10]
 800270c:	0436      	lsls	r6, r6, #16
 800270e:	f899 0009 	ldrb.w	r0, [r9, #9]
 8002712:	ea46 6602 	orr.w	r6, r6, r2, lsl #24
 8002716:	431e      	orrs	r6, r3
 8002718:	f8db 302c 	ldr.w	r3, [fp, #44]	; 0x2c
 800271c:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
 8002720:	4333      	orrs	r3, r6
 8002722:	f8cb 302c 	str.w	r3, [fp, #44]	; 0x2c
 8002726:	f899 500c 	ldrb.w	r5, [r9, #12]
 800272a:	f899 200b 	ldrb.w	r2, [r9, #11]
 800272e:	f899 300e 	ldrb.w	r3, [r9, #14]
 8002732:	042d      	lsls	r5, r5, #16
 8002734:	f899 400d 	ldrb.w	r4, [r9, #13]
 8002738:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
 800273c:	431d      	orrs	r5, r3
 800273e:	f8db 3030 	ldr.w	r3, [fp, #48]	; 0x30
 8002742:	ea45 2504 	orr.w	r5, r5, r4, lsl #8
 8002746:	432b      	orrs	r3, r5
 8002748:	4660      	mov	r0, ip
 800274a:	4661      	mov	r1, ip
 800274c:	f8cb 3030 	str.w	r3, [fp, #48]	; 0x30
 8002750:	9a03      	ldr	r2, [sp, #12]
 8002752:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 8002756:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800275a:	f8cd c000 	str.w	ip, [sp]
 800275e:	970d      	str	r7, [sp, #52]	; 0x34
 8002760:	950f      	str	r5, [sp, #60]	; 0x3c
 8002762:	960e      	str	r6, [sp, #56]	; 0x38
 8002764:	f7ff fb5e 	bl	8001e24 <AES_general_SW_enc>
 8002768:	9807      	ldr	r0, [sp, #28]
 800276a:	9906      	ldr	r1, [sp, #24]
 800276c:	9a03      	ldr	r2, [sp, #12]
 800276e:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 8002772:	f7ff fb57 	bl	8001e24 <AES_general_SW_enc>
 8002776:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8002778:	f8db 3020 	ldr.w	r3, [fp, #32]
 800277c:	402c      	ands	r4, r5
 800277e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8002780:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002782:	9812      	ldr	r0, [sp, #72]	; 0x48
 8002784:	0e25      	lsrs	r5, r4, #24
 8002786:	3301      	adds	r3, #1
 8002788:	f8cb 3020 	str.w	r3, [fp, #32]
 800278c:	400f      	ands	r7, r1
 800278e:	f88a 5003 	strb.w	r5, [sl, #3]
 8002792:	ea08 0802 	and.w	r8, r8, r2
 8002796:	4030      	ands	r0, r6
 8002798:	9d05      	ldr	r5, [sp, #20]
 800279a:	f109 0910 	add.w	r9, r9, #16
 800279e:	0e00      	lsrs	r0, r0, #24
 80027a0:	0e3f      	lsrs	r7, r7, #24
 80027a2:	ea4f 6818 	mov.w	r8, r8, lsr #24
 80027a6:	0a21      	lsrs	r1, r4, #8
 80027a8:	0c22      	lsrs	r2, r4, #16
 80027aa:	f88a 0002 	strb.w	r0, [sl, #2]
 80027ae:	f88a 4006 	strb.w	r4, [sl, #6]
 80027b2:	f88a 7001 	strb.w	r7, [sl, #1]
 80027b6:	f88a 8000 	strb.w	r8, [sl]
 80027ba:	f88a 1005 	strb.w	r1, [sl, #5]
 80027be:	f88a 2004 	strb.w	r2, [sl, #4]
 80027c2:	45a9      	cmp	r9, r5
 80027c4:	f10a 0a10 	add.w	sl, sl, #16
 80027c8:	f8dd c000 	ldr.w	ip, [sp]
 80027cc:	f47f af6f 	bne.w	80026ae <AES_CCM_Encrypt_Append+0x96>
 80027d0:	9d08      	ldr	r5, [sp, #32]
 80027d2:	1c6b      	adds	r3, r5, #1
 80027d4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80027d8:	9d04      	ldr	r5, [sp, #16]
 80027da:	45a8      	cmp	r8, r5
 80027dc:	f280 8121 	bge.w	8002a22 <AES_CCM_Encrypt_Append+0x40a>
 80027e0:	ebc8 0505 	rsb	r5, r8, r5
 80027e4:	2d00      	cmp	r5, #0
 80027e6:	f89b 3004 	ldrb.w	r3, [fp, #4]
 80027ea:	462c      	mov	r4, r5
 80027ec:	bfb8      	it	lt
 80027ee:	1cec      	addlt	r4, r5, #3
 80027f0:	10a4      	asrs	r4, r4, #2
 80027f2:	f043 0304 	orr.w	r3, r3, #4
 80027f6:	2c00      	cmp	r4, #0
 80027f8:	f88b 3004 	strb.w	r3, [fp, #4]
 80027fc:	f340 8299 	ble.w	8002d32 <AES_CCM_Encrypt_Append+0x71a>
 8002800:	9b01      	ldr	r3, [sp, #4]
 8002802:	9801      	ldr	r0, [sp, #4]
 8002804:	4443      	add	r3, r8
 8002806:	f810 1008 	ldrb.w	r1, [r0, r8]
 800280a:	78da      	ldrb	r2, [r3, #3]
 800280c:	7898      	ldrb	r0, [r3, #2]
 800280e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002812:	7859      	ldrb	r1, [r3, #1]
 8002814:	ea42 2300 	orr.w	r3, r2, r0, lsl #8
 8002818:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
 800281c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002820:	405a      	eors	r2, r3
 8002822:	2c01      	cmp	r4, #1
 8002824:	930c      	str	r3, [sp, #48]	; 0x30
 8002826:	9210      	str	r2, [sp, #64]	; 0x40
 8002828:	dd3f      	ble.n	80028aa <AES_CCM_Encrypt_Append+0x292>
 800282a:	9b01      	ldr	r3, [sp, #4]
 800282c:	f108 0204 	add.w	r2, r8, #4
 8002830:	9801      	ldr	r0, [sp, #4]
 8002832:	4413      	add	r3, r2
 8002834:	5c81      	ldrb	r1, [r0, r2]
 8002836:	78da      	ldrb	r2, [r3, #3]
 8002838:	7898      	ldrb	r0, [r3, #2]
 800283a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800283e:	7859      	ldrb	r1, [r3, #1]
 8002840:	ea42 2300 	orr.w	r3, r2, r0, lsl #8
 8002844:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 8002848:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800284c:	405a      	eors	r2, r3
 800284e:	2c02      	cmp	r4, #2
 8002850:	930d      	str	r3, [sp, #52]	; 0x34
 8002852:	9211      	str	r2, [sp, #68]	; 0x44
 8002854:	dd29      	ble.n	80028aa <AES_CCM_Encrypt_Append+0x292>
 8002856:	9b01      	ldr	r3, [sp, #4]
 8002858:	f108 0208 	add.w	r2, r8, #8
 800285c:	9801      	ldr	r0, [sp, #4]
 800285e:	4413      	add	r3, r2
 8002860:	5c81      	ldrb	r1, [r0, r2]
 8002862:	78da      	ldrb	r2, [r3, #3]
 8002864:	7898      	ldrb	r0, [r3, #2]
 8002866:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800286a:	7859      	ldrb	r1, [r3, #1]
 800286c:	ea42 2300 	orr.w	r3, r2, r0, lsl #8
 8002870:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8002874:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002878:	405a      	eors	r2, r3
 800287a:	2c03      	cmp	r4, #3
 800287c:	930e      	str	r3, [sp, #56]	; 0x38
 800287e:	9212      	str	r2, [sp, #72]	; 0x48
 8002880:	dd13      	ble.n	80028aa <AES_CCM_Encrypt_Append+0x292>
 8002882:	9b01      	ldr	r3, [sp, #4]
 8002884:	f108 020c 	add.w	r2, r8, #12
 8002888:	9801      	ldr	r0, [sp, #4]
 800288a:	4413      	add	r3, r2
 800288c:	5c81      	ldrb	r1, [r0, r2]
 800288e:	78da      	ldrb	r2, [r3, #3]
 8002890:	7858      	ldrb	r0, [r3, #1]
 8002892:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002896:	7899      	ldrb	r1, [r3, #2]
 8002898:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
 800289c:	f8db 2030 	ldr.w	r2, [fp, #48]	; 0x30
 80028a0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80028a4:	405a      	eors	r2, r3
 80028a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80028a8:	9213      	str	r2, [sp, #76]	; 0x4c
 80028aa:	ebc4 7384 	rsb	r3, r4, r4, lsl #30
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	1c67      	adds	r7, r4, #1
 80028b2:	46a6      	mov	lr, r4
 80028b4:	2100      	movs	r1, #0
 80028b6:	ea4f 068e 	mov.w	r6, lr, lsl #2
 80028ba:	442b      	add	r3, r5
 80028bc:	aa14      	add	r2, sp, #80	; 0x50
 80028be:	4432      	add	r2, r6
 80028c0:	428b      	cmp	r3, r1
 80028c2:	f842 1c20 	str.w	r1, [r2, #-32]
 80028c6:	dd15      	ble.n	80028f4 <AES_CCM_Encrypt_Append+0x2dc>
 80028c8:	9a01      	ldr	r2, [sp, #4]
 80028ca:	4413      	add	r3, r2
 80028cc:	eb08 0206 	add.w	r2, r8, r6
 80028d0:	1898      	adds	r0, r3, r2
 80028d2:	9b01      	ldr	r3, [sp, #4]
 80028d4:	441a      	add	r2, r3
 80028d6:	2318      	movs	r3, #24
 80028d8:	f812 cb01 	ldrb.w	ip, [r2], #1
 80028dc:	fa0c fc03 	lsl.w	ip, ip, r3
 80028e0:	4282      	cmp	r2, r0
 80028e2:	ea81 010c 	eor.w	r1, r1, ip
 80028e6:	f1a3 0308 	sub.w	r3, r3, #8
 80028ea:	d1f5      	bne.n	80028d8 <AES_CCM_Encrypt_Append+0x2c0>
 80028ec:	ab14      	add	r3, sp, #80	; 0x50
 80028ee:	4433      	add	r3, r6
 80028f0:	f843 1c20 	str.w	r1, [r3, #-32]
 80028f4:	eb0b 0e8e 	add.w	lr, fp, lr, lsl #2
 80028f8:	f8de 3024 	ldr.w	r3, [lr, #36]	; 0x24
 80028fc:	a814      	add	r0, sp, #80	; 0x50
 80028fe:	4406      	add	r6, r0
 8002900:	4059      	eors	r1, r3
 8002902:	2f03      	cmp	r7, #3
 8002904:	f846 1c10 	str.w	r1, [r6, #-16]
 8002908:	f300 820f 	bgt.w	8002d2a <AES_CCM_Encrypt_Append+0x712>
 800290c:	00be      	lsls	r6, r7, #2
 800290e:	f1c6 0610 	rsb	r6, r6, #16
 8002912:	00bf      	lsls	r7, r7, #2
 8002914:	a80c      	add	r0, sp, #48	; 0x30
 8002916:	4632      	mov	r2, r6
 8002918:	2100      	movs	r1, #0
 800291a:	4438      	add	r0, r7
 800291c:	f000 fe2e 	bl	800357c <memset>
 8002920:	aa10      	add	r2, sp, #64	; 0x40
 8002922:	9206      	str	r2, [sp, #24]
 8002924:	9806      	ldr	r0, [sp, #24]
 8002926:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800292a:	4632      	mov	r2, r6
 800292c:	4459      	add	r1, fp
 800292e:	4438      	add	r0, r7
 8002930:	f000 fe16 	bl	8003560 <memcpy>
 8002934:	9806      	ldr	r0, [sp, #24]
 8002936:	e001      	b.n	800293c <AES_CCM_Encrypt_Append+0x324>
 8002938:	40023008 	.word	0x40023008
 800293c:	f10b 0648 	add.w	r6, fp, #72	; 0x48
 8002940:	4632      	mov	r2, r6
 8002942:	f10b 0124 	add.w	r1, fp, #36	; 0x24
 8002946:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 800294a:	f7ff fa6b 	bl	8001e24 <AES_general_SW_enc>
 800294e:	4632      	mov	r2, r6
 8002950:	9906      	ldr	r1, [sp, #24]
 8002952:	f10b 0014 	add.w	r0, fp, #20
 8002956:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 800295a:	f7ff fa63 	bl	8001e24 <AES_general_SW_enc>
 800295e:	2c00      	cmp	r4, #0
 8002960:	f340 81e0 	ble.w	8002d24 <AES_CCM_Encrypt_Append+0x70c>
 8002964:	9910      	ldr	r1, [sp, #64]	; 0x40
 8002966:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002968:	9a02      	ldr	r2, [sp, #8]
 800296a:	404b      	eors	r3, r1
 800296c:	4442      	add	r2, r8
 800296e:	0a1e      	lsrs	r6, r3, #8
 8002970:	0c18      	lsrs	r0, r3, #16
 8002972:	0e19      	lsrs	r1, r3, #24
 8002974:	70d3      	strb	r3, [r2, #3]
 8002976:	9b02      	ldr	r3, [sp, #8]
 8002978:	2c01      	cmp	r4, #1
 800297a:	7096      	strb	r6, [r2, #2]
 800297c:	7050      	strb	r0, [r2, #1]
 800297e:	f803 1008 	strb.w	r1, [r3, r8]
 8002982:	dd30      	ble.n	80029e6 <AES_CCM_Encrypt_Append+0x3ce>
 8002984:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002986:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002988:	f108 0104 	add.w	r1, r8, #4
 800298c:	4053      	eors	r3, r2
 800298e:	9a02      	ldr	r2, [sp, #8]
 8002990:	0a1f      	lsrs	r7, r3, #8
 8002992:	440a      	add	r2, r1
 8002994:	0c1e      	lsrs	r6, r3, #16
 8002996:	7097      	strb	r7, [r2, #2]
 8002998:	70d3      	strb	r3, [r2, #3]
 800299a:	7056      	strb	r6, [r2, #1]
 800299c:	9a02      	ldr	r2, [sp, #8]
 800299e:	0e18      	lsrs	r0, r3, #24
 80029a0:	2c02      	cmp	r4, #2
 80029a2:	5450      	strb	r0, [r2, r1]
 80029a4:	dd1f      	ble.n	80029e6 <AES_CCM_Encrypt_Append+0x3ce>
 80029a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80029a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80029aa:	f108 0108 	add.w	r1, r8, #8
 80029ae:	4053      	eors	r3, r2
 80029b0:	9a02      	ldr	r2, [sp, #8]
 80029b2:	0a1f      	lsrs	r7, r3, #8
 80029b4:	440a      	add	r2, r1
 80029b6:	0c1e      	lsrs	r6, r3, #16
 80029b8:	0e18      	lsrs	r0, r3, #24
 80029ba:	70d3      	strb	r3, [r2, #3]
 80029bc:	9b02      	ldr	r3, [sp, #8]
 80029be:	2c03      	cmp	r4, #3
 80029c0:	7097      	strb	r7, [r2, #2]
 80029c2:	7056      	strb	r6, [r2, #1]
 80029c4:	5458      	strb	r0, [r3, r1]
 80029c6:	dd0e      	ble.n	80029e6 <AES_CCM_Encrypt_Append+0x3ce>
 80029c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80029ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80029cc:	f108 010c 	add.w	r1, r8, #12
 80029d0:	4053      	eors	r3, r2
 80029d2:	9a02      	ldr	r2, [sp, #8]
 80029d4:	0a1f      	lsrs	r7, r3, #8
 80029d6:	440a      	add	r2, r1
 80029d8:	0c1e      	lsrs	r6, r3, #16
 80029da:	7097      	strb	r7, [r2, #2]
 80029dc:	70d3      	strb	r3, [r2, #3]
 80029de:	7056      	strb	r6, [r2, #1]
 80029e0:	9a02      	ldr	r2, [sp, #8]
 80029e2:	0e18      	lsrs	r0, r3, #24
 80029e4:	5450      	strb	r0, [r2, r1]
 80029e6:	ebc4 7284 	rsb	r2, r4, r4, lsl #30
 80029ea:	0092      	lsls	r2, r2, #2
 80029ec:	00a4      	lsls	r4, r4, #2
 80029ee:	ab14      	add	r3, sp, #80	; 0x50
 80029f0:	4423      	add	r3, r4
 80029f2:	f853 0c20 	ldr.w	r0, [r3, #-32]
 80029f6:	4415      	add	r5, r2
 80029f8:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80029fc:	2d00      	cmp	r5, #0
 80029fe:	ea80 0003 	eor.w	r0, r0, r3
 8002a02:	dd0e      	ble.n	8002a22 <AES_CCM_Encrypt_Append+0x40a>
 8002a04:	9b02      	ldr	r3, [sp, #8]
 8002a06:	4444      	add	r4, r8
 8002a08:	441d      	add	r5, r3
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	4422      	add	r2, r4
 8002a0e:	2318      	movs	r3, #24
 8002a10:	442c      	add	r4, r5
 8002a12:	fa20 f103 	lsr.w	r1, r0, r3
 8002a16:	f802 1b01 	strb.w	r1, [r2], #1
 8002a1a:	42a2      	cmp	r2, r4
 8002a1c:	f1a3 0308 	sub.w	r3, r3, #8
 8002a20:	d1f7      	bne.n	8002a12 <AES_CCM_Encrypt_Append+0x3fa>
 8002a22:	981e      	ldr	r0, [sp, #120]	; 0x78
 8002a24:	9d04      	ldr	r5, [sp, #16]
 8002a26:	6005      	str	r5, [r0, #0]
 8002a28:	2000      	movs	r0, #0
 8002a2a:	e615      	b.n	8002658 <AES_CCM_Encrypt_Append+0x40>
 8002a2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002a2e:	9d04      	ldr	r5, [sp, #16]
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	930b      	str	r3, [sp, #44]	; 0x2c
 8002a36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 80ad 	beq.w	8002b98 <AES_CCM_Encrypt_Append+0x580>
 8002a3e:	2d0f      	cmp	r5, #15
 8002a40:	f340 817b 	ble.w	8002d3a <AES_CCM_Encrypt_Append+0x722>
 8002a44:	f1a5 0310 	sub.w	r3, r5, #16
 8002a48:	9d01      	ldr	r5, [sp, #4]
 8002a4a:	091b      	lsrs	r3, r3, #4
 8002a4c:	9309      	str	r3, [sp, #36]	; 0x24
 8002a4e:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 8002a52:	f10b 0524 	add.w	r5, fp, #36	; 0x24
 8002a56:	9503      	str	r5, [sp, #12]
 8002a58:	f10b 0548 	add.w	r5, fp, #72	; 0x48
 8002a5c:	9505      	str	r5, [sp, #20]
 8002a5e:	f10b 0514 	add.w	r5, fp, #20
 8002a62:	9508      	str	r5, [sp, #32]
 8002a64:	9d01      	ldr	r5, [sp, #4]
 8002a66:	3311      	adds	r3, #17
 8002a68:	f105 0901 	add.w	r9, r5, #1
 8002a6c:	f8dd a008 	ldr.w	sl, [sp, #8]
 8002a70:	ad10      	add	r5, sp, #64	; 0x40
 8002a72:	9307      	str	r3, [sp, #28]
 8002a74:	9506      	str	r5, [sp, #24]
 8002a76:	f899 2000 	ldrb.w	r2, [r9]
 8002a7a:	f819 1c01 	ldrb.w	r1, [r9, #-1]
 8002a7e:	f899 3002 	ldrb.w	r3, [r9, #2]
 8002a82:	0412      	lsls	r2, r2, #16
 8002a84:	f899 8001 	ldrb.w	r8, [r9, #1]
 8002a88:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 8002a92:	ea42 2808 	orr.w	r8, r2, r8, lsl #8
 8002a96:	ea43 0308 	orr.w	r3, r3, r8
 8002a9a:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
 8002a9e:	f899 2004 	ldrb.w	r2, [r9, #4]
 8002aa2:	f899 1003 	ldrb.w	r1, [r9, #3]
 8002aa6:	f899 3006 	ldrb.w	r3, [r9, #6]
 8002aaa:	0412      	lsls	r2, r2, #16
 8002aac:	f899 7005 	ldrb.w	r7, [r9, #5]
 8002ab0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
 8002aba:	ea42 2707 	orr.w	r7, r2, r7, lsl #8
 8002abe:	433b      	orrs	r3, r7
 8002ac0:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
 8002ac4:	f899 2008 	ldrb.w	r2, [r9, #8]
 8002ac8:	f899 1007 	ldrb.w	r1, [r9, #7]
 8002acc:	f899 300a 	ldrb.w	r3, [r9, #10]
 8002ad0:	0412      	lsls	r2, r2, #16
 8002ad2:	f899 6009 	ldrb.w	r6, [r9, #9]
 8002ad6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002ada:	431a      	orrs	r2, r3
 8002adc:	f8db 302c 	ldr.w	r3, [fp, #44]	; 0x2c
 8002ae0:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8002ae4:	4333      	orrs	r3, r6
 8002ae6:	f8cb 302c 	str.w	r3, [fp, #44]	; 0x2c
 8002aea:	f899 200c 	ldrb.w	r2, [r9, #12]
 8002aee:	f899 100b 	ldrb.w	r1, [r9, #11]
 8002af2:	f899 300e 	ldrb.w	r3, [r9, #14]
 8002af6:	0412      	lsls	r2, r2, #16
 8002af8:	f899 500d 	ldrb.w	r5, [r9, #13]
 8002afc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002b00:	431a      	orrs	r2, r3
 8002b02:	f8db 3030 	ldr.w	r3, [fp, #48]	; 0x30
 8002b06:	ea42 2505 	orr.w	r5, r2, r5, lsl #8
 8002b0a:	9803      	ldr	r0, [sp, #12]
 8002b0c:	432b      	orrs	r3, r5
 8002b0e:	4601      	mov	r1, r0
 8002b10:	f8cb 3030 	str.w	r3, [fp, #48]	; 0x30
 8002b14:	9a05      	ldr	r2, [sp, #20]
 8002b16:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 8002b1a:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8002b1e:	950f      	str	r5, [sp, #60]	; 0x3c
 8002b20:	970d      	str	r7, [sp, #52]	; 0x34
 8002b22:	960e      	str	r6, [sp, #56]	; 0x38
 8002b24:	f7ff f97e 	bl	8001e24 <AES_general_SW_enc>
 8002b28:	9808      	ldr	r0, [sp, #32]
 8002b2a:	9906      	ldr	r1, [sp, #24]
 8002b2c:	9a05      	ldr	r2, [sp, #20]
 8002b2e:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 8002b32:	f7ff f977 	bl	8001e24 <AES_general_SW_enc>
 8002b36:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8002b38:	f8db 3020 	ldr.w	r3, [fp, #32]
 8002b3c:	402c      	ands	r4, r5
 8002b3e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002b40:	0e25      	lsrs	r5, r4, #24
 8002b42:	9812      	ldr	r0, [sp, #72]	; 0x48
 8002b44:	9911      	ldr	r1, [sp, #68]	; 0x44
 8002b46:	3301      	adds	r3, #1
 8002b48:	f8cb 3020 	str.w	r3, [fp, #32]
 8002b4c:	f88a 5003 	strb.w	r5, [sl, #3]
 8002b50:	9d07      	ldr	r5, [sp, #28]
 8002b52:	ea08 0802 	and.w	r8, r8, r2
 8002b56:	4030      	ands	r0, r6
 8002b58:	4039      	ands	r1, r7
 8002b5a:	f109 0910 	add.w	r9, r9, #16
 8002b5e:	0e00      	lsrs	r0, r0, #24
 8002b60:	0e09      	lsrs	r1, r1, #24
 8002b62:	ea4f 6818 	mov.w	r8, r8, lsr #24
 8002b66:	0a22      	lsrs	r2, r4, #8
 8002b68:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8002b6c:	45a9      	cmp	r9, r5
 8002b6e:	f88a 0002 	strb.w	r0, [sl, #2]
 8002b72:	f88a 4006 	strb.w	r4, [sl, #6]
 8002b76:	f88a 1001 	strb.w	r1, [sl, #1]
 8002b7a:	f88a 8000 	strb.w	r8, [sl]
 8002b7e:	f88a 2005 	strb.w	r2, [sl, #5]
 8002b82:	f88a c004 	strb.w	ip, [sl, #4]
 8002b86:	f10a 0a10 	add.w	sl, sl, #16
 8002b8a:	f47f af74 	bne.w	8002a76 <AES_CCM_Encrypt_Append+0x45e>
 8002b8e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8002b90:	1c6b      	adds	r3, r5, #1
 8002b92:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002b96:	e61f      	b.n	80027d8 <AES_CCM_Encrypt_Append+0x1c0>
 8002b98:	2d0f      	cmp	r5, #15
 8002b9a:	f340 80ce 	ble.w	8002d3a <AES_CCM_Encrypt_Append+0x722>
 8002b9e:	f1a5 0210 	sub.w	r2, r5, #16
 8002ba2:	f10b 0524 	add.w	r5, fp, #36	; 0x24
 8002ba6:	9503      	str	r5, [sp, #12]
 8002ba8:	f10b 0548 	add.w	r5, fp, #72	; 0x48
 8002bac:	f022 020f 	bic.w	r2, r2, #15
 8002bb0:	9505      	str	r5, [sp, #20]
 8002bb2:	f10b 0514 	add.w	r5, fp, #20
 8002bb6:	f102 0810 	add.w	r8, r2, #16
 8002bba:	9509      	str	r5, [sp, #36]	; 0x24
 8002bbc:	f8dd a004 	ldr.w	sl, [sp, #4]
 8002bc0:	ad10      	add	r5, sp, #64	; 0x40
 8002bc2:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8002bc6:	469c      	mov	ip, r3
 8002bc8:	9506      	str	r5, [sp, #24]
 8002bca:	f8cd 8020 	str.w	r8, [sp, #32]
 8002bce:	9d01      	ldr	r5, [sp, #4]
 8002bd0:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8002bd4:	f815 100c 	ldrb.w	r1, [r5, ip]
 8002bd8:	f89a 3003 	ldrb.w	r3, [sl, #3]
 8002bdc:	0412      	lsls	r2, r2, #16
 8002bde:	f89a 8002 	ldrb.w	r8, [sl, #2]
 8002be2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002be6:	431a      	orrs	r2, r3
 8002be8:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 8002bec:	ea42 2408 	orr.w	r4, r2, r8, lsl #8
 8002bf0:	4063      	eors	r3, r4
 8002bf2:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
 8002bf6:	f89a 2005 	ldrb.w	r2, [sl, #5]
 8002bfa:	f89a 1004 	ldrb.w	r1, [sl, #4]
 8002bfe:	f89a 3007 	ldrb.w	r3, [sl, #7]
 8002c02:	0412      	lsls	r2, r2, #16
 8002c04:	f89a 7006 	ldrb.w	r7, [sl, #6]
 8002c08:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
 8002c12:	ea42 2707 	orr.w	r7, r2, r7, lsl #8
 8002c16:	407b      	eors	r3, r7
 8002c18:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
 8002c1c:	f89a 2009 	ldrb.w	r2, [sl, #9]
 8002c20:	f89a 1008 	ldrb.w	r1, [sl, #8]
 8002c24:	f89a 300b 	ldrb.w	r3, [sl, #11]
 8002c28:	0412      	lsls	r2, r2, #16
 8002c2a:	f89a 600a 	ldrb.w	r6, [sl, #10]
 8002c2e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002c32:	431a      	orrs	r2, r3
 8002c34:	f8db 302c 	ldr.w	r3, [fp, #44]	; 0x2c
 8002c38:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8002c3c:	4073      	eors	r3, r6
 8002c3e:	f8cb 302c 	str.w	r3, [fp, #44]	; 0x2c
 8002c42:	f89a 200d 	ldrb.w	r2, [sl, #13]
 8002c46:	f89a 100c 	ldrb.w	r1, [sl, #12]
 8002c4a:	f89a 300f 	ldrb.w	r3, [sl, #15]
 8002c4e:	0412      	lsls	r2, r2, #16
 8002c50:	f89a 500e 	ldrb.w	r5, [sl, #14]
 8002c54:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	f8db 3030 	ldr.w	r3, [fp, #48]	; 0x30
 8002c5e:	ea42 2505 	orr.w	r5, r2, r5, lsl #8
 8002c62:	9803      	ldr	r0, [sp, #12]
 8002c64:	406b      	eors	r3, r5
 8002c66:	f8cb 3030 	str.w	r3, [fp, #48]	; 0x30
 8002c6a:	4601      	mov	r1, r0
 8002c6c:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 8002c70:	9a05      	ldr	r2, [sp, #20]
 8002c72:	f8cd c000 	str.w	ip, [sp]
 8002c76:	940c      	str	r4, [sp, #48]	; 0x30
 8002c78:	970d      	str	r7, [sp, #52]	; 0x34
 8002c7a:	960e      	str	r6, [sp, #56]	; 0x38
 8002c7c:	950f      	str	r5, [sp, #60]	; 0x3c
 8002c7e:	f7ff f8d1 	bl	8001e24 <AES_general_SW_enc>
 8002c82:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c84:	9906      	ldr	r1, [sp, #24]
 8002c86:	9a05      	ldr	r2, [sp, #20]
 8002c88:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 8002c8c:	f7ff f8ca 	bl	8001e24 <AES_general_SW_enc>
 8002c90:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8002c92:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002c94:	4068      	eors	r0, r5
 8002c96:	9912      	ldr	r1, [sp, #72]	; 0x48
 8002c98:	f8db 5020 	ldr.w	r5, [fp, #32]
 8002c9c:	405c      	eors	r4, r3
 8002c9e:	4071      	eors	r1, r6
 8002ca0:	ea4f 2814 	mov.w	r8, r4, lsr #8
 8002ca4:	1c6b      	adds	r3, r5, #1
 8002ca6:	0c26      	lsrs	r6, r4, #16
 8002ca8:	f8cb 3020 	str.w	r3, [fp, #32]
 8002cac:	f889 8002 	strb.w	r8, [r9, #2]
 8002cb0:	f889 4003 	strb.w	r4, [r9, #3]
 8002cb4:	f889 6001 	strb.w	r6, [r9, #1]
 8002cb8:	f8dd c000 	ldr.w	ip, [sp]
 8002cbc:	9b02      	ldr	r3, [sp, #8]
 8002cbe:	0e25      	lsrs	r5, r4, #24
 8002cc0:	f803 500c 	strb.w	r5, [r3, ip]
 8002cc4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002cc6:	0a0d      	lsrs	r5, r1, #8
 8002cc8:	f889 500a 	strb.w	r5, [r9, #10]
 8002ccc:	9d08      	ldr	r5, [sp, #32]
 8002cce:	407a      	eors	r2, r7
 8002cd0:	f10c 0c10 	add.w	ip, ip, #16
 8002cd4:	0a07      	lsrs	r7, r0, #8
 8002cd6:	ea4f 4810 	mov.w	r8, r0, lsr #16
 8002cda:	0e06      	lsrs	r6, r0, #24
 8002cdc:	0c0c      	lsrs	r4, r1, #16
 8002cde:	0e0b      	lsrs	r3, r1, #24
 8002ce0:	f889 700e 	strb.w	r7, [r9, #14]
 8002ce4:	f889 000f 	strb.w	r0, [r9, #15]
 8002ce8:	f889 100b 	strb.w	r1, [r9, #11]
 8002cec:	0a17      	lsrs	r7, r2, #8
 8002cee:	0c10      	lsrs	r0, r2, #16
 8002cf0:	0e11      	lsrs	r1, r2, #24
 8002cf2:	45ac      	cmp	ip, r5
 8002cf4:	f889 2007 	strb.w	r2, [r9, #7]
 8002cf8:	f889 800d 	strb.w	r8, [r9, #13]
 8002cfc:	f889 600c 	strb.w	r6, [r9, #12]
 8002d00:	f889 4009 	strb.w	r4, [r9, #9]
 8002d04:	f889 3008 	strb.w	r3, [r9, #8]
 8002d08:	f889 7006 	strb.w	r7, [r9, #6]
 8002d0c:	f889 0005 	strb.w	r0, [r9, #5]
 8002d10:	f889 1004 	strb.w	r1, [r9, #4]
 8002d14:	f10a 0a10 	add.w	sl, sl, #16
 8002d18:	f109 0910 	add.w	r9, r9, #16
 8002d1c:	f47f af57 	bne.w	8002bce <AES_CCM_Encrypt_Append+0x5b6>
 8002d20:	46a8      	mov	r8, r5
 8002d22:	e559      	b.n	80027d8 <AES_CCM_Encrypt_Append+0x1c0>
 8002d24:	2400      	movs	r4, #0
 8002d26:	4622      	mov	r2, r4
 8002d28:	e660      	b.n	80029ec <AES_CCM_Encrypt_Append+0x3d4>
 8002d2a:	a910      	add	r1, sp, #64	; 0x40
 8002d2c:	9106      	str	r1, [sp, #24]
 8002d2e:	4608      	mov	r0, r1
 8002d30:	e604      	b.n	800293c <AES_CCM_Encrypt_Append+0x324>
 8002d32:	2300      	movs	r3, #0
 8002d34:	469e      	mov	lr, r3
 8002d36:	2701      	movs	r7, #1
 8002d38:	e5bc      	b.n	80028b4 <AES_CCM_Encrypt_Append+0x29c>
 8002d3a:	f04f 0800 	mov.w	r8, #0
 8002d3e:	e54b      	b.n	80027d8 <AES_CCM_Encrypt_Append+0x1c0>

08002d40 <AES_CCM_Encrypt_Finish>:
 8002d40:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8002d44:	2300      	movs	r3, #0
 8002d46:	b084      	sub	sp, #16
 8002d48:	4606      	mov	r6, r0
 8002d4a:	4689      	mov	r9, r1
 8002d4c:	4614      	mov	r4, r2
 8002d4e:	9300      	str	r3, [sp, #0]
 8002d50:	9301      	str	r3, [sp, #4]
 8002d52:	9302      	str	r3, [sp, #8]
 8002d54:	9303      	str	r3, [sp, #12]
 8002d56:	2800      	cmp	r0, #0
 8002d58:	d040      	beq.n	8002ddc <AES_CCM_Encrypt_Finish+0x9c>
 8002d5a:	2900      	cmp	r1, #0
 8002d5c:	d03e      	beq.n	8002ddc <AES_CCM_Encrypt_Finish+0x9c>
 8002d5e:	2a00      	cmp	r2, #0
 8002d60:	d03c      	beq.n	8002ddc <AES_CCM_Encrypt_Finish+0x9c>
 8002d62:	7901      	ldrb	r1, [r0, #4]
 8002d64:	6902      	ldr	r2, [r0, #16]
 8002d66:	f041 0102 	orr.w	r1, r1, #2
 8002d6a:	2a0b      	cmp	r2, #11
 8002d6c:	7101      	strb	r1, [r0, #4]
 8002d6e:	dc3a      	bgt.n	8002de6 <AES_CCM_Encrypt_Finish+0xa6>
 8002d70:	6233      	str	r3, [r6, #32]
 8002d72:	f106 0014 	add.w	r0, r6, #20
 8002d76:	4669      	mov	r1, sp
 8002d78:	f106 0248 	add.w	r2, r6, #72	; 0x48
 8002d7c:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8002d7e:	f7ff f851 	bl	8001e24 <AES_general_SW_enc>
 8002d82:	9a00      	ldr	r2, [sp, #0]
 8002d84:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8002d86:	9b02      	ldr	r3, [sp, #8]
 8002d88:	4057      	eors	r7, r2
 8002d8a:	6ab5      	ldr	r5, [r6, #40]	; 0x28
 8002d8c:	9a01      	ldr	r2, [sp, #4]
 8002d8e:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8002d90:	4055      	eors	r5, r2
 8002d92:	4059      	eors	r1, r3
 8002d94:	9a03      	ldr	r2, [sp, #12]
 8002d96:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8002d98:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002d9a:	2800      	cmp	r0, #0
 8002d9c:	ea82 0c03 	eor.w	ip, r2, r3
 8002da0:	9700      	str	r7, [sp, #0]
 8002da2:	9501      	str	r5, [sp, #4]
 8002da4:	9102      	str	r1, [sp, #8]
 8002da6:	f8cd c00c 	str.w	ip, [sp, #12]
 8002daa:	dd12      	ble.n	8002dd2 <AES_CCM_Encrypt_Finish+0x92>
 8002dac:	2300      	movs	r3, #0
 8002dae:	f023 0203 	bic.w	r2, r3, #3
 8002db2:	a904      	add	r1, sp, #16
 8002db4:	43d8      	mvns	r0, r3
 8002db6:	440a      	add	r2, r1
 8002db8:	f852 1c10 	ldr.w	r1, [r2, #-16]
 8002dbc:	f000 0203 	and.w	r2, r0, #3
 8002dc0:	00d2      	lsls	r2, r2, #3
 8002dc2:	fa21 f202 	lsr.w	r2, r1, r2
 8002dc6:	f809 2003 	strb.w	r2, [r9, r3]
 8002dca:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8002dcc:	3301      	adds	r3, #1
 8002dce:	4298      	cmp	r0, r3
 8002dd0:	dced      	bgt.n	8002dae <AES_CCM_Encrypt_Finish+0x6e>
 8002dd2:	6020      	str	r0, [r4, #0]
 8002dd4:	2000      	movs	r0, #0
 8002dd6:	b004      	add	sp, #16
 8002dd8:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 8002ddc:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 8002de0:	b004      	add	sp, #16
 8002de2:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
 8002de6:	f1c2 020f 	rsb	r2, r2, #15
 8002dea:	f04f 33ff 	mov.w	r3, #4294967295
 8002dee:	00d2      	lsls	r2, r2, #3
 8002df0:	fa03 f202 	lsl.w	r2, r3, r2
 8002df4:	6a03      	ldr	r3, [r0, #32]
 8002df6:	4013      	ands	r3, r2
 8002df8:	e7ba      	b.n	8002d70 <AES_CCM_Encrypt_Finish+0x30>
 8002dfa:	bf00      	nop

08002dfc <AES_CCM_Decrypt_Init>:
 8002dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dfe:	2300      	movs	r3, #0
 8002e00:	b085      	sub	sp, #20
 8002e02:	4604      	mov	r4, r0
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	9301      	str	r3, [sp, #4]
 8002e08:	9302      	str	r3, [sp, #8]
 8002e0a:	9303      	str	r3, [sp, #12]
 8002e0c:	b148      	cbz	r0, 8002e22 <AES_CCM_Decrypt_Init+0x26>
 8002e0e:	b141      	cbz	r1, 8002e22 <AES_CCM_Decrypt_Init+0x26>
 8002e10:	b13a      	cbz	r2, 8002e22 <AES_CCM_Decrypt_Init+0x26>
 8002e12:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8002e14:	1f03      	subs	r3, r0, #4
 8002e16:	2b0c      	cmp	r3, #12
 8002e18:	d907      	bls.n	8002e2a <AES_CCM_Decrypt_Init+0x2e>
 8002e1a:	f640 401f 	movw	r0, #3103	; 0xc1f
 8002e1e:	b005      	add	sp, #20
 8002e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e22:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 8002e26:	b005      	add	sp, #20
 8002e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e2a:	07c7      	lsls	r7, r0, #31
 8002e2c:	d4f5      	bmi.n	8002e1a <AES_CCM_Decrypt_Init+0x1e>
 8002e2e:	6925      	ldr	r5, [r4, #16]
 8002e30:	1feb      	subs	r3, r5, #7
 8002e32:	2b06      	cmp	r3, #6
 8002e34:	d8f1      	bhi.n	8002e1a <AES_CCM_Decrypt_Init+0x1e>
 8002e36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002e38:	f023 0608 	bic.w	r6, r3, #8
 8002e3c:	2e10      	cmp	r6, #16
 8002e3e:	d001      	beq.n	8002e44 <AES_CCM_Decrypt_Init+0x48>
 8002e40:	2b20      	cmp	r3, #32
 8002e42:	d1ea      	bne.n	8002e1a <AES_CCM_Decrypt_Init+0x1e>
 8002e44:	7926      	ldrb	r6, [r4, #4]
 8002e46:	60e2      	str	r2, [r4, #12]
 8002e48:	f026 0716 	bic.w	r7, r6, #22
 8002e4c:	07f6      	lsls	r6, r6, #31
 8002e4e:	7127      	strb	r7, [r4, #4]
 8002e50:	f104 0748 	add.w	r7, r4, #72	; 0x48
 8002e54:	f140 80ad 	bpl.w	8002fb2 <AES_CCM_Decrypt_Init+0x1b6>
 8002e58:	b2c0      	uxtb	r0, r0
 8002e5a:	1e86      	subs	r6, r0, #2
 8002e5c:	f1c5 010e 	rsb	r1, r5, #14
 8002e60:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002e62:	f3c6 0642 	ubfx	r6, r6, #1, #3
 8002e66:	f001 0107 	and.w	r1, r1, #7
 8002e6a:	ea41 01c6 	orr.w	r1, r1, r6, lsl #3
 8002e6e:	b108      	cbz	r0, 8002e74 <AES_CCM_Decrypt_Init+0x78>
 8002e70:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8002e74:	7856      	ldrb	r6, [r2, #1]
 8002e76:	f892 e000 	ldrb.w	lr, [r2]
 8002e7a:	7890      	ldrb	r0, [r2, #2]
 8002e7c:	0236      	lsls	r6, r6, #8
 8002e7e:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
 8002e82:	4330      	orrs	r0, r6
 8002e84:	ea40 6101 	orr.w	r1, r0, r1, lsl #24
 8002e88:	9100      	str	r1, [sp, #0]
 8002e8a:	7910      	ldrb	r0, [r2, #4]
 8002e8c:	78d6      	ldrb	r6, [r2, #3]
 8002e8e:	0400      	lsls	r0, r0, #16
 8002e90:	7991      	ldrb	r1, [r2, #6]
 8002e92:	ea40 6606 	orr.w	r6, r0, r6, lsl #24
 8002e96:	7950      	ldrb	r0, [r2, #5]
 8002e98:	4331      	orrs	r1, r6
 8002e9a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8002e9e:	2d07      	cmp	r5, #7
 8002ea0:	9101      	str	r1, [sp, #4]
 8002ea2:	dd17      	ble.n	8002ed4 <AES_CCM_Decrypt_Init+0xd8>
 8002ea4:	f1a5 0e07 	sub.w	lr, r5, #7
 8002ea8:	2000      	movs	r0, #0
 8002eaa:	1815      	adds	r5, r2, r0
 8002eac:	43c1      	mvns	r1, r0
 8002eae:	79ee      	ldrb	r6, [r5, #7]
 8002eb0:	f001 0103 	and.w	r1, r1, #3
 8002eb4:	00c9      	lsls	r1, r1, #3
 8002eb6:	fa06 f101 	lsl.w	r1, r6, r1
 8002eba:	f020 0503 	bic.w	r5, r0, #3
 8002ebe:	ae04      	add	r6, sp, #16
 8002ec0:	3508      	adds	r5, #8
 8002ec2:	4435      	add	r5, r6
 8002ec4:	f855 6c10 	ldr.w	r6, [r5, #-16]
 8002ec8:	3001      	adds	r0, #1
 8002eca:	430e      	orrs	r6, r1
 8002ecc:	4570      	cmp	r0, lr
 8002ece:	f845 6c10 	str.w	r6, [r5, #-16]
 8002ed2:	d1ea      	bne.n	8002eaa <AES_CCM_Decrypt_Init+0xae>
 8002ed4:	9803      	ldr	r0, [sp, #12]
 8002ed6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002ed8:	463a      	mov	r2, r7
 8002eda:	ea40 0501 	orr.w	r5, r0, r1
 8002ede:	f104 0124 	add.w	r1, r4, #36	; 0x24
 8002ee2:	4668      	mov	r0, sp
 8002ee4:	9503      	str	r5, [sp, #12]
 8002ee6:	f7fe ff9d 	bl	8001e24 <AES_general_SW_enc>
 8002eea:	68e6      	ldr	r6, [r4, #12]
 8002eec:	6927      	ldr	r7, [r4, #16]
 8002eee:	7872      	ldrb	r2, [r6, #1]
 8002ef0:	7831      	ldrb	r1, [r6, #0]
 8002ef2:	78b3      	ldrb	r3, [r6, #2]
 8002ef4:	0212      	lsls	r2, r2, #8
 8002ef6:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 8002efa:	f1c7 020e 	rsb	r2, r7, #14
 8002efe:	430b      	orrs	r3, r1
 8002f00:	f002 0207 	and.w	r2, r2, #7
 8002f04:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002f08:	6163      	str	r3, [r4, #20]
 8002f0a:	7932      	ldrb	r2, [r6, #4]
 8002f0c:	78f1      	ldrb	r1, [r6, #3]
 8002f0e:	79b3      	ldrb	r3, [r6, #6]
 8002f10:	0412      	lsls	r2, r2, #16
 8002f12:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8002f16:	7972      	ldrb	r2, [r6, #5]
 8002f18:	430b      	orrs	r3, r1
 8002f1a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8002f1e:	2f07      	cmp	r7, #7
 8002f20:	f04f 0300 	mov.w	r3, #0
 8002f24:	61a2      	str	r2, [r4, #24]
 8002f26:	61e3      	str	r3, [r4, #28]
 8002f28:	6223      	str	r3, [r4, #32]
 8002f2a:	dd1f      	ble.n	8002f6c <AES_CCM_Decrypt_Init+0x170>
 8002f2c:	3f07      	subs	r7, #7
 8002f2e:	469c      	mov	ip, r3
 8002f30:	e007      	b.n	8002f42 <AES_CCM_Decrypt_Init+0x146>
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	bfb8      	it	lt
 8002f36:	1cda      	addlt	r2, r3, #3
 8002f38:	f022 0203 	bic.w	r2, r2, #3
 8002f3c:	4422      	add	r2, r4
 8002f3e:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 8002f42:	18f5      	adds	r5, r6, r3
 8002f44:	43d8      	mvns	r0, r3
 8002f46:	79e9      	ldrb	r1, [r5, #7]
 8002f48:	f000 0003 	and.w	r0, r0, #3
 8002f4c:	00c0      	lsls	r0, r0, #3
 8002f4e:	4081      	lsls	r1, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	461a      	mov	r2, r3
 8002f54:	bfb8      	it	lt
 8002f56:	1cda      	addlt	r2, r3, #3
 8002f58:	f022 0203 	bic.w	r2, r2, #3
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	4422      	add	r2, r4
 8002f60:	ea4c 0101 	orr.w	r1, ip, r1
 8002f64:	42bb      	cmp	r3, r7
 8002f66:	61d1      	str	r1, [r2, #28]
 8002f68:	461a      	mov	r2, r3
 8002f6a:	d1e2      	bne.n	8002f32 <AES_CCM_Decrypt_Init+0x136>
 8002f6c:	6a23      	ldr	r3, [r4, #32]
 8002f6e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002f70:	f043 0301 	orr.w	r3, r3, #1
 8002f74:	6223      	str	r3, [r4, #32]
 8002f76:	2800      	cmp	r0, #0
 8002f78:	f43f af55 	beq.w	8002e26 <AES_CCM_Decrypt_Init+0x2a>
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	f5b0 4f7f 	cmp.w	r0, #65280	; 0xff00
 8002f82:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
 8002f86:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
 8002f8a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 8002f8e:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
 8002f92:	db19      	blt.n	8002fc8 <AES_CCM_Decrypt_Init+0x1cc>
 8002f94:	0c02      	lsrs	r2, r0, #16
 8002f96:	ea6f 32c2 	mvn.w	r2, r2, lsl #15
 8002f9a:	0400      	lsls	r0, r0, #16
 8002f9c:	ea6f 32d2 	mvn.w	r2, r2, lsr #15
 8002fa0:	2106      	movs	r1, #6
 8002fa2:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
 8002fa6:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
 8002faa:	4618      	mov	r0, r3
 8002fac:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
 8002fb0:	e739      	b.n	8002e26 <AES_CCM_Decrypt_Init+0x2a>
 8002fb2:	4608      	mov	r0, r1
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	60a1      	str	r1, [r4, #8]
 8002fb8:	4639      	mov	r1, r7
 8002fba:	f7fe ff15 	bl	8001de8 <AES_keyschedule_enc>
 8002fbe:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002fc0:	6925      	ldr	r5, [r4, #16]
 8002fc2:	68e2      	ldr	r2, [r4, #12]
 8002fc4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002fc6:	e747      	b.n	8002e58 <AES_CCM_Decrypt_Init+0x5c>
 8002fc8:	0400      	lsls	r0, r0, #16
 8002fca:	2202      	movs	r2, #2
 8002fcc:	f8c4 0138 	str.w	r0, [r4, #312]	; 0x138
 8002fd0:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	e726      	b.n	8002e26 <AES_CCM_Decrypt_Init+0x2a>

08002fd8 <AES_CCM_Decrypt_Append>:
 8002fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fdc:	4606      	mov	r6, r0
 8002fde:	b08d      	sub	sp, #52	; 0x34
 8002fe0:	2000      	movs	r0, #0
 8002fe2:	460f      	mov	r7, r1
 8002fe4:	9200      	str	r2, [sp, #0]
 8002fe6:	4698      	mov	r8, r3
 8002fe8:	9008      	str	r0, [sp, #32]
 8002fea:	9009      	str	r0, [sp, #36]	; 0x24
 8002fec:	900a      	str	r0, [sp, #40]	; 0x28
 8002fee:	900b      	str	r0, [sp, #44]	; 0x2c
 8002ff0:	b16e      	cbz	r6, 800300e <AES_CCM_Decrypt_Append+0x36>
 8002ff2:	b161      	cbz	r1, 800300e <AES_CCM_Decrypt_Append+0x36>
 8002ff4:	b15b      	cbz	r3, 800300e <AES_CCM_Decrypt_Append+0x36>
 8002ff6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8002ff8:	b14a      	cbz	r2, 800300e <AES_CCM_Decrypt_Append+0x36>
 8002ffa:	f896 c004 	ldrb.w	ip, [r6, #4]
 8002ffe:	f01c 0c06 	ands.w	ip, ip, #6
 8003002:	d009      	beq.n	8003018 <AES_CCM_Decrypt_Append+0x40>
 8003004:	f640 401e 	movw	r0, #3102	; 0xc1e
 8003008:	b00d      	add	sp, #52	; 0x34
 800300a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800300e:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 8003012:	b00d      	add	sp, #52	; 0x34
 8003014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003018:	9b00      	ldr	r3, [sp, #0]
 800301a:	2b0f      	cmp	r3, #15
 800301c:	f340 81aa 	ble.w	8003374 <AES_CCM_Decrypt_Append+0x39c>
 8003020:	3b10      	subs	r3, #16
 8003022:	f023 030f 	bic.w	r3, r3, #15
 8003026:	f106 0214 	add.w	r2, r6, #20
 800302a:	f103 0b10 	add.w	fp, r3, #16
 800302e:	9202      	str	r2, [sp, #8]
 8003030:	f106 0324 	add.w	r3, r6, #36	; 0x24
 8003034:	aa04      	add	r2, sp, #16
 8003036:	46e2      	mov	sl, ip
 8003038:	f106 0948 	add.w	r9, r6, #72	; 0x48
 800303c:	9303      	str	r3, [sp, #12]
 800303e:	460d      	mov	r5, r1
 8003040:	4644      	mov	r4, r8
 8003042:	9201      	str	r2, [sp, #4]
 8003044:	9802      	ldr	r0, [sp, #8]
 8003046:	a908      	add	r1, sp, #32
 8003048:	464a      	mov	r2, r9
 800304a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800304c:	f7fe feea 	bl	8001e24 <AES_general_SW_enc>
 8003050:	6a32      	ldr	r2, [r6, #32]
 8003052:	9b08      	ldr	r3, [sp, #32]
 8003054:	3201      	adds	r2, #1
 8003056:	6232      	str	r2, [r6, #32]
 8003058:	7868      	ldrb	r0, [r5, #1]
 800305a:	f817 200a 	ldrb.w	r2, [r7, sl]
 800305e:	78e9      	ldrb	r1, [r5, #3]
 8003060:	0400      	lsls	r0, r0, #16
 8003062:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8003066:	78aa      	ldrb	r2, [r5, #2]
 8003068:	4308      	orrs	r0, r1
 800306a:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 800306e:	4058      	eors	r0, r3
 8003070:	0a01      	lsrs	r1, r0, #8
 8003072:	0c02      	lsrs	r2, r0, #16
 8003074:	0e03      	lsrs	r3, r0, #24
 8003076:	70e0      	strb	r0, [r4, #3]
 8003078:	70a1      	strb	r1, [r4, #2]
 800307a:	7062      	strb	r2, [r4, #1]
 800307c:	f808 300a 	strb.w	r3, [r8, sl]
 8003080:	796b      	ldrb	r3, [r5, #5]
 8003082:	7929      	ldrb	r1, [r5, #4]
 8003084:	79ea      	ldrb	r2, [r5, #7]
 8003086:	041b      	lsls	r3, r3, #16
 8003088:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800308c:	79a9      	ldrb	r1, [r5, #6]
 800308e:	4313      	orrs	r3, r2
 8003090:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003092:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003096:	4053      	eors	r3, r2
 8003098:	0a1a      	lsrs	r2, r3, #8
 800309a:	f8d6 e024 	ldr.w	lr, [r6, #36]	; 0x24
 800309e:	0c19      	lsrs	r1, r3, #16
 80030a0:	71a2      	strb	r2, [r4, #6]
 80030a2:	0e1a      	lsrs	r2, r3, #24
 80030a4:	71e3      	strb	r3, [r4, #7]
 80030a6:	7161      	strb	r1, [r4, #5]
 80030a8:	7122      	strb	r2, [r4, #4]
 80030aa:	7a6a      	ldrb	r2, [r5, #9]
 80030ac:	7a29      	ldrb	r1, [r5, #8]
 80030ae:	0412      	lsls	r2, r2, #16
 80030b0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80030b4:	7ae9      	ldrb	r1, [r5, #11]
 80030b6:	ea80 0e0e 	eor.w	lr, r0, lr
 80030ba:	430a      	orrs	r2, r1
 80030bc:	7aa9      	ldrb	r1, [r5, #10]
 80030be:	9008      	str	r0, [sp, #32]
 80030c0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80030c2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80030c6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80030c8:	4042      	eors	r2, r0
 80030ca:	4059      	eors	r1, r3
 80030cc:	0a10      	lsrs	r0, r2, #8
 80030ce:	9309      	str	r3, [sp, #36]	; 0x24
 80030d0:	f8cd e010 	str.w	lr, [sp, #16]
 80030d4:	0c13      	lsrs	r3, r2, #16
 80030d6:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80030da:	72e2      	strb	r2, [r4, #11]
 80030dc:	920a      	str	r2, [sp, #40]	; 0x28
 80030de:	9105      	str	r1, [sp, #20]
 80030e0:	72a0      	strb	r0, [r4, #10]
 80030e2:	f884 e008 	strb.w	lr, [r4, #8]
 80030e6:	7263      	strb	r3, [r4, #9]
 80030e8:	7b69      	ldrb	r1, [r5, #13]
 80030ea:	7b28      	ldrb	r0, [r5, #12]
 80030ec:	7beb      	ldrb	r3, [r5, #15]
 80030ee:	0409      	lsls	r1, r1, #16
 80030f0:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
 80030f4:	7ba8      	ldrb	r0, [r5, #14]
 80030f6:	4319      	orrs	r1, r3
 80030f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80030fa:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 80030fe:	4059      	eors	r1, r3
 8003100:	0a0b      	lsrs	r3, r1, #8
 8003102:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8003104:	ea4f 4e11 	mov.w	lr, r1, lsr #16
 8003108:	73a3      	strb	r3, [r4, #14]
 800310a:	0e0b      	lsrs	r3, r1, #24
 800310c:	73e1      	strb	r1, [r4, #15]
 800310e:	f884 e00d 	strb.w	lr, [r4, #13]
 8003112:	7323      	strb	r3, [r4, #12]
 8003114:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003116:	4042      	eors	r2, r0
 8003118:	ea81 0e03 	eor.w	lr, r1, r3
 800311c:	910b      	str	r1, [sp, #44]	; 0x2c
 800311e:	9206      	str	r2, [sp, #24]
 8003120:	f10a 0a10 	add.w	sl, sl, #16
 8003124:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8003126:	9801      	ldr	r0, [sp, #4]
 8003128:	9903      	ldr	r1, [sp, #12]
 800312a:	464a      	mov	r2, r9
 800312c:	f8cd e01c 	str.w	lr, [sp, #28]
 8003130:	f7fe fe78 	bl	8001e24 <AES_general_SW_enc>
 8003134:	45da      	cmp	sl, fp
 8003136:	f105 0510 	add.w	r5, r5, #16
 800313a:	f104 0410 	add.w	r4, r4, #16
 800313e:	d181      	bne.n	8003044 <AES_CCM_Decrypt_Append+0x6c>
 8003140:	9b00      	ldr	r3, [sp, #0]
 8003142:	459b      	cmp	fp, r3
 8003144:	db04      	blt.n	8003150 <AES_CCM_Decrypt_Append+0x178>
 8003146:	9a00      	ldr	r2, [sp, #0]
 8003148:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800314a:	2000      	movs	r0, #0
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	e760      	b.n	8003012 <AES_CCM_Decrypt_Append+0x3a>
 8003150:	7933      	ldrb	r3, [r6, #4]
 8003152:	f106 0a48 	add.w	sl, r6, #72	; 0x48
 8003156:	f043 0304 	orr.w	r3, r3, #4
 800315a:	7133      	strb	r3, [r6, #4]
 800315c:	4652      	mov	r2, sl
 800315e:	a908      	add	r1, sp, #32
 8003160:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8003162:	f106 0014 	add.w	r0, r6, #20
 8003166:	f7fe fe5d 	bl	8001e24 <AES_general_SW_enc>
 800316a:	9a00      	ldr	r2, [sp, #0]
 800316c:	ebcb 0102 	rsb	r1, fp, r2
 8003170:	2900      	cmp	r1, #0
 8003172:	460b      	mov	r3, r1
 8003174:	bfb8      	it	lt
 8003176:	1ccb      	addlt	r3, r1, #3
 8003178:	109b      	asrs	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	f340 80fc 	ble.w	8003378 <AES_CCM_Decrypt_Append+0x3a0>
 8003180:	f10b 0503 	add.w	r5, fp, #3
 8003184:	5d7a      	ldrb	r2, [r7, r5]
 8003186:	f817 c00b 	ldrb.w	ip, [r7, fp]
 800318a:	f10b 0402 	add.w	r4, fp, #2
 800318e:	f817 e004 	ldrb.w	lr, [r7, r4]
 8003192:	f10b 0001 	add.w	r0, fp, #1
 8003196:	ea42 620c 	orr.w	r2, r2, ip, lsl #24
 800319a:	f817 c000 	ldrb.w	ip, [r7, r0]
 800319e:	ea42 2e0e 	orr.w	lr, r2, lr, lsl #8
 80031a2:	9a08      	ldr	r2, [sp, #32]
 80031a4:	ea4e 4e0c 	orr.w	lr, lr, ip, lsl #16
 80031a8:	ea8e 0202 	eor.w	r2, lr, r2
 80031ac:	f808 2005 	strb.w	r2, [r8, r5]
 80031b0:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 80031b4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80031b8:	0e15      	lsrs	r5, r2, #24
 80031ba:	f808 c004 	strb.w	ip, [r8, r4]
 80031be:	f808 e000 	strb.w	lr, [r8, r0]
 80031c2:	f808 500b 	strb.w	r5, [r8, fp]
 80031c6:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80031c8:	9208      	str	r2, [sp, #32]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	ea82 0200 	eor.w	r2, r2, r0
 80031d0:	9204      	str	r2, [sp, #16]
 80031d2:	f340 8087 	ble.w	80032e4 <AES_CCM_Decrypt_Append+0x30c>
 80031d6:	f10b 0004 	add.w	r0, fp, #4
 80031da:	f10b 0e07 	add.w	lr, fp, #7
 80031de:	f817 9000 	ldrb.w	r9, [r7, r0]
 80031e2:	f817 200e 	ldrb.w	r2, [r7, lr]
 80031e6:	f10b 0506 	add.w	r5, fp, #6
 80031ea:	f817 c005 	ldrb.w	ip, [r7, r5]
 80031ee:	f10b 0405 	add.w	r4, fp, #5
 80031f2:	ea42 6209 	orr.w	r2, r2, r9, lsl #24
 80031f6:	f817 9004 	ldrb.w	r9, [r7, r4]
 80031fa:	ea42 2c0c 	orr.w	ip, r2, ip, lsl #8
 80031fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003200:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
 8003204:	ea8c 0202 	eor.w	r2, ip, r2
 8003208:	f808 200e 	strb.w	r2, [r8, lr]
 800320c:	ea4f 2912 	mov.w	r9, r2, lsr #8
 8003210:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8003214:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8003218:	f808 9005 	strb.w	r9, [r8, r5]
 800321c:	f808 c004 	strb.w	ip, [r8, r4]
 8003220:	f808 e000 	strb.w	lr, [r8, r0]
 8003224:	6ab0      	ldr	r0, [r6, #40]	; 0x28
 8003226:	9209      	str	r2, [sp, #36]	; 0x24
 8003228:	2b02      	cmp	r3, #2
 800322a:	ea82 0200 	eor.w	r2, r2, r0
 800322e:	9205      	str	r2, [sp, #20]
 8003230:	dd58      	ble.n	80032e4 <AES_CCM_Decrypt_Append+0x30c>
 8003232:	f10b 0008 	add.w	r0, fp, #8
 8003236:	f10b 0e0b 	add.w	lr, fp, #11
 800323a:	f817 9000 	ldrb.w	r9, [r7, r0]
 800323e:	f817 200e 	ldrb.w	r2, [r7, lr]
 8003242:	f10b 050a 	add.w	r5, fp, #10
 8003246:	f817 c005 	ldrb.w	ip, [r7, r5]
 800324a:	f10b 0409 	add.w	r4, fp, #9
 800324e:	ea42 6209 	orr.w	r2, r2, r9, lsl #24
 8003252:	f817 9004 	ldrb.w	r9, [r7, r4]
 8003256:	ea42 2c0c 	orr.w	ip, r2, ip, lsl #8
 800325a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800325c:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
 8003260:	ea8c 0202 	eor.w	r2, ip, r2
 8003264:	f808 200e 	strb.w	r2, [r8, lr]
 8003268:	ea4f 2912 	mov.w	r9, r2, lsr #8
 800326c:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8003270:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8003274:	f808 9005 	strb.w	r9, [r8, r5]
 8003278:	f808 c004 	strb.w	ip, [r8, r4]
 800327c:	f808 e000 	strb.w	lr, [r8, r0]
 8003280:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8003282:	920a      	str	r2, [sp, #40]	; 0x28
 8003284:	2b03      	cmp	r3, #3
 8003286:	ea82 0200 	eor.w	r2, r2, r0
 800328a:	9206      	str	r2, [sp, #24]
 800328c:	dd2a      	ble.n	80032e4 <AES_CCM_Decrypt_Append+0x30c>
 800328e:	f10b 000c 	add.w	r0, fp, #12
 8003292:	f10b 0e0f 	add.w	lr, fp, #15
 8003296:	f817 9000 	ldrb.w	r9, [r7, r0]
 800329a:	f817 200e 	ldrb.w	r2, [r7, lr]
 800329e:	f10b 040d 	add.w	r4, fp, #13
 80032a2:	f817 c004 	ldrb.w	ip, [r7, r4]
 80032a6:	f10b 050e 	add.w	r5, fp, #14
 80032aa:	ea42 6209 	orr.w	r2, r2, r9, lsl #24
 80032ae:	f817 9005 	ldrb.w	r9, [r7, r5]
 80032b2:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
 80032b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80032b8:	ea4c 2c09 	orr.w	ip, ip, r9, lsl #8
 80032bc:	ea8c 0202 	eor.w	r2, ip, r2
 80032c0:	f808 200e 	strb.w	r2, [r8, lr]
 80032c4:	ea4f 2912 	mov.w	r9, r2, lsr #8
 80032c8:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80032cc:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80032d0:	f808 9005 	strb.w	r9, [r8, r5]
 80032d4:	f808 c004 	strb.w	ip, [r8, r4]
 80032d8:	f808 e000 	strb.w	lr, [r8, r0]
 80032dc:	6b30      	ldr	r0, [r6, #48]	; 0x30
 80032de:	920b      	str	r2, [sp, #44]	; 0x2c
 80032e0:	4042      	eors	r2, r0
 80032e2:	9207      	str	r2, [sp, #28]
 80032e4:	ebc3 7283 	rsb	r2, r3, r3, lsl #30
 80032e8:	0092      	lsls	r2, r2, #2
 80032ea:	f103 0c01 	add.w	ip, r3, #1
 80032ee:	eb06 0083 	add.w	r0, r6, r3, lsl #2
 80032f2:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4411      	add	r1, r2
 80032fa:	a80c      	add	r0, sp, #48	; 0x30
 80032fc:	4418      	add	r0, r3
 80032fe:	2900      	cmp	r1, #0
 8003300:	f840 ec20 	str.w	lr, [r0, #-32]
 8003304:	dd1f      	ble.n	8003346 <AES_CCM_Decrypt_Append+0x36e>
 8003306:	eb0b 0203 	add.w	r2, fp, r3
 800330a:	f850 4c10 	ldr.w	r4, [r0, #-16]
 800330e:	4417      	add	r7, r2
 8003310:	4490      	add	r8, r2
 8003312:	2018      	movs	r0, #24
 8003314:	2200      	movs	r2, #0
 8003316:	5cbd      	ldrb	r5, [r7, r2]
 8003318:	4085      	lsls	r5, r0
 800331a:	406c      	eors	r4, r5
 800331c:	fa24 f500 	lsr.w	r5, r4, r0
 8003320:	fa5f f985 	uxtb.w	r9, r5
 8003324:	fa09 f900 	lsl.w	r9, r9, r0
 8003328:	f808 5002 	strb.w	r5, [r8, r2]
 800332c:	3201      	adds	r2, #1
 800332e:	428a      	cmp	r2, r1
 8003330:	ea8e 0e09 	eor.w	lr, lr, r9
 8003334:	f1a0 0008 	sub.w	r0, r0, #8
 8003338:	d1ed      	bne.n	8003316 <AES_CCM_Decrypt_Append+0x33e>
 800333a:	aa0c      	add	r2, sp, #48	; 0x30
 800333c:	4413      	add	r3, r2
 800333e:	f843 4c10 	str.w	r4, [r3, #-16]
 8003342:	f843 ec20 	str.w	lr, [r3, #-32]
 8003346:	f1bc 0f03 	cmp.w	ip, #3
 800334a:	dc1a      	bgt.n	8003382 <AES_CCM_Decrypt_Append+0x3aa>
 800334c:	ea4f 008c 	mov.w	r0, ip, lsl #2
 8003350:	ab04      	add	r3, sp, #16
 8003352:	f100 0124 	add.w	r1, r0, #36	; 0x24
 8003356:	f1c0 0210 	rsb	r2, r0, #16
 800335a:	4431      	add	r1, r6
 800335c:	4418      	add	r0, r3
 800335e:	9301      	str	r3, [sp, #4]
 8003360:	f000 f8fe 	bl	8003560 <memcpy>
 8003364:	9801      	ldr	r0, [sp, #4]
 8003366:	4652      	mov	r2, sl
 8003368:	f106 0124 	add.w	r1, r6, #36	; 0x24
 800336c:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800336e:	f7fe fd59 	bl	8001e24 <AES_general_SW_enc>
 8003372:	e6e8      	b.n	8003146 <AES_CCM_Decrypt_Append+0x16e>
 8003374:	46e3      	mov	fp, ip
 8003376:	e6e3      	b.n	8003140 <AES_CCM_Decrypt_Append+0x168>
 8003378:	2200      	movs	r2, #0
 800337a:	4613      	mov	r3, r2
 800337c:	f04f 0c01 	mov.w	ip, #1
 8003380:	e7b5      	b.n	80032ee <AES_CCM_Decrypt_Append+0x316>
 8003382:	ab04      	add	r3, sp, #16
 8003384:	9301      	str	r3, [sp, #4]
 8003386:	4618      	mov	r0, r3
 8003388:	e7ed      	b.n	8003366 <AES_CCM_Decrypt_Append+0x38e>
 800338a:	bf00      	nop

0800338c <AES_CCM_Decrypt_Finish>:
 800338c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003390:	2300      	movs	r3, #0
 8003392:	b085      	sub	sp, #20
 8003394:	4680      	mov	r8, r0
 8003396:	9300      	str	r3, [sp, #0]
 8003398:	9301      	str	r3, [sp, #4]
 800339a:	9302      	str	r3, [sp, #8]
 800339c:	9303      	str	r3, [sp, #12]
 800339e:	2800      	cmp	r0, #0
 80033a0:	f000 80b1 	beq.w	8003506 <AES_CCM_Decrypt_Finish+0x17a>
 80033a4:	2a00      	cmp	r2, #0
 80033a6:	f000 80ae 	beq.w	8003506 <AES_CCM_Decrypt_Finish+0x17a>
 80033aa:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80033ac:	b111      	cbz	r1, 80033b4 <AES_CCM_Decrypt_Finish+0x28>
 80033ae:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80033b0:	2910      	cmp	r1, #16
 80033b2:	d904      	bls.n	80033be <AES_CCM_Decrypt_Finish+0x32>
 80033b4:	f640 401f 	movw	r0, #3103	; 0xc1f
 80033b8:	b005      	add	sp, #20
 80033ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80033be:	6013      	str	r3, [r2, #0]
 80033c0:	7901      	ldrb	r1, [r0, #4]
 80033c2:	6902      	ldr	r2, [r0, #16]
 80033c4:	f041 0102 	orr.w	r1, r1, #2
 80033c8:	2a0b      	cmp	r2, #11
 80033ca:	7101      	strb	r1, [r0, #4]
 80033cc:	f300 8091 	bgt.w	80034f2 <AES_CCM_Decrypt_Finish+0x166>
 80033d0:	f8c8 3020 	str.w	r3, [r8, #32]
 80033d4:	f108 0014 	add.w	r0, r8, #20
 80033d8:	4669      	mov	r1, sp
 80033da:	f108 0248 	add.w	r2, r8, #72	; 0x48
 80033de:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 80033e2:	f7fe fd1f 	bl	8001e24 <AES_general_SW_enc>
 80033e6:	f8d8 903c 	ldr.w	r9, [r8, #60]	; 0x3c
 80033ea:	9e01      	ldr	r6, [sp, #4]
 80033ec:	f1b9 0f00 	cmp.w	r9, #0
 80033f0:	9c02      	ldr	r4, [sp, #8]
 80033f2:	9b03      	ldr	r3, [sp, #12]
 80033f4:	9800      	ldr	r0, [sp, #0]
 80033f6:	46cc      	mov	ip, r9
 80033f8:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
 80033fc:	bfb8      	it	lt
 80033fe:	f109 0c03 	addlt.w	ip, r9, #3
 8003402:	f8d8 5028 	ldr.w	r5, [r8, #40]	; 0x28
 8003406:	f8d8 102c 	ldr.w	r1, [r8, #44]	; 0x2c
 800340a:	f8d8 2030 	ldr.w	r2, [r8, #48]	; 0x30
 800340e:	ea4f 0cac 	mov.w	ip, ip, asr #2
 8003412:	4047      	eors	r7, r0
 8003414:	4075      	eors	r5, r6
 8003416:	4061      	eors	r1, r4
 8003418:	4053      	eors	r3, r2
 800341a:	f1bc 0f00 	cmp.w	ip, #0
 800341e:	9700      	str	r7, [sp, #0]
 8003420:	9501      	str	r5, [sp, #4]
 8003422:	9102      	str	r1, [sp, #8]
 8003424:	9303      	str	r3, [sp, #12]
 8003426:	dd73      	ble.n	8003510 <AES_CCM_Decrypt_Finish+0x184>
 8003428:	f8d8 0038 	ldr.w	r0, [r8, #56]	; 0x38
 800342c:	f1bc 0f01 	cmp.w	ip, #1
 8003430:	7804      	ldrb	r4, [r0, #0]
 8003432:	78c2      	ldrb	r2, [r0, #3]
 8003434:	7886      	ldrb	r6, [r0, #2]
 8003436:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 800343a:	7844      	ldrb	r4, [r0, #1]
 800343c:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
 8003440:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8003444:	ea82 0707 	eor.w	r7, r2, r7
 8003448:	dd2b      	ble.n	80034a2 <AES_CCM_Decrypt_Finish+0x116>
 800344a:	79c2      	ldrb	r2, [r0, #7]
 800344c:	7906      	ldrb	r6, [r0, #4]
 800344e:	7984      	ldrb	r4, [r0, #6]
 8003450:	ea42 6606 	orr.w	r6, r2, r6, lsl #24
 8003454:	7942      	ldrb	r2, [r0, #5]
 8003456:	ea46 2604 	orr.w	r6, r6, r4, lsl #8
 800345a:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 800345e:	4075      	eors	r5, r6
 8003460:	f1bc 0f02 	cmp.w	ip, #2
 8003464:	ea47 0705 	orr.w	r7, r7, r5
 8003468:	dd1b      	ble.n	80034a2 <AES_CCM_Decrypt_Finish+0x116>
 800346a:	7ac2      	ldrb	r2, [r0, #11]
 800346c:	7a04      	ldrb	r4, [r0, #8]
 800346e:	7a85      	ldrb	r5, [r0, #10]
 8003470:	ea42 6404 	orr.w	r4, r2, r4, lsl #24
 8003474:	7a42      	ldrb	r2, [r0, #9]
 8003476:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 800347a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800347e:	4061      	eors	r1, r4
 8003480:	f1bc 0f03 	cmp.w	ip, #3
 8003484:	ea47 0701 	orr.w	r7, r7, r1
 8003488:	dd0b      	ble.n	80034a2 <AES_CCM_Decrypt_Finish+0x116>
 800348a:	7b01      	ldrb	r1, [r0, #12]
 800348c:	7bc2      	ldrb	r2, [r0, #15]
 800348e:	7b44      	ldrb	r4, [r0, #13]
 8003490:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003494:	7b81      	ldrb	r1, [r0, #14]
 8003496:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800349a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800349e:	4053      	eors	r3, r2
 80034a0:	431f      	orrs	r7, r3
 80034a2:	ebcc 748c 	rsb	r4, ip, ip, lsl #30
 80034a6:	00a4      	lsls	r4, r4, #2
 80034a8:	44a1      	add	r9, r4
 80034aa:	f1b9 0f00 	cmp.w	r9, #0
 80034ae:	dd17      	ble.n	80034e0 <AES_CCM_Decrypt_Finish+0x154>
 80034b0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80034b4:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
 80034b8:	ab04      	add	r3, sp, #16
 80034ba:	4463      	add	r3, ip
 80034bc:	44e1      	add	r9, ip
 80034be:	f853 5c10 	ldr.w	r5, [r3, #-16]
 80034c2:	eb02 0409 	add.w	r4, r2, r9
 80034c6:	2318      	movs	r3, #24
 80034c8:	4462      	add	r2, ip
 80034ca:	fa25 f103 	lsr.w	r1, r5, r3
 80034ce:	f812 0b01 	ldrb.w	r0, [r2], #1
 80034d2:	3b08      	subs	r3, #8
 80034d4:	4041      	eors	r1, r0
 80034d6:	b2c9      	uxtb	r1, r1
 80034d8:	42a2      	cmp	r2, r4
 80034da:	ea47 0701 	orr.w	r7, r7, r1
 80034de:	d1f4      	bne.n	80034ca <AES_CCM_Decrypt_Finish+0x13e>
 80034e0:	2f00      	cmp	r7, #0
 80034e2:	f240 30eb 	movw	r0, #1003	; 0x3eb
 80034e6:	bf18      	it	ne
 80034e8:	f44f 707b 	movne.w	r0, #1004	; 0x3ec
 80034ec:	b005      	add	sp, #20
 80034ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80034f2:	f1c2 020f 	rsb	r2, r2, #15
 80034f6:	f04f 33ff 	mov.w	r3, #4294967295
 80034fa:	00d2      	lsls	r2, r2, #3
 80034fc:	fa03 f202 	lsl.w	r2, r3, r2
 8003500:	6a03      	ldr	r3, [r0, #32]
 8003502:	4013      	ands	r3, r2
 8003504:	e764      	b.n	80033d0 <AES_CCM_Decrypt_Finish+0x44>
 8003506:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 800350a:	b005      	add	sp, #20
 800350c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003510:	2400      	movs	r4, #0
 8003512:	4627      	mov	r7, r4
 8003514:	46a4      	mov	ip, r4
 8003516:	e7c7      	b.n	80034a8 <AES_CCM_Decrypt_Finish+0x11c>

08003518 <__libc_init_array>:
 8003518:	b570      	push	{r4, r5, r6, lr}
 800351a:	2600      	movs	r6, #0
 800351c:	4d0c      	ldr	r5, [pc, #48]	; (8003550 <__libc_init_array+0x38>)
 800351e:	4c0d      	ldr	r4, [pc, #52]	; (8003554 <__libc_init_array+0x3c>)
 8003520:	1b64      	subs	r4, r4, r5
 8003522:	10a4      	asrs	r4, r4, #2
 8003524:	42a6      	cmp	r6, r4
 8003526:	d109      	bne.n	800353c <__libc_init_array+0x24>
 8003528:	f000 f830 	bl	800358c <_init>
 800352c:	2600      	movs	r6, #0
 800352e:	4d0a      	ldr	r5, [pc, #40]	; (8003558 <__libc_init_array+0x40>)
 8003530:	4c0a      	ldr	r4, [pc, #40]	; (800355c <__libc_init_array+0x44>)
 8003532:	1b64      	subs	r4, r4, r5
 8003534:	10a4      	asrs	r4, r4, #2
 8003536:	42a6      	cmp	r6, r4
 8003538:	d105      	bne.n	8003546 <__libc_init_array+0x2e>
 800353a:	bd70      	pop	{r4, r5, r6, pc}
 800353c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003540:	4798      	blx	r3
 8003542:	3601      	adds	r6, #1
 8003544:	e7ee      	b.n	8003524 <__libc_init_array+0xc>
 8003546:	f855 3b04 	ldr.w	r3, [r5], #4
 800354a:	4798      	blx	r3
 800354c:	3601      	adds	r6, #1
 800354e:	e7f2      	b.n	8003536 <__libc_init_array+0x1e>
 8003550:	08003b00 	.word	0x08003b00
 8003554:	08003b00 	.word	0x08003b00
 8003558:	08003b00 	.word	0x08003b00
 800355c:	08003b04 	.word	0x08003b04

08003560 <memcpy>:
 8003560:	440a      	add	r2, r1
 8003562:	4291      	cmp	r1, r2
 8003564:	f100 33ff 	add.w	r3, r0, #4294967295
 8003568:	d100      	bne.n	800356c <memcpy+0xc>
 800356a:	4770      	bx	lr
 800356c:	b510      	push	{r4, lr}
 800356e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003572:	4291      	cmp	r1, r2
 8003574:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003578:	d1f9      	bne.n	800356e <memcpy+0xe>
 800357a:	bd10      	pop	{r4, pc}

0800357c <memset>:
 800357c:	4603      	mov	r3, r0
 800357e:	4402      	add	r2, r0
 8003580:	4293      	cmp	r3, r2
 8003582:	d100      	bne.n	8003586 <memset+0xa>
 8003584:	4770      	bx	lr
 8003586:	f803 1b01 	strb.w	r1, [r3], #1
 800358a:	e7f9      	b.n	8003580 <memset+0x4>

0800358c <_init>:
 800358c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800358e:	bf00      	nop
 8003590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003592:	bc08      	pop	{r3}
 8003594:	469e      	mov	lr, r3
 8003596:	4770      	bx	lr

08003598 <_fini>:
 8003598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800359a:	bf00      	nop
 800359c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800359e:	bc08      	pop	{r3}
 80035a0:	469e      	mov	lr, r3
 80035a2:	4770      	bx	lr
